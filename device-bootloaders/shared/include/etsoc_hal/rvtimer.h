/*                                                                         */
/* Generated by Semifore, Inc. csrCompile                                  */
/*    Version: 2019.03.01 Build: release Linux 64-bit                      */
/*    C Header output                                                      */
/*                                                                         */
/* Command Line:                                                           */
/*    /home/cad/tools/semifore/csrCompile/LATEST/bin/x64_re6/csrCompile -v */
/*    -c                                                                   */
/*    /data/ssmith/work/repos/soc_hal/dv/common/scripts/semifore_css/bitfield_enum_doc.css */
/*    -t h rvtimer.csr -o gen_sw/rvtimer                                   */
/*                                                                         */
/* Input files:                                                            */
/*    rvtimer.csr                                                          */
/*                                                                         */
/* Configuration files:                                                    */
/*    /data/ssmith/work/repos/soc_hal/dv/common/scripts/semifore_css/bitfield_enum_doc.css */
/*                                                                         */
/* Generated on: Tue May 21 15:35:18 2019                                  */
/*           by: ssmith                                                    */
/*                                                                         */

#ifndef _RVTIMER_H_
#define _RVTIMER_H_


/* ####################################################################### */
/*        TYPE DEFINITIONS                                                 */
/* ####################################################################### */

/* Typedef for Register: rvtimer::mtime                                    */
/* Source filename: rvtimer.csr, line: 9                                   */
/* Title: Mtime                                                            */
typedef struct {
   union {
      struct {

         /* Source filename: rvtimer.csr, line: 12                         */
         /* Title: count                                                   */
         /* Description:                                                   */
         /**
          *    The mtime register is a 64 bit register increments every 100 
          *    ns.  When it reaches its maximum value, it wraps back to 0.
         */
         uint64_t value : 64; /* bits 63 to 0; R/W; 0 */
      } B;
      uint64_t qword;
   } ;
} Rvtimer_mtime_t;

/* Typedef for Register: rvtimer::mtimecmp                                 */
/* Source filename: rvtimer.csr, line: 21                                  */
/* Title: Mtimecmp                                                         */
typedef struct {
   union {
      struct {

         /* Source filename: rvtimer.csr, line: 24                         */
         /* Title: Mtimecmp                                                */
         /* Description:                                                   */
         /**
          *    The mtimecmp register is a 64 bit register whose value is 
          *    compared to that of the mtime register.  Whenever the mtime 
          *    register value is greater than or equal to the mtimecmp 
          *    register, the RV Timer will send a timer interrupt to its 
          *    interrupt target.  Writes to the mtimecmp register not only 
          *    update its value but also have the side effect of clearing the
          *     timer interrupt (unless the mtime value  is still greater 
          *    than the mtimecmp value). 
         */
         uint64_t value : 64; /* bits 63 to 0; R/W; 0xfffffffffffffffe */
      } B;
      uint64_t qword;
   } ;
} Rvtimer_mtimecmp_t;

/* Typedef for Addressmap: rvtimer                                         */
/* Source filename: rvtimer.csr, line: 39                                  */
typedef struct {
   Rvtimer_mtime_t mtime; /**< Offset 0x0 (R/W) */
   Rvtimer_mtimecmp_t mtimecmp; /**< Offset 0x8 (R/W) */
   uint8_t _pad0[0x10];
} Rvtimer_t;

#endif
