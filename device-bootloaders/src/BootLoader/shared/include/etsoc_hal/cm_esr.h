/*                                                                         */
/* Generated by Semifore, Inc. csrCompile                                  */
/*    Version: 2019.03.02 Build: release Linux 64-bit                      */
/*    C Header output                                                      */
/*                                                                         */
/* Command Line:                                                           */
/*    /home/cad/tools/semifore/csrCompile/LATEST/bin/x64_re6/csrCompile -v */
/*    -c                                                                   */
/*    /eng/ssmith/work/repos/soc_hal/dv/common/scripts/semifore_css/bitfield_enum_doc.css */
/*    -t h cm_esr.csr -o gen_sw/cm_esr                                     */
/*                                                                         */
/* Input files:                                                            */
/*    cm_esr.csr                                                           */
/*                                                                         */
/* Configuration files:                                                    */
/*    /eng/ssmith/work/repos/soc_hal/dv/common/scripts/semifore_css/bitfield_enum_doc.css */
/*                                                                         */
/* Generated on: Fri Sep 13 06:30:54 2019                                  */
/*           by: ssmith                                                    */
/*                                                                         */

#ifndef _CM_ESR_H_
#define _CM_ESR_H_


/* ####################################################################### */
/*        TYPE DEFINITIONS                                                 */
/* ####################################################################### */

/* Typedef for Register: Clock_Manager::cm_pll0_ctrl                       */
/* Source filename: cm_esr.csr, line: 158                                  */
/* Title: cm_pll0_ctrl                                                     */
typedef struct {
   union {
      struct {

         /* Source filename: cm_esr.csr, line: 161                         */
         /* Title: lockintr_en                                             */
         /* Description:                                                   */
         /**
          *    0: disable the lock interrupt. 1: enable the lock interrupt.
         */
         uint32_t lockintr_en : 1; /* bit 0; R/W; 0 */

         /* Source filename: cm_esr.csr, line: 168                         */
         /* Title: lossintr_en                                             */
         /* Description:                                                   */
         /**
          *    0: disable the loss interrupt. 1: enable the loss interrupt.
         */
         uint32_t lossintr_en : 1; /* bit 1; R/W; 0 */
         uint32_t : 30; /* bits 31 to 2 */
      } B;
      uint32_t R;
   } ;
} Clock_Manager_cm_pll0_ctrl_t;

/* Typedef for Register: Clock_Manager::cm_pll1_ctrl                       */
/* Source filename: cm_esr.csr, line: 196                                  */
/* Title: cm_pll1_ctrl                                                     */
typedef struct {
   union {
      struct {

         /* Source filename: cm_esr.csr, line: 206                         */
         /* Title: lockintr_en                                             */
         /* Description:                                                   */
         /**
          *    0: disable the lock interrupt. 1: enable the lock interrupt.
         */
         uint32_t lockintr_en : 1; /* bit 0; R/W; 0 */

         /* Source filename: cm_esr.csr, line: 213                         */
         /* Title: lossintr_en                                             */
         /* Description:                                                   */
         /**
          *    0: disable the loss interrupt. 1: enable the loss interrupt.
         */
         uint32_t lossintr_en : 1; /* bit 1; R/W; 0 */
         uint32_t : 2; /* bits 3 to 2 */

         /* Source filename: cm_esr.csr, line: 199                         */
         /* Title: enable                                                  */
         /* Description:                                                   */
         /**
          *    0: bypass the PLL by using the boot clock (low frequency). 1: 
          *    use the PLL1's output clock as clock
         */
         uint32_t enable : 1; /* bit 4; R/W; 0 */
         uint32_t : 27; /* bits 31 to 5 */
      } B;
      uint32_t R;
   } ;
} Clock_Manager_cm_pll1_ctrl_t;

/* Typedef for Register: Clock_Manager::cm_pll2_ctrl                       */
/* Source filename: cm_esr.csr, line: 241                                  */
/* Title: cm_pll2_ctrl                                                     */
typedef struct {
   union {
      struct {

         /* Source filename: cm_esr.csr, line: 251                         */
         /* Title: lockintr_en                                             */
         /* Description:                                                   */
         /**
          *    0: disable the lock interrupt. 1: enable the lock interrupt.
         */
         uint32_t lockintr_en : 1; /* bit 0; R/W; 0 */

         /* Source filename: cm_esr.csr, line: 258                         */
         /* Title: lossintr_en                                             */
         /* Description:                                                   */
         /**
          *    0: disable the loss interrupt. 1: enable the loss interrupt.
         */
         uint32_t lossintr_en : 1; /* bit 1; R/W; 0 */
         uint32_t : 2; /* bits 3 to 2 */

         /* Source filename: cm_esr.csr, line: 244                         */
         /* Title: enable                                                  */
         /* Description:                                                   */
         /**
          *    0: bypass the PLL by using the boot clock (low frequency). 1: 
          *    use the PLL2's output clock as clock
         */
         uint32_t enable : 1; /* bit 4; R/W; 0 */
         uint32_t : 27; /* bits 31 to 5 */
      } B;
      uint32_t R;
   } ;
} Clock_Manager_cm_pll2_ctrl_t;

/* Typedef for Register: Clock_Manager::cm_pll4_ctrl                       */
/* Source filename: cm_esr.csr, line: 286                                  */
/* Title: cm_pll4_ctrl                                                     */
typedef struct {
   union {
      struct {

         /* Source filename: cm_esr.csr, line: 296                         */
         /* Title: lockintr_en                                             */
         /* Description:                                                   */
         /**
          *    0: disable the lock interrupt. 1: enable the lock interrupt.
         */
         uint32_t lockintr_en : 1; /* bit 0; R/W; 0 */

         /* Source filename: cm_esr.csr, line: 303                         */
         /* Title: lossintr_en                                             */
         /* Description:                                                   */
         /**
          *    0: disable the loss interrupt. 1: enable the loss interrupt.
         */
         uint32_t lossintr_en : 1; /* bit 1; R/W; 0 */
         uint32_t : 2; /* bits 3 to 2 */

         /* Source filename: cm_esr.csr, line: 289                         */
         /* Title: enable                                                  */
         /* Description:                                                   */
         /**
          *    0: bypass the PLL by using the boot clock (low frequency). 1: 
          *    use the PLL4's output clock as clock
         */
         uint32_t enable : 1; /* bit 4; R/W; 0 */
         uint32_t : 27; /* bits 31 to 5 */
      } B;
      uint32_t R;
   } ;
} Clock_Manager_cm_pll4_ctrl_t;

/* Typedef for Register: Clock_Manager::cm_pll0_status                     */
/* Source filename: cm_esr.csr, line: 177                                  */
/* Title: cm_pll0_status                                                   */
typedef struct {
   union {
      struct {

         /* Source filename: cm_esr.csr, line: 180                         */
         /* Title: lock                                                    */
         /* Description:                                                   */
         /**
          *    0: PLL lock has not happened. 1: PLL lock has happened. Write 
          *    1'b0 to clear.
         */
         uint32_t lock : 1; /* bit 0; R/W; 0 */

         /* Source filename: cm_esr.csr, line: 187                         */
         /* Title: loss                                                    */
         /* Description:                                                   */
         /**
          *    0: PLL loss (lock) has not happened. 1: PLL loss (lock) has 
          *    happened. Write 1'b0 to clear.
         */
         uint32_t loss : 1; /* bit 1; R/W; 0 */
         uint32_t : 30; /* bits 31 to 2 */
      } B;
      uint32_t R;
   } ;
} Clock_Manager_cm_pll0_status_t;

/* Typedef for Register: Clock_Manager::cm_pll1_status                     */
/* Source filename: cm_esr.csr, line: 222                                  */
/* Title: cm_pll1_status                                                   */
typedef struct {
   union {
      struct {

         /* Source filename: cm_esr.csr, line: 225                         */
         /* Title: lock                                                    */
         /* Description:                                                   */
         /**
          *    0: PLL lock has not happened. 1: PLL lock has happened. Write 
          *    1'b0 to clear.
         */
         uint32_t lock : 1; /* bit 0; R/W; 0 */

         /* Source filename: cm_esr.csr, line: 232                         */
         /* Title: loss                                                    */
         /* Description:                                                   */
         /**
          *    0: PLL loss (lock) has not happened. 1: PLL loss (lock) has 
          *    happened. Write 1'b0 to clear.
         */
         uint32_t loss : 1; /* bit 1; R/W; 0 */
         uint32_t : 30; /* bits 31 to 2 */
      } B;
      uint32_t R;
   } ;
} Clock_Manager_cm_pll1_status_t;

/* Typedef for Register: Clock_Manager::cm_pll2_status                     */
/* Source filename: cm_esr.csr, line: 267                                  */
/* Title: cm_pll2_status                                                   */
typedef struct {
   union {
      struct {

         /* Source filename: cm_esr.csr, line: 270                         */
         /* Title: lock                                                    */
         /* Description:                                                   */
         /**
          *    0: PLL lock has not happened. 1: PLL lock has happened. Write 
          *    1'b0 to clear.
         */
         uint32_t lock : 1; /* bit 0; R/W; 0 */

         /* Source filename: cm_esr.csr, line: 277                         */
         /* Title: loss                                                    */
         /* Description:                                                   */
         /**
          *    0: PLL loss (lock) has not happened. 1: PLL loss (lock) has 
          *    happened. Write 1'b0 to clear.
         */
         uint32_t loss : 1; /* bit 1; R/W; 0 */
         uint32_t : 30; /* bits 31 to 2 */
      } B;
      uint32_t R;
   } ;
} Clock_Manager_cm_pll2_status_t;

/* Typedef for Register: Clock_Manager::cm_pll4_status                     */
/* Source filename: cm_esr.csr, line: 312                                  */
/* Title: cm_pll4_status                                                   */
typedef struct {
   union {
      struct {

         /* Source filename: cm_esr.csr, line: 315                         */
         /* Title: lock                                                    */
         /* Description:                                                   */
         /**
          *    0: PLL lock has not happened. 1: PLL lock has happened. Write 
          *    1'b0 to clear.
         */
         uint32_t lock : 1; /* bit 0; R/W; 0 */

         /* Source filename: cm_esr.csr, line: 322                         */
         /* Title: loss                                                    */
         /* Description:                                                   */
         /**
          *    0: PLL loss (lock) has not happened. 1: PLL loss (lock) has 
          *    happened. Write 1'b0 to clear.
         */
         uint32_t loss : 1; /* bit 1; R/W; 0 */
         uint32_t : 30; /* bits 31 to 2 */
      } B;
      uint32_t R;
   } ;
} Clock_Manager_cm_pll4_status_t;

/* Typedef for Register: Clock_Manager::cm_ios_ctrl                        */
/* Source filename: cm_esr.csr, line: 99                                   */
/* Title: cm_ios_ctrl                                                      */
typedef struct {
   union {
      struct {

         /* Source filename: cm_esr.csr, line: 102                         */
         /* Title: mission                                                 */
         /* Description:                                                   */
         /**
          *    0: Select the slow boot clock (external clock) as the ioshire 
          *    operation clock. 1: Use the PLL0's output clock as the mission
          *     clock. Caution: this is a critical clock related register. 
          *    Software shall write this register only after the PLL0's 
          *    output clock has been successfully locked. Writing this 
          *    register before properly setting up PLL0 can cause system 
          *    hang.
         */
         uint32_t mission : 1; /* bit 0; R/W; 0 */
         uint32_t : 31; /* bits 31 to 1 */
      } B;
      uint32_t R;
   } ;
} Clock_Manager_cm_ios_ctrl_t;

/* Typedef for Register: Clock_Manager::cm_clk_500mhz                      */
/* Source filename: cm_esr.csr, line: 28                                   */
/* Title: cm_clk_500mhz                                                    */
typedef struct {
   union {
      struct {

         /* Source filename: cm_esr.csr, line: 31                          */
         /* Title: off                                                     */
         /* Description:                                                   */
         /**
          *    Enable/Disable clk_500mhz. 0: Disable the corresponding clock.
          *     1: Enable the corresponding clock.
         */
         uint32_t off : 1; /* bit 0; R/W; 0 */

         /* Source filename: cm_esr.csr, line: 38                          */
         /* Title: stable                                                  */
         /* Description:                                                   */
         /**
          *    Status of clk_500mhz. 0: The clock is not stable yet. 1: The 
          *    clock has been stable. Software can poll this bit to know if 
          *    the clock is stable.
         */
         uint32_t stable : 1; /* bit 1; R/W; 0 */
         uint32_t : 30; /* bits 31 to 2 */
      } B;
      uint32_t R;
   } ;
} Clock_Manager_cm_clk_500mhz_t;

/* Typedef for Register: Clock_Manager::cm_clk_200mhz                      */
/* Source filename: cm_esr.csr, line: 9                                    */
/* Title: cm_clk_200mhz                                                    */
typedef struct {
   union {
      struct {

         /* Source filename: cm_esr.csr, line: 12                          */
         /* Title: off                                                     */
         /* Description:                                                   */
         /**
          *    Enable/Disable clk_200mhz. 0: Disable the corresponding clock.
          *     1: Enable the corresponding clock.
         */
         uint32_t off : 1; /* bit 0; R/W; 0 */

         /* Source filename: cm_esr.csr, line: 19                          */
         /* Title: stable                                                  */
         /* Description:                                                   */
         /**
          *    Status of clk_200mhz. 0: The clock is not stable yet. 1: The 
          *    clock has been stable. Software can poll this bit to know if 
          *    the clock is stable.
         */
         uint32_t stable : 1; /* bit 1; R/W; 0 */
         uint32_t : 30; /* bits 31 to 2 */
      } B;
      uint32_t R;
   } ;
} Clock_Manager_cm_clk_200mhz_t;

/* Typedef for Register: Clock_Manager::cm_clk_main_wrck                   */
/* Source filename: cm_esr.csr, line: 47                                   */
/* Title: cm_clk_main_wrck                                                 */
typedef struct {
   union {
      struct {

         /* Source filename: cm_esr.csr, line: 50                          */
         /* Title: off                                                     */
         /* Description:                                                   */
         /**
          *    Enable/Disable clk_main_wrck. 0: Disable the corresponding 
          *    clock. 1: Enable the corresponding clock.
         */
         uint32_t off : 1; /* bit 0; R/W; 0 */

         /* Source filename: cm_esr.csr, line: 64                          */
         /* Title: stable                                                  */
         /* Description:                                                   */
         /**
          *    Status of clk_main_wrck. 0: The clock is not stable yet. 1: 
          *    The clock has been stable. Software can poll this bit to know 
          *    if the clock is stable.
         */
         uint32_t stable : 1; /* bit 1; R/W; 0 */
         uint32_t : 2; /* bits 3 to 2 */

         /* Source filename: cm_esr.csr, line: 57                          */
         /* Title: sel                                                     */
         /* Description:                                                   */
         /**
          *    0: Select slow clock (10Mhz) to drive WRCK. 1: Select fast 
          *    clock (100Mhz) to drive WRCK.
         */
         uint32_t sel : 1; /* bit 4; R/W; 0 */
         uint32_t : 27; /* bits 31 to 5 */
      } B;
      uint32_t R;
   } ;
} Clock_Manager_cm_clk_main_wrck_t;

/* Typedef for Register: Clock_Manager::cm_clk_vault_wrck                  */
/* Source filename: cm_esr.csr, line: 73                                   */
/* Title: cm_clk_vault_wrck                                                */
typedef struct {
   union {
      struct {

         /* Source filename: cm_esr.csr, line: 76                          */
         /* Title: off                                                     */
         /* Description:                                                   */
         /**
          *    Enable/Disable clk_vault_wrck. 0: Disable the corresponding 
          *    clock. 1: Enable the corresponding clock.
         */
         uint32_t off : 1; /* bit 0; R/W; 0 */

         /* Source filename: cm_esr.csr, line: 90                          */
         /* Title: stable                                                  */
         /* Description:                                                   */
         /**
          *    Status of clk_vault_wrck. 0: The clock is not stable yet. 1: 
          *    The clock has been stable. Software can poll this bit to know 
          *    if the clock is stable.
         */
         uint32_t stable : 1; /* bit 1; R/W; 0 */
         uint32_t : 2; /* bits 3 to 2 */

         /* Source filename: cm_esr.csr, line: 83                          */
         /* Title: sel                                                     */
         /* Description:                                                   */
         /**
          *    0: Select slow clock (10Mhz) to drive WRCK. 1: Select fast 
          *    clock (100Mhz) to drive WRCK.
         */
         uint32_t sel : 1; /* bit 4; R/W; 0 */
         uint32_t : 27; /* bits 31 to 5 */
      } B;
      uint32_t R;
   } ;
} Clock_Manager_cm_clk_vault_wrck_t;

/* Typedef for Register: Clock_Manager::cm_max                             */
/* Source filename: cm_esr.csr, line: 111                                  */
/* Title: cm_max                                                           */
typedef struct {
   union {
      struct {

         /* Source filename: cm_esr.csr, line: 142                         */
         /* Title: pll_sel                                                 */
         /* Description:                                                   */
         /**
          *    0: bypass PLL. 1: use PLL's output as clkmux output.
         */
         uint32_t pll_sel : 1; /* bit 0; R/W; 0 */
         uint32_t : 3; /* bits 3 to 1 */

         /* Source filename: cm_esr.csr, line: 121                         */
         /* Title: clk_off                                                 */
         /* Description:                                                   */
         /**
          *    Enable/disbale max clock root. 0: (default) enable the clock 
          *    root in max_cru and clock tree propagation in maxion. 1: 
          *    disable clock root in maxion cru and to safe power.
         */
         uint32_t clk_off : 1; /* bit 4; R/W; 0 */

         /* Source filename: cm_esr.csr, line: 128                         */
         /* Title: clk_uncore_stable                                       */
         /* Description:                                                   */
         /**
          *    Max uncore clock root status. 0: the clock root in max_cru is 
          *    not stable. 1: the clock root in maxion cru is stable.
         */
         uint32_t clk_uncore_stable : 1; /* bit 5; R/W; 0 */

         /* Source filename: cm_esr.csr, line: 114                         */
         /* Title: clk_core_stable                                         */
         /* Description:                                                   */
         /**
          *    Max core clock root status. 0: the clock root in max_cru is 
          *    not stable. 1: the clock root in maxion cru is stable.
         */
         uint32_t clk_core_stable : 1; /* bit 6; R/W; 0 */
         uint32_t : 1; /* bit 7 */

         /* Source filename: cm_esr.csr, line: 149                         */
         /* Title: pll_uncore_loss                                         */
         /* Description:                                                   */
         /**
          *    Read-only: Max uncore PLL loss lock. 0: PLL is locked. 1: PLL 
          *    loss lock.
         */
         uint32_t pll_uncore_loss : 1; /* bit 8; R/W; 0 */

         /* Source filename: cm_esr.csr, line: 135                         */
         /* Title: pll_core_loss                                           */
         /* Description:                                                   */
         /**
          *    Read-only: Max core PLL loss lock. 0: PLL is locked. 1: PLL 
          *    loss lock.
         */
         uint32_t pll_core_loss : 1; /* bit 9; R/W; 0 */
         uint32_t : 22; /* bits 31 to 10 */
      } B;
      uint32_t R;
   } ;
} Clock_Manager_cm_max_t;

/* Typedef for Addressmap: Clock_Manager                                   */
/* Source filename: cm_esr.csr, line: 331                                  */
typedef struct {
   Clock_Manager_cm_pll0_ctrl_t cm_pll0_ctrl; /**< Offset 0x0 (R/W) */
   Clock_Manager_cm_pll1_ctrl_t cm_pll1_ctrl; /**< Offset 0x4 (R/W) */
   Clock_Manager_cm_pll2_ctrl_t cm_pll2_ctrl; /**< Offset 0x8 (R/W) */
   uint8_t _pad0[0x4];
   Clock_Manager_cm_pll4_ctrl_t cm_pll4_ctrl; /**< Offset 0x10 (R/W) */
   uint8_t _pad1[0xc];
   Clock_Manager_cm_pll0_status_t cm_pll0_status; /**< Offset 0x20 (R/W) */
   Clock_Manager_cm_pll1_status_t cm_pll1_status; /**< Offset 0x24 (R/W) */
   Clock_Manager_cm_pll2_status_t cm_pll2_status; /**< Offset 0x28 (R/W) */
   uint8_t _pad2[0x4];
   Clock_Manager_cm_pll4_status_t cm_pll4_status; /**< Offset 0x30 (R/W) */
   uint8_t _pad3[0x10];
   Clock_Manager_cm_ios_ctrl_t cm_ios_ctrl; /**< Offset 0x44 (R/W) */
   Clock_Manager_cm_clk_500mhz_t cm_clk_500mhz; /**< Offset 0x48 (R/W) */
   Clock_Manager_cm_clk_200mhz_t cm_clk_200mhz; /**< Offset 0x4c (R/W) */
   Clock_Manager_cm_clk_main_wrck_t cm_clk_main_wrck; /**< Offset 0x50 (R/W) */
   Clock_Manager_cm_clk_vault_wrck_t cm_clk_vault_wrck; /**< Offset 0x54 (R/W) */
   uint8_t _pad4[0xa8];
   Clock_Manager_cm_max_t cm_max; /**< Offset 0x100 (R/W) */
   uint8_t _pad5[0xefc];
} Clock_Manager_t;

#endif
