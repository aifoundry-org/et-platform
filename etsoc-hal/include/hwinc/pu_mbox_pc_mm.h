/* Copyright (C) 2021, Esperanto Technologies Inc.                         */
/* The copyright to the computer program(s) herein is the                  */
/* property of Esperanto Technologies, Inc. All Rights Reserved.           */
/* The program(s) may be used and/or copied only with                      */
/* the written permission of Esperanto Technologies and                    */
/* in accordance with the terms and conditions stipulated in the           */
/* agreement/contract under which the program(s) have been supplied.       */
/*                                                                         */
/*                                                                         */
/* Generated by Semifore, Inc. csrCompile                                  */
/*    C Header output                                                      */

#ifndef _PU_MBOX_PC_MM_H_
#define _PU_MBOX_PC_MM_H_



/* ####################################################################### */
/*        ADDRESS MACROS                                                   */
/* ####################################################################### */

/* Address Space for Addressmap: pu_mbox                                   */
/* Memory: pu_mbox.mbox_DFIFO                                              */
#define PU_MBOX_MBOX_DFIFO_ADDRESS 0x0u
#define PU_MBOX_MBOX_DFIFO_BYTE_ADDRESS 0x0u
#define PU_MBOX_MBOX_DFIFO_ARRAY_ELEMENT_SIZE 0x4ull
#define PU_MBOX_MBOX_DFIFO_ARRAY_COUNT 0x400ull
#define PU_MBOX_MBOX_DFIFO_ARRAY_INDEX_MAX 0x3ffull
#define PU_MBOX_MBOX_DFIFO_ARRAY_INDEX_MIN 0x0ull


/* ####################################################################### */
/*        TEMPLATE MACROS                                                  */
/* ####################################################################### */

/* Addressmap type: pu_mbox                                                */
/* Addressmap template: pu_mbox                                            */
#define PU_MBOX_SIZE 0x1000u
#define PU_MBOX_BYTE_SIZE 0x1000u
/* Memory member: pu_mbox.mbox_DFIFO                                       */
/* Memory type referenced: pu_mbox::mbox_DFIFO                             */
/* Memory template referenced: pu_mbox::mbox_DFIFO                         */
#define PU_MBOX_MBOX_DFIFO_OFFSET 0x0u
#define PU_MBOX_MBOX_DFIFO_BYTE_OFFSET 0x0u
#define PU_MBOX_MBOX_DFIFO_READ_ACCESS 1u
#define PU_MBOX_MBOX_DFIFO_WRITE_ACCESS 1u
#define PU_MBOX_MBOX_DFIFO_READ_MASK 0xfffffffful
#define PU_MBOX_MBOX_DFIFO_WRITE_MASK 0xfffffffful

/* Memory type: pu_mbox::mbox_DFIFO                                        */
/* Memory template: pu_mbox::mbox_DFIFO                                    */
#define PU_MBOX_MBOX_DFIFO_SIZE 0x4u
#define PU_MBOX_MBOX_DFIFO_BYTE_SIZE 0x4u
#define PU_MBOX_MBOX_DFIFO_ENTRIES 0x1ull
#define PU_MBOX_MBOX_DFIFO_MSB 31u
#define PU_MBOX_MBOX_DFIFO_LSB 0u
#define PU_MBOX_MBOX_DFIFO_WIDTH 32u
#define PU_MBOX_MBOX_DFIFO_MASK 0xfffffffful
#define PU_MBOX_MBOX_DFIFO_GET(x) ((x) & 0xfffffffful)
#define PU_MBOX_MBOX_DFIFO_SET(x) ((x) & 0xfffffffful)

/* ####################################################################### */
/*        TYPE DEFINITIONS                                                 */
/* ####################################################################### */

/* Typedef for Memory: pu_mbox::mbox_DFIFO                                 */
typedef struct {
   uint8_t _pad0[0x4];
} Pu_mbox_mbox_DFIFO, *PTR_Pu_mbox_mbox_DFIFO;

/* Typedef for Addressmap: pu_mbox                                         */
typedef struct {
   Pu_mbox_mbox_DFIFO mbox_DFIFO[0x400]; /**< Offset 0x0 (R/W) */
} Pu_mbox, *PTR_Pu_mbox;

#endif
