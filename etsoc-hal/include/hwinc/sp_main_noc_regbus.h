/* Copyright (c) 2025 Ainekko, Co. */
/* SPDX-License-Identifier: Apache-2.0 */
/*                                                                         */
/*                                                                         */
/* Generated by Semifore, Inc. csrCompile                                  */
/*    C Header output                                                      */

#ifndef _SP_MAIN_NOC_REGBUS_H_
#define _SP_MAIN_NOC_REGBUS_H_



/* ####################################################################### */
/*        ADDRESS MACROS                                                   */
/* ####################################################################### */

/* Address Space for Addressmap: main_noc                                  */
/* Wide Register: main_noc.placeholder                                     */
#define MAIN_NOC_PLACEHOLDER_ADDRESS 0x0u
#define MAIN_NOC_PLACEHOLDER_BYTE_ADDRESS 0x0u
/* Register: main_noc.placeholder.placeholder_0_2                          */
#define MAIN_NOC_PLACEHOLDER_PLACEHOLDER_0_2_ADDRESS 0x0u
#define MAIN_NOC_PLACEHOLDER_PLACEHOLDER_0_2_BYTE_ADDRESS 0x0u
/* Register: main_noc.placeholder.placeholder_1_2                          */
#define MAIN_NOC_PLACEHOLDER_PLACEHOLDER_1_2_ADDRESS 0x4u
#define MAIN_NOC_PLACEHOLDER_PLACEHOLDER_1_2_BYTE_ADDRESS 0x4u


/* ####################################################################### */
/*        TEMPLATE MACROS                                                  */
/* ####################################################################### */

/* Addressmap type: main_noc                                               */
/* Addressmap template: main_noc                                           */
#define MAIN_NOC_SIZE 0x8u
#define MAIN_NOC_BYTE_SIZE 0x8u
/* Wide Register member: main_noc.placeholder                              */
/* Wide Register type referenced: main_noc::placeholder                    */
/* Wide Register template referenced: main_noc::placeholder                */
#define MAIN_NOC_PLACEHOLDER_OFFSET 0x0u
#define MAIN_NOC_PLACEHOLDER_BYTE_OFFSET 0x0u
#define MAIN_NOC_PLACEHOLDER_READ_ACCESS 1u
#define MAIN_NOC_PLACEHOLDER_WRITE_ACCESS 1u
/* Register member: main_noc::placeholder.placeholder_0_2                  */
/* Register type referenced: main_noc::placeholder::placeholder_0_2        */
/* Register template referenced: main_noc::placeholder::placeholder_0_2    */
#define MAIN_NOC_PLACEHOLDER_PLACEHOLDER_0_2_OFFSET 0x0u
#define MAIN_NOC_PLACEHOLDER_PLACEHOLDER_0_2_BYTE_OFFSET 0x0u
#define MAIN_NOC_PLACEHOLDER_PLACEHOLDER_0_2_READ_ACCESS 1u
#define MAIN_NOC_PLACEHOLDER_PLACEHOLDER_0_2_WRITE_ACCESS 1u
#define MAIN_NOC_PLACEHOLDER_PLACEHOLDER_0_2_RESET_VALUE 0x00000000ul
#define MAIN_NOC_PLACEHOLDER_PLACEHOLDER_0_2_RESET_MASK 0xfffffffful
#define MAIN_NOC_PLACEHOLDER_PLACEHOLDER_0_2_READ_MASK 0xfffffffful
#define MAIN_NOC_PLACEHOLDER_PLACEHOLDER_0_2_WRITE_MASK 0xfffffffful
/* Register member: main_noc::placeholder.placeholder_1_2                  */
/* Register type referenced: main_noc::placeholder::placeholder_1_2        */
/* Register template referenced: main_noc::placeholder::placeholder_1_2    */
#define MAIN_NOC_PLACEHOLDER_PLACEHOLDER_1_2_OFFSET 0x4u
#define MAIN_NOC_PLACEHOLDER_PLACEHOLDER_1_2_BYTE_OFFSET 0x4u
#define MAIN_NOC_PLACEHOLDER_PLACEHOLDER_1_2_READ_ACCESS 1u
#define MAIN_NOC_PLACEHOLDER_PLACEHOLDER_1_2_WRITE_ACCESS 1u
#define MAIN_NOC_PLACEHOLDER_PLACEHOLDER_1_2_RESET_VALUE 0x00000000ul
#define MAIN_NOC_PLACEHOLDER_PLACEHOLDER_1_2_RESET_MASK 0xfffffffful
#define MAIN_NOC_PLACEHOLDER_PLACEHOLDER_1_2_READ_MASK 0xfffffffful
#define MAIN_NOC_PLACEHOLDER_PLACEHOLDER_1_2_WRITE_MASK 0xfffffffful

/* Wide Register type: main_noc::placeholder                               */
/* Wide Register template: main_noc::placeholder                           */
#define MAIN_NOC_PLACEHOLDER_SIZE 0x8u
#define MAIN_NOC_PLACEHOLDER_BYTE_SIZE 0x8u

/* Register type: main_noc::placeholder::placeholder_0_2                   */
/* Register template: main_noc::placeholder::placeholder_0_2               */
/* Field member: main_noc::placeholder::placeholder_0_2.place_31_0         */
#define MAIN_NOC_PLACEHOLDER_PLACEHOLDER_0_2_PLACE_31_0_MSB 31u
#define MAIN_NOC_PLACEHOLDER_PLACEHOLDER_0_2_PLACE_31_0_LSB 0u
#define MAIN_NOC_PLACEHOLDER_PLACEHOLDER_0_2_PLACE_31_0_WIDTH 32u
#define MAIN_NOC_PLACEHOLDER_PLACEHOLDER_0_2_PLACE_31_0_READ_ACCESS 1u
#define MAIN_NOC_PLACEHOLDER_PLACEHOLDER_0_2_PLACE_31_0_WRITE_ACCESS 1u
#define MAIN_NOC_PLACEHOLDER_PLACEHOLDER_0_2_PLACE_31_0_RESET 0x00000000ul
#define MAIN_NOC_PLACEHOLDER_PLACEHOLDER_0_2_PLACE_31_0_FIELD_MASK 0xfffffffful
#define MAIN_NOC_PLACEHOLDER_PLACEHOLDER_0_2_PLACE_31_0_GET(x) \
   ((x) & 0xfffffffful)
#define MAIN_NOC_PLACEHOLDER_PLACEHOLDER_0_2_PLACE_31_0_SET(x) \
   ((x) & 0xfffffffful)
#define MAIN_NOC_PLACEHOLDER_PLACEHOLDER_0_2_PLACE_31_0_MODIFY(r, x) \
   ((x) & 0xfffffffful)

/* Register type: main_noc::placeholder::placeholder_1_2                   */
/* Register template: main_noc::placeholder::placeholder_1_2               */
/* Field member: main_noc::placeholder::placeholder_1_2.place_63_32        */
#define MAIN_NOC_PLACEHOLDER_PLACEHOLDER_1_2_PLACE_63_32_MSB 31u
#define MAIN_NOC_PLACEHOLDER_PLACEHOLDER_1_2_PLACE_63_32_LSB 0u
#define MAIN_NOC_PLACEHOLDER_PLACEHOLDER_1_2_PLACE_63_32_WIDTH 32u
#define MAIN_NOC_PLACEHOLDER_PLACEHOLDER_1_2_PLACE_63_32_READ_ACCESS 1u
#define MAIN_NOC_PLACEHOLDER_PLACEHOLDER_1_2_PLACE_63_32_WRITE_ACCESS 1u
#define MAIN_NOC_PLACEHOLDER_PLACEHOLDER_1_2_PLACE_63_32_RESET 0x00000000ul
#define MAIN_NOC_PLACEHOLDER_PLACEHOLDER_1_2_PLACE_63_32_FIELD_MASK 0xfffffffful
#define MAIN_NOC_PLACEHOLDER_PLACEHOLDER_1_2_PLACE_63_32_GET(x) \
   ((x) & 0xfffffffful)
#define MAIN_NOC_PLACEHOLDER_PLACEHOLDER_1_2_PLACE_63_32_SET(x) \
   ((x) & 0xfffffffful)
#define MAIN_NOC_PLACEHOLDER_PLACEHOLDER_1_2_PLACE_63_32_MODIFY(r, x) \
   ((x) & 0xfffffffful)

/* ####################################################################### */
/*        TYPE DEFINITIONS                                                 */
/* ####################################################################### */

/* Typedef for Wide Register: main_noc::placeholder                        */
typedef struct {
   volatile uint32_t placeholder_0_2; /**< Offset 0x0 (R/W) */
   volatile uint32_t placeholder_1_2; /**< Offset 0x4 (R/W) */
} Main_noc_placeholder, *PTR_Main_noc_placeholder;

/* Typedef for Addressmap: main_noc                                        */
typedef struct {
   volatile Main_noc_placeholder placeholder; /**< Offset 0x0 (R/W) */
} Main_noc, *PTR_Main_noc;

#endif
