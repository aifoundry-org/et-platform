include:
  - project: esperantotech/software/gitlab-ci-common
    ref: 1be8a1ec31da665910e1b2b193fcfa1d05866299
    file:
      - 'pods/nano-pod.yaml'
      - 'jobs/generic-k8s-job.yaml'
      - 'rules/generic-workflow-conan.yaml'
  - project: esperantotech/software/gitlab-ci-common
    ref: master
    file:
      - 'jobs/conan-jobs.yaml'

stages:
  - generate_build
  - build
  - deploy

# Only run job in these cases:
# - if it's a tag pipeline
# - if there is a commit pushed or merged to the default branch (pre-release)
.release_job:
  rules:
    - &release_job_rule
      if: $CI_COMMIT_TAG || ($CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH)

variables:
  OS: "linux-ubuntu22.04"
  ARCH: "x86_64"
  COMPILER: "gcc11"
  BUILD_TYPE: "release"
  FULL_BUILD_NAME: "${OS}-${ARCH}-${COMPILER}-${BUILD_TYPE}"
###############################################################################
###############################################################################
###############################################################################

generate_build:conan:
  extends:
    - .pod_nano
    - .template_job
    - .template-conan-linux-ubuntu18.04-gcc7
  stage: generate_build

  variables:
    TIMEOUT: 15m

    CMD_BUILD: |
      cd conan
      python3 -m pip install "ecpt>=2.0.0,<3.0.0" --index-url https://sc-artifactory1.esperanto.ai/artifactory/api/pypi/pypi-virtual/simple
      python3 -m ci_build
  artifacts:
    expire_in: 1h 
    paths:
      - conan/build_pipeline.yml
      - conan/lockfiles_info.json

###############################################################################
###############################################################################
###############################################################################

build:conan:
  needs:
  - generate_build:conan
  stage: build
  trigger:
    include:
    - artifact: conan/build_pipeline.yml
      job: generate_build:conan
    strategy: depend

###############################################################################
###############################################################################
###############################################################################

on_success:promote:
  extends:
    - .pod_nano
    - .template_job
    - .template-conan-linux-ubuntu18.04-gcc7
  stage: deploy
  needs:
    - generate_build:conan
    - build:conan
  variables:
    PYTHONIOENCODING: utf-8
    CMD_BUILD: |
      cd conan
      python3 -m pip install "ecpt>=2.0.0,<3.0.0" --index-url https://sc-artifactory1.esperanto.ai/artifactory/api/pypi/pypi-virtual/simple
      python3 -m ci_promote

###############################################################################
############################## Conan 2 ########################################
###############################################################################

build:conan2:
  extends:
    - .pod_nano
    - .template_job
    - .template-conan2-linux-ubuntu22.04-gcc11
  stage: build
  needs: []
  script:
    - conan lock create conanfile.py --profile=${FULL_BUILD_NAME} --lockfile-out=${FULL_BUILD_NAME}.lock # Create the lockfile with the profile
    - conan install . --build=missing # Install dependencies from the lockfile
  artifacts:
    expire_in: 2d
    paths:
      - ${FULL_BUILD_NAME}.lock  # Keep the lockfile as an artifact for later stages

on_success:package2:
  extends:
    - .pod_nano
    - .template_job
    - .template-conan2-linux-ubuntu22.04-gcc11
  needs: 
    - build:conan2
  stage: deploy
  script:
    - conan create . --lockfile=${FULL_BUILD_NAME}.lock --lockfile-out=${FULL_BUILD_NAME}.lock --build=missing  # Create the package based on the lockfile
    - conan list "*:*" --format=json > pkglist-${FULL_BUILD_NAME}.json
    - conan upload --list=pkglist-${FULL_BUILD_NAME}.json --format=json -r=conan2-tmp --confirm # Upload package to Artifactory
  artifacts:
    expire_in: 2d
    paths:
      - ${FULL_BUILD_NAME}.lock  # Keep the lockfile
      - pkglist-${FULL_BUILD_NAME}.json # Keep the list

on_success:promote2:
  extends:
    - .pod_nano
    - .template_job
    - .template-conan2-linux-ubuntu22.04-gcc11
  needs:
    - on_success:package2
  rules:
    - *release_job_rule  #Only run this part it it's NOT a MR pipeline
  stage: deploy
  script:
    - conan pkglist find-remote --format=json -r=conan2-tmp pkglist-${FULL_BUILD_NAME}.json > pkglist-merged-with-remote.json
    - conan download --list=pkglist-merged-with-remote.json --format=json -r=conan2-tmp > pkglist-downloaded.json 
    - conan upload --list=pkglist-downloaded.json --format=json -r=conan2-develop --confirm > pkglist-uploaded.json
