/*                                                                         */
/* Generated by Semifore, Inc. csrCompile                                  */
/*    Version: 2019.03.01 Build: release Linux 64-bit                      */
/*    C Header output                                                      */
/*                                                                         */
/* Command Line:                                                           */
/*    /home/cad/tools/semifore/csrCompile/LATEST/bin/x64_re6/csrCompile -v */
/*    -c                                                                   */
/*    /data/ssmith/work/repos/soc_hal/dv/common/scripts/semifore_css/bitfield_enum_doc.css */
/*    -t h cm_esr.csr -o gen_sw/cm_esr                                     */
/*                                                                         */
/* Input files:                                                            */
/*    cm_esr.csr                                                           */
/*                                                                         */
/* Configuration files:                                                    */
/*    /data/ssmith/work/repos/soc_hal/dv/common/scripts/semifore_css/bitfield_enum_doc.css */
/*                                                                         */
/* Generated on: Tue May 21 15:32:22 2019                                  */
/*           by: ssmith                                                    */
/*                                                                         */

#ifndef _CM_ESR_H_
#define _CM_ESR_H_


/* ####################################################################### */
/*        TYPE DEFINITIONS                                                 */
/* ####################################################################### */

/* Typedef for Register: Clock_Manager::cm_pll0_ctrl                       */
/* Source filename: cm_esr.csr, line: 45                                   */
/* Title: cm_pll0_ctrl                                                     */
typedef struct {
   union {
      struct {

         /* Source filename: cm_esr.csr, line: 55                          */
         /* Title: lockintr_en                                             */
         /* Description:                                                   */
         /**
          *    0: disable the lock interrupt. 1: enable the lock interrupt.
         */
         uint32_t lockintr_en : 1; /* bit 0; R/W; 0 */

         /* Source filename: cm_esr.csr, line: 62                          */
         /* Title: lossintr_en                                             */
         /* Description:                                                   */
         /**
          *    0: disable the loss interrupt. 1: enable the loss interrupt.
         */
         uint32_t lossintr_en : 1; /* bit 1; R/W; 0 */
         uint32_t : 2; /* bits 3 to 2 */

         /* Source filename: cm_esr.csr, line: 48                          */
         /* Title: enable                                                  */
         /* Description:                                                   */
         /**
          *    0: bypass the PLL by using the boot clock (low frequency). 1: 
          *    use the PLL0's output clock as clock
         */
         uint32_t enable : 1; /* bit 4; R/W; 0 */
         uint32_t : 27; /* bits 31 to 5 */
      } B;
      uint32_t R;
   } ;
} Clock_Manager_cm_pll0_ctrl_t;

/* Typedef for Register: Clock_Manager::cm_pll1_ctrl                       */
/* Source filename: cm_esr.csr, line: 90                                   */
/* Title: cm_pll1_ctrl                                                     */
typedef struct {
   union {
      struct {

         /* Source filename: cm_esr.csr, line: 100                         */
         /* Title: lockintr_en                                             */
         /* Description:                                                   */
         /**
          *    0: disable the lock interrupt. 1: enable the lock interrupt.
         */
         uint32_t lockintr_en : 1; /* bit 0; R/W; 0 */

         /* Source filename: cm_esr.csr, line: 107                         */
         /* Title: lossintr_en                                             */
         /* Description:                                                   */
         /**
          *    0: disable the loss interrupt. 1: enable the loss interrupt.
         */
         uint32_t lossintr_en : 1; /* bit 1; R/W; 0 */
         uint32_t : 2; /* bits 3 to 2 */

         /* Source filename: cm_esr.csr, line: 93                          */
         /* Title: enable                                                  */
         /* Description:                                                   */
         /**
          *    0: bypass the PLL by using the boot clock (low frequency). 1: 
          *    use the PLL1's output clock as clock
         */
         uint32_t enable : 1; /* bit 4; R/W; 0 */
         uint32_t : 27; /* bits 31 to 5 */
      } B;
      uint32_t R;
   } ;
} Clock_Manager_cm_pll1_ctrl_t;

/* Typedef for Register: Clock_Manager::cm_pll2_ctrl                       */
/* Source filename: cm_esr.csr, line: 135                                  */
/* Title: cm_pll2_ctrl                                                     */
typedef struct {
   union {
      struct {

         /* Source filename: cm_esr.csr, line: 145                         */
         /* Title: lockintr_en                                             */
         /* Description:                                                   */
         /**
          *    0: disable the lock interrupt. 1: enable the lock interrupt.
         */
         uint32_t lockintr_en : 1; /* bit 0; R/W; 0 */

         /* Source filename: cm_esr.csr, line: 152                         */
         /* Title: lossintr_en                                             */
         /* Description:                                                   */
         /**
          *    0: disable the loss interrupt. 1: enable the loss interrupt.
         */
         uint32_t lossintr_en : 1; /* bit 1; R/W; 0 */
         uint32_t : 2; /* bits 3 to 2 */

         /* Source filename: cm_esr.csr, line: 138                         */
         /* Title: enable                                                  */
         /* Description:                                                   */
         /**
          *    0: bypass the PLL by using the boot clock (low frequency). 1: 
          *    use the PLL2's output clock as clock
         */
         uint32_t enable : 1; /* bit 4; R/W; 0 */
         uint32_t : 27; /* bits 31 to 5 */
      } B;
      uint32_t R;
   } ;
} Clock_Manager_cm_pll2_ctrl_t;

/* Typedef for Register: Clock_Manager::cm_pll3_ctrl                       */
/* Source filename: cm_esr.csr, line: 180                                  */
/* Title: cm_pll3_ctrl                                                     */
typedef struct {
   union {
      struct {

         /* Source filename: cm_esr.csr, line: 190                         */
         /* Title: lockintr_en                                             */
         /* Description:                                                   */
         /**
          *    0: disable the lock interrupt. 1: enable the lock interrupt.
         */
         uint32_t lockintr_en : 1; /* bit 0; R/W; 0 */

         /* Source filename: cm_esr.csr, line: 197                         */
         /* Title: lossintr_en                                             */
         /* Description:                                                   */
         /**
          *    0: disable the loss interrupt. 1: enable the loss interrupt.
         */
         uint32_t lossintr_en : 1; /* bit 1; R/W; 0 */
         uint32_t : 2; /* bits 3 to 2 */

         /* Source filename: cm_esr.csr, line: 183                         */
         /* Title: enable                                                  */
         /* Description:                                                   */
         /**
          *    0: bypass the PLL by using the boot clock (low frequency). 1: 
          *    use the PLL3's output clock as clock
         */
         uint32_t enable : 1; /* bit 4; R/W; 0 */
         uint32_t : 27; /* bits 31 to 5 */
      } B;
      uint32_t R;
   } ;
} Clock_Manager_cm_pll3_ctrl_t;

/* Typedef for Register: Clock_Manager::cm_pll4_ctrl                       */
/* Source filename: cm_esr.csr, line: 225                                  */
/* Title: cm_pll4_ctrl                                                     */
typedef struct {
   union {
      struct {

         /* Source filename: cm_esr.csr, line: 235                         */
         /* Title: lockintr_en                                             */
         /* Description:                                                   */
         /**
          *    0: disable the lock interrupt. 1: enable the lock interrupt.
         */
         uint32_t lockintr_en : 1; /* bit 0; R/W; 0 */

         /* Source filename: cm_esr.csr, line: 242                         */
         /* Title: lossintr_en                                             */
         /* Description:                                                   */
         /**
          *    0: disable the loss interrupt. 1: enable the loss interrupt.
         */
         uint32_t lossintr_en : 1; /* bit 1; R/W; 0 */
         uint32_t : 2; /* bits 3 to 2 */

         /* Source filename: cm_esr.csr, line: 228                         */
         /* Title: enable                                                  */
         /* Description:                                                   */
         /**
          *    0: bypass the PLL by using the boot clock (low frequency). 1: 
          *    use the PLL4's output clock as clock
         */
         uint32_t enable : 1; /* bit 4; R/W; 0 */
         uint32_t : 27; /* bits 31 to 5 */
      } B;
      uint32_t R;
   } ;
} Clock_Manager_cm_pll4_ctrl_t;

/* Typedef for Register: Clock_Manager::cm_pll0_status                     */
/* Source filename: cm_esr.csr, line: 71                                   */
/* Title: cm_pll0_status                                                   */
typedef struct {
   union {
      struct {

         /* Source filename: cm_esr.csr, line: 74                          */
         /* Title: lock                                                    */
         /* Description:                                                   */
         /**
          *    0: PLL lock has not happened. 1: PLL lock has happened. Write 
          *    1 to clear.
         */
         uint32_t lock : 1; /* bit 0; R/W; 0 */

         /* Source filename: cm_esr.csr, line: 81                          */
         /* Title: loss                                                    */
         /* Description:                                                   */
         /**
          *    0: PLL loss (lock) has not happened. 1: PLL loss (lock) has 
          *    happened. Write 1 to clear.
         */
         uint32_t loss : 1; /* bit 1; R/W; 0 */
         uint32_t : 30; /* bits 31 to 2 */
      } B;
      uint32_t R;
   } ;
} Clock_Manager_cm_pll0_status_t;

/* Typedef for Register: Clock_Manager::cm_pll1_status                     */
/* Source filename: cm_esr.csr, line: 116                                  */
/* Title: cm_pll1_status                                                   */
typedef struct {
   union {
      struct {

         /* Source filename: cm_esr.csr, line: 119                         */
         /* Title: lock                                                    */
         /* Description:                                                   */
         /**
          *    0: PLL lock has not happened. 1: PLL lock has happened. Write 
          *    1 to clear.
         */
         uint32_t lock : 1; /* bit 0; R/W; 0 */

         /* Source filename: cm_esr.csr, line: 126                         */
         /* Title: loss                                                    */
         /* Description:                                                   */
         /**
          *    0: PLL loss (lock) has not happened. 1: PLL loss (lock) has 
          *    happened. Write 1 to clear.
         */
         uint32_t loss : 1; /* bit 1; R/W; 0 */
         uint32_t : 30; /* bits 31 to 2 */
      } B;
      uint32_t R;
   } ;
} Clock_Manager_cm_pll1_status_t;

/* Typedef for Register: Clock_Manager::cm_pll2_status                     */
/* Source filename: cm_esr.csr, line: 161                                  */
/* Title: cm_pll2_status                                                   */
typedef struct {
   union {
      struct {

         /* Source filename: cm_esr.csr, line: 164                         */
         /* Title: lock                                                    */
         /* Description:                                                   */
         /**
          *    0: PLL lock has not happened. 1: PLL lock has happened. Write 
          *    1 to clear.
         */
         uint32_t lock : 1; /* bit 0; R/W; 0 */

         /* Source filename: cm_esr.csr, line: 171                         */
         /* Title: loss                                                    */
         /* Description:                                                   */
         /**
          *    0: PLL loss (lock) has not happened. 1: PLL loss (lock) has 
          *    happened. Write 1 to clear.
         */
         uint32_t loss : 1; /* bit 1; R/W; 0 */
         uint32_t : 30; /* bits 31 to 2 */
      } B;
      uint32_t R;
   } ;
} Clock_Manager_cm_pll2_status_t;

/* Typedef for Register: Clock_Manager::cm_pll3_status                     */
/* Source filename: cm_esr.csr, line: 206                                  */
/* Title: cm_pll3_status                                                   */
typedef struct {
   union {
      struct {

         /* Source filename: cm_esr.csr, line: 209                         */
         /* Title: lock                                                    */
         /* Description:                                                   */
         /**
          *    0: PLL lock has not happened. 1: PLL lock has happened. Write 
          *    1 to clear.
         */
         uint32_t lock : 1; /* bit 0; R/W; 0 */

         /* Source filename: cm_esr.csr, line: 216                         */
         /* Title: loss                                                    */
         /* Description:                                                   */
         /**
          *    0: PLL loss (lock) has not happened. 1: PLL loss (lock) has 
          *    happened. Write 1 to clear.
         */
         uint32_t loss : 1; /* bit 1; R/W; 0 */
         uint32_t : 30; /* bits 31 to 2 */
      } B;
      uint32_t R;
   } ;
} Clock_Manager_cm_pll3_status_t;

/* Typedef for Register: Clock_Manager::cm_pll4_status                     */
/* Source filename: cm_esr.csr, line: 251                                  */
/* Title: cm_pll4_status                                                   */
typedef struct {
   union {
      struct {

         /* Source filename: cm_esr.csr, line: 254                         */
         /* Title: lock                                                    */
         /* Description:                                                   */
         /**
          *    0: PLL lock has not happened. 1: PLL lock has happened. Write 
          *    1 to clear.
         */
         uint32_t lock : 1; /* bit 0; R/W; 0 */

         /* Source filename: cm_esr.csr, line: 261                         */
         /* Title: loss                                                    */
         /* Description:                                                   */
         /**
          *    0: PLL loss (lock) has not happened. 1: PLL loss (lock) has 
          *    happened. Write 1 to clear.
         */
         uint32_t loss : 1; /* bit 1; R/W; 0 */
         uint32_t : 30; /* bits 31 to 2 */
      } B;
      uint32_t R;
   } ;
} Clock_Manager_cm_pll4_status_t;

/* Typedef for Register: Clock_Manager::cm_dvfs_ctrl                       */
/* Source filename: cm_esr.csr, line: 9                                    */
/* Title: cm_dvfs_ctrl                                                     */
typedef struct {
   union {
      struct {

         /* Source filename: cm_esr.csr, line: 12                          */
         /* Title: select                                                  */
         /* Description:                                                   */
         /**
          *    0: Select PLL2's output clock. 1: Select PLL3's output clock.
         */
         uint32_t select : 1; /* bit 0; R/W; 0 */
         uint32_t : 31; /* bits 31 to 1 */
      } B;
      uint32_t R;
   } ;
} Clock_Manager_cm_dvfs_ctrl_t;

/* Typedef for Register: Clock_Manager::cm_ios_ctrl                        */
/* Source filename: cm_esr.csr, line: 21                                   */
/* Title: cm_ios_ctrl                                                      */
typedef struct {
   union {
      struct {

         /* Source filename: cm_esr.csr, line: 24                          */
         /* Title: mission                                                 */
         /* Description:                                                   */
         /**
          *    0: Select the slow boot clock (external clock) as the ioshire 
          *    operation clock. 1: Use the PLL0's output clock as the mission
          *     clock. Caution: this is a critical clock related register. 
          *    Software shall write this register only after the PLL0's 
          *    output clock has been successfully locked. Writing this 
          *    register before properly setting up PLL0 can cause system 
          *    hang.
         */
         uint32_t mission : 1; /* bit 0; R/W; 0 */
         uint32_t : 31; /* bits 31 to 1 */
      } B;
      uint32_t R;
   } ;
} Clock_Manager_cm_ios_ctrl_t;

/* Typedef for Register: Clock_Manager::cm_max                             */
/* Source filename: cm_esr.csr, line: 33                                   */
/* Title: cm_max                                                           */
typedef struct {
   union {
      struct {

         /* Source filename: cm_esr.csr, line: 36                          */
         /* Title: pll_sel                                                 */
         /* Description:                                                   */
         /**
          *    0: bypass PLL. 1: use PLL's output as clkmux output.
         */
         uint32_t pll_sel : 1; /* bit 0; R/W; 0 */
         uint32_t : 31; /* bits 31 to 1 */
      } B;
      uint32_t R;
   } ;
} Clock_Manager_cm_max_t;

/* Typedef for Addressmap: Clock_Manager                                   */
/* Source filename: cm_esr.csr, line: 270                                  */
typedef struct {
   Clock_Manager_cm_pll0_ctrl_t cm_pll0_ctrl; /**< Offset 0x0 (R/W) */
   Clock_Manager_cm_pll1_ctrl_t cm_pll1_ctrl; /**< Offset 0x4 (R/W) */
   Clock_Manager_cm_pll2_ctrl_t cm_pll2_ctrl; /**< Offset 0x8 (R/W) */
   Clock_Manager_cm_pll3_ctrl_t cm_pll3_ctrl; /**< Offset 0xc (R/W) */
   Clock_Manager_cm_pll4_ctrl_t cm_pll4_ctrl; /**< Offset 0x10 (R/W) */
   uint8_t _pad0[0xc];
   Clock_Manager_cm_pll0_status_t cm_pll0_status; /**< Offset 0x20 (R/W) */
   Clock_Manager_cm_pll1_status_t cm_pll1_status; /**< Offset 0x24 (R/W) */
   Clock_Manager_cm_pll2_status_t cm_pll2_status; /**< Offset 0x28 (R/W) */
   Clock_Manager_cm_pll3_status_t cm_pll3_status; /**< Offset 0x2c (R/W) */
   Clock_Manager_cm_pll4_status_t cm_pll4_status; /**< Offset 0x30 (R/W) */
   uint8_t _pad1[0xc];
   Clock_Manager_cm_dvfs_ctrl_t cm_dvfs_ctrl; /**< Offset 0x40 (R/W) */
   Clock_Manager_cm_ios_ctrl_t cm_ios_ctrl; /**< Offset 0x44 (R/W) */
   uint8_t _pad2[0xb8];
   Clock_Manager_cm_max_t cm_max; /**< Offset 0x100 (R/W) */
   uint8_t _pad3[0xefc];
} Clock_Manager_t;

#endif
