/*                                                                         */
/* Generated by Semifore, Inc. csrCompile                                  */
/*    Version: 2019.03.02 Build: release Linux 64-bit                      */
/*    C Header output                                                      */
/*                                                                         */
/* Command Line:                                                           */
/*    /home/cad/tools/semifore/csrCompile/LATEST/bin/x64_re6/csrCompile -v */
/*    -c                                                                   */
/*    /eng/ssmith/work/repos/soc_hal/dv/common/scripts/semifore_css/bitfield_enum_doc.css */
/*    -t h rm_esr.csr -o gen_sw/rm_esr                                     */
/*                                                                         */
/* Input files:                                                            */
/*    rm_esr.csr                                                           */
/*                                                                         */
/* Configuration files:                                                    */
/*    /eng/ssmith/work/repos/soc_hal/dv/common/scripts/semifore_css/bitfield_enum_doc.css */
/*                                                                         */
/* Generated on: Fri Sep 13 06:33:34 2019                                  */
/*           by: ssmith                                                    */
/*                                                                         */

#ifndef _RM_ESR_H_
#define _RM_ESR_H_


/* ####################################################################### */
/*        TYPE DEFINITIONS                                                 */
/* ####################################################################### */

/* Typedef for Register: Reset_Manager::rm_memshire_cold                   */
/* Source filename: rm_esr.csr, line: 238                                  */
/* Title: rm_memshire_cold                                                 */
typedef struct {
   union {
      struct {

         /* Source filename: rm_esr.csr, line: 241                         */
         /* Title: rstn                                                    */
         /* Description:                                                   */
         /**
          *    0: assert cold reset to all memshires; 1: deassert reset.
         */
         uint32_t rstn : 1; /* bit 0; R/W; 0 */
         uint32_t : 31; /* bits 31 to 1 */
      } B;
      uint32_t R;
   } ;
} Reset_Manager_rm_memshire_cold_t;

/* Typedef for Register: Reset_Manager::rm_memshire_warm                   */
/* Source filename: rm_esr.csr, line: 250                                  */
/* Title: rm_memshire_warm                                                 */
typedef struct {
   union {
      struct {

         /* Source filename: rm_esr.csr, line: 253                         */
         /* Title: rstn                                                    */
         /* Description:                                                   */
         /**
          *    0: assert warm reset to the corresponding memshire[i] ; 1: 
          *    deassert reset.
         */
         uint32_t rstn : 8; /* bits 7 to 0; R/W; 0 */
         uint32_t : 24; /* bits 31 to 8 */
      } B;
      uint32_t R;
   } ;
} Reset_Manager_rm_memshire_warm_t;

/* Typedef for Register: Reset_Manager::rm_pshire_cold                     */
/* Source filename: rm_esr.csr, line: 305                                  */
/* Title: rm_pshire_cold                                                   */
typedef struct {
   union {
      struct {

         /* Source filename: rm_esr.csr, line: 308                         */
         /* Title: rstn                                                    */
         /* Description:                                                   */
         /**
          *    0: assert cold reset to pshire; 1: deassert reset.
         */
         uint32_t rstn : 1; /* bit 0; R/W; 0 */
         uint32_t : 31; /* bits 31 to 1 */
      } B;
      uint32_t R;
   } ;
} Reset_Manager_rm_pshire_cold_t;

/* Typedef for Register: Reset_Manager::rm_pshire_warm                     */
/* Source filename: rm_esr.csr, line: 317                                  */
/* Title: rm_pshire_warm                                                   */
typedef struct {
   union {
      struct {

         /* Source filename: rm_esr.csr, line: 320                         */
         /* Title: rstn                                                    */
         /* Description:                                                   */
         /**
          *    0: assert warm reset to pshire; 1: deassert reset.
         */
         uint32_t rstn : 1; /* bit 0; R/W; 0 */

         /* Source filename: rm_esr.csr, line: 327                         */
         /* Title: rstn_debug                                              */
         /* Description:                                                   */
         /**
          *    0: assert pshire debug reset; 1: deassert debug reset.
         */
         uint32_t rstn_debug : 1; /* bit 1; R/W; 1 */
         uint32_t : 30; /* bits 31 to 2 */
      } B;
      uint32_t R;
   } ;
} Reset_Manager_rm_pshire_warm_t;

/* Typedef for Register: Reset_Manager::rm_max_cold                        */
/* Source filename: rm_esr.csr, line: 200                                  */
/* Title: rm_max_cold                                                      */
typedef struct {
   union {
      struct {

         /* Source filename: rm_esr.csr, line: 203                         */
         /* Title: rstn                                                    */
         /* Description:                                                   */
         /**
          *    0: assert cold reset to maxion; 1: deassert reset.
         */
         uint32_t rstn : 1; /* bit 0; R/W; 0 */
         uint32_t : 31; /* bits 31 to 1 */
      } B;
      uint32_t R;
   } ;
} Reset_Manager_rm_max_cold_t;

/* Typedef for Register: Reset_Manager::rm_max_warm                        */
/* Source filename: rm_esr.csr, line: 212                                  */
/* Title: rm_max_warm                                                      */
typedef struct {
   union {
      struct {

         /* Source filename: rm_esr.csr, line: 229                         */
         /* Title: uncore_rstn                                             */
         /* Description:                                                   */
         /**
          *    0: assert warm reset to maxion uncore portion (L2, coherent 
          *    hub, etc); 1: deassert reset.
         */
         uint32_t uncore_rstn : 1; /* bit 0; R/W; 0 */
         uint32_t : 3; /* bits 3 to 1 */

         /* Source filename: rm_esr.csr, line: 215                         */
         /* Title: core_rstn                                               */
         /* Description:                                                   */
         /**
          *    0: assert warm reset to maxion core[3:0], respectively; 1: 
          *    deassert reset.
         */
         uint32_t core_rstn : 4; /* bits 7 to 4; R/W; 0 */
         uint32_t : 4; /* bits 11 to 8 */

         /* Source filename: rm_esr.csr, line: 222                         */
         /* Title: debug_rstn                                              */
         /* Description:                                                   */
         /**
          *    0: assert warm reset to maxion DMI; 1: deassert reset.
         */
         uint32_t debug_rstn : 1; /* bit 12; R/W; 0 */
         uint32_t : 19; /* bits 31 to 13 */
      } B;
      uint32_t R;
   } ;
} Reset_Manager_rm_max_warm_t;

/* Typedef for Register: Reset_Manager::rm_minion                          */
/* Source filename: rm_esr.csr, line: 262                                  */
/* Title: rm_minion                                                        */
typedef struct {
   union {
      struct {

         /* Source filename: rm_esr.csr, line: 265                         */
         /* Title: cold_rstn                                               */
         /* Description:                                                   */
         /**
          *    0: assert cold reset to all minions; 1: deassert reset.
         */
         uint32_t cold_rstn : 1; /* bit 0; R/W; 0 */

         /* Source filename: rm_esr.csr, line: 272                         */
         /* Title: warm_rstn                                               */
         /* Description:                                                   */
         /**
          *    0: assert warm reset to all minions; 1: deassert reset.
         */
         uint32_t warm_rstn : 1; /* bit 1; R/W; 0 */
         uint32_t : 30; /* bits 31 to 2 */
      } B;
      uint32_t R;
   } ;
} Reset_Manager_rm_minion_t;

/* Typedef for Register: Reset_Manager::rm_minion_warm_a                   */
/* Source filename: rm_esr.csr, line: 281                                  */
/* Title: rm_minion_warm_a                                                 */
typedef struct {
   union {
      struct {

         /* Source filename: rm_esr.csr, line: 284                         */
         /* Title: rstn                                                    */
         /* Description:                                                   */
         /**
          *    0: assert warm reset to minion[31:0]; 1: deassert reset.
         */
         uint32_t rstn : 32; /* bits 31 to 0; R/W; 0 */
      } B;
      uint32_t R;
   } ;
} Reset_Manager_rm_minion_warm_a_t;

/* Typedef for Register: Reset_Manager::rm_minion_warm_b                   */
/* Source filename: rm_esr.csr, line: 293                                  */
/* Title: rm_minion_warm_b                                                 */
typedef struct {
   union {
      struct {

         /* Source filename: rm_esr.csr, line: 296                         */
         /* Title: rstn                                                    */
         /* Description:                                                   */
         /**
          *    0: assert warm reset to minion[33:32]; 1: deassert reset.
         */
         uint32_t rstn : 2; /* bits 1 to 0; R/W; 0 */
         uint32_t : 30; /* bits 31 to 2 */
      } B;
      uint32_t R;
   } ;
} Reset_Manager_rm_minion_warm_b_t;

/* Typedef for Register: Reset_Manager::rm_intr                            */
/* Source filename: rm_esr.csr, line: 54                                   */
/* Title: rm_intr                                                          */
typedef struct {
   union {
      struct {

         /* Source filename: rm_esr.csr, line: 57                          */
         /* Title: sp_plic                                                 */
         /* Description:                                                   */
         /**
          *    0: drive a 0 on the spio_plic interrupt wire; 1: drive a 1 on 
          *    the spio_plic interrupt wire.
         */
         uint32_t sp_plic : 1; /* bit 0; R/W; 0 */
         uint32_t : 31; /* bits 31 to 1 */
      } B;
      uint32_t R;
   } ;
} Reset_Manager_rm_intr_t;

/* Typedef for Register: Reset_Manager::rm_status                          */
/* Source filename: rm_esr.csr, line: 552                                  */
/* Title: rm_status                                                        */
typedef struct {
   union {
      struct {

         /* Source filename: rm_esr.csr, line: 562                         */
         /* Title: boot_finish                                             */
         /* Description:                                                   */
         /**
          *    boot_status_finish
         */
         uint32_t boot_finish : 1; /* bit 0; R/W; 0 */

         /* Source filename: rm_esr.csr, line: 555                         */
         /* Title: boot_error                                              */
         /* Description:                                                   */
         /**
          *    boot_status_error
         */
         uint32_t boot_error : 1; /* bit 1; R/W; 0 */

         /* Source filename: rm_esr.csr, line: 569                         */
         /* Title: boot_sp_hold_reset                                      */
         /* Description:                                                   */
         /**
          *    boot_status_sp_hold_reset;
         */
         uint32_t boot_sp_hold_reset : 1; /* bit 2; R/W; 0 */
         uint32_t : 5; /* bits 7 to 3 */

         /* Source filename: rm_esr.csr, line: 618                         */
         /* Title: vault_abort_ack                                         */
         /* Description:                                                   */
         /**
          *    1: indicate the vault acknowledges the abort_req, then it is 
          *    safe to apply vault soft reset.
         */
         uint32_t vault_abort_ack : 1; /* bit 8; R/W; 0 */
         uint32_t : 7; /* bits 15 to 9 */

         /* Source filename: rm_esr.csr, line: 576                         */
         /* Title: lockbox_bringup                                         */
         /* Description:                                                   */
         /**
          *    Reflect efuse one-time-sample value: 0: Production part, 1: 
          *    Bringup part.
         */
         uint32_t lockbox_bringup : 1; /* bit 16; R/W; 0 */

         /* Source filename: rm_esr.csr, line: 597                         */
         /* Title: lockbox_jtag_rot_enable                                 */
         /* Description:                                                   */
         /**
          *    Reflect efuse one-time-sample value: jtag_rot_enable
         */
         uint32_t lockbox_jtag_rot_enable : 1; /* bit 17; R/W; 0 */

         /* Source filename: rm_esr.csr, line: 590                         */
         /* Title: lockbox_jtag_dft_enable                                 */
         /* Description:                                                   */
         /**
          *    Reflect efust one-time-sample value: jtag_dft_enable
         */
         uint32_t lockbox_jtag_dft_enable : 1; /* bit 18; R/W; 0 */

         /* Source filename: rm_esr.csr, line: 583                         */
         /* Title: lockbox_debug_enable                                    */
         /* Description:                                                   */
         /**
          *    Reflect efuse one-time-sample value: debug enable
         */
         uint32_t lockbox_debug_enable : 1; /* bit 19; R/W; 0 */

         /* Source filename: rm_esr.csr, line: 604                         */
         /* Title: lockbox_maxion_nonsecure_access_enable                  */
         /* Description:                                                   */
         /**
          *    Reflect efuse one-time-sample value: 
          *    maxion_nonsecure_access_enable
         */
         uint32_t lockbox_maxion_nonsecure_access_enable : 1; /* bit 20; R/W; 0 */

         /* Source filename: rm_esr.csr, line: 611                         */
         /* Title: lockbox_minion_nonsecure_access_enable                  */
         /* Description:                                                   */
         /**
          *    Reflect efuse one-time-sample value: 
          *    minion_nonsecure_access_enable
         */
         uint32_t lockbox_minion_nonsecure_access_enable : 1; /* bit 21; R/W; 0 */
         uint32_t : 10; /* bits 31 to 22 */
      } B;
      uint32_t R;
   } ;
} Reset_Manager_rm_status_t;

/* Typedef for Register: Reset_Manager::rm_status2                         */
/* Source filename: rm_esr.csr, line: 627                                  */
/* Title: rm_status2                                                       */
typedef struct {
   union {
      struct {

         /* Source filename: rm_esr.csr, line: 714                         */
         /* Title: strap_in                                                */
         /* Description:                                                   */
         /**
          *    reflect the value on the strap_in[3:0].
         */
         uint32_t strap_in : 4; /* bits 3 to 0; R/W; 0 */

         /* Source filename: rm_esr.csr, line: 707                         */
         /* Title: skip_vault                                              */
         /* Description:                                                   */
         /**
          *    reflect the value on the boot pin: soc_boot_skip_vault which 
          *    skips vault bihr and/or udr_load
         */
         uint32_t skip_vault : 1; /* bit 4; R/W; 0 */

         /* Source filename: rm_esr.csr, line: 700                         */
         /* Title: skip_sms_udr                                            */
         /* Description:                                                   */
         /**
          *    reflect the value on the boot pin: soc_boot_skip_sms_udr.
         */
         uint32_t skip_sms_udr : 1; /* bit 5; R/W; 0 */

         /* Source filename: rm_esr.csr, line: 693                         */
         /* Title: skip_sms_bihr                                           */
         /* Description:                                                   */
         /**
          *    reflect the value on the boot pin: soc_boot_skip_sms_bihr.
         */
         uint32_t skip_sms_bihr : 1; /* bit 6; R/W; 0 */

         /* Source filename: rm_esr.csr, line: 686                         */
         /* Title: skip_bist                                               */
         /* Description:                                                   */
         /**
          *    reflect the value on the boot pin: soc_boot_skip_bist.
         */
         uint32_t skip_bist : 1; /* bit 7; R/W; 0 */

         /* Source filename: rm_esr.csr, line: 630                         */
         /* Title: debug_enable                                            */
         /* Description:                                                   */
         /**
          *    reflect the value on the boot pin: debug_enable.
         */
         uint32_t debug_enable : 1; /* bit 8; R/W; 0 */

         /* Source filename: rm_esr.csr, line: 637                         */
         /* Title: emergency_dbg                                           */
         /* Description:                                                   */
         /**
          *    reflect the value on the boot pin: emergency_dbg.
         */
         uint32_t emergency_dbg : 1; /* bit 9; R/W; 0 */
         uint32_t : 6; /* bits 15 to 10 */

         /* Source filename: rm_esr.csr, line: 679                         */
         /* Title: error_vaultsms_udr                                      */
         /* Description:                                                   */
         /**
          *    Boot status: Error on vaultsms UDR.
         */
         uint32_t error_vaultsms_udr : 1; /* bit 16; R/W; 0 */

         /* Source filename: rm_esr.csr, line: 665                         */
         /* Title: error_vaultsms_bihr                                     */
         /* Description:                                                   */
         /**
          *    Boot status: Error on vaultsms BIHR.
         */
         uint32_t error_vaultsms_bihr : 1; /* bit 17; R/W; 0 */

         /* Source filename: rm_esr.csr, line: 672                         */
         /* Title: error_vaultsms_bist                                     */
         /* Description:                                                   */
         /**
          *    Boot status: Error on vaultsms BIST.
         */
         uint32_t error_vaultsms_bist : 1; /* bit 18; R/W; 0 */

         /* Source filename: rm_esr.csr, line: 658                         */
         /* Title: error_sms_udr                                           */
         /* Description:                                                   */
         /**
          *    Boot status: Error on sms UDR.
         */
         uint32_t error_sms_udr : 1; /* bit 19; R/W; 0 */

         /* Source filename: rm_esr.csr, line: 644                         */
         /* Title: error_sms_bihr                                          */
         /* Description:                                                   */
         /**
          *    Boot status: Error on sms BIHR.
         */
         uint32_t error_sms_bihr : 1; /* bit 20; R/W; 0 */

         /* Source filename: rm_esr.csr, line: 651                         */
         /* Title: error_sms_bist                                          */
         /* Description:                                                   */
         /**
          *    Boot status: Error on sms BIST.
         */
         uint32_t error_sms_bist : 1; /* bit 21; R/W; 0 */
         uint32_t : 10; /* bits 31 to 22 */
      } B;
      uint32_t R;
   } ;
} Reset_Manager_rm_status2_t;

/* Typedef for Register: Reset_Manager::rm_ios_sp                          */
/* Source filename: rm_esr.csr, line: 138                                  */
/* Title: rm_ios_sp                                                        */
typedef struct {
   union {
      struct {

         /* Source filename: rm_esr.csr, line: 141                         */
         /* Title: rstn                                                    */
         /* Description:                                                   */
         /**
          *    0: assert active-low cold reset to service processor; 1: 
          *    deassert cold reset.
         */
         uint32_t rstn : 1; /* bit 0; R/W; 1 */
         uint32_t : 31; /* bits 31 to 1 */
      } B;
      uint32_t R;
   } ;
} Reset_Manager_rm_ios_sp_t;

/* Typedef for Register: Reset_Manager::rm_ios_vault                       */
/* Source filename: rm_esr.csr, line: 150                                  */
/* Title: rm_ios_vault                                                     */
typedef struct {
   union {
      struct {

         /* Source filename: rm_esr.csr, line: 160                         */
         /* Title: soft_rstn                                               */
         /* Description:                                                   */
         /**
          *    0: assert softreset to vault; 1: deassert reset.
         */
         uint32_t soft_rstn : 1; /* bit 0; R/W; 1 */

         /* Source filename: rm_esr.csr, line: 153                         */
         /* Title: abort_req                                               */
         /* Description:                                                   */
         /**
          *    0: deassert vault abort request; 1: assert vault abort 
          *    request.
         */
         uint32_t abort_req : 1; /* bit 1; R/W; 0 */
         uint32_t : 30; /* bits 31 to 2 */
      } B;
      uint32_t R;
   } ;
} Reset_Manager_rm_ios_vault_t;

/* Typedef for Register: Reset_Manager::rm_main_noc                        */
/* Source filename: rm_esr.csr, line: 169                                  */
/* Title: rm_main_noc                                                      */
typedef struct {
   union {
      struct {

         /* Source filename: rm_esr.csr, line: 172                         */
         /* Title: rstn                                                    */
         /* Description:                                                   */
         /**
          *    0: assert active-low reset to main NoC; 1: deassert reset.
         */
         uint32_t rstn : 1; /* bit 0; R/W; 1 */
         uint32_t : 31; /* bits 31 to 1 */
      } B;
      uint32_t R;
   } ;
} Reset_Manager_rm_main_noc_t;

/* Typedef for Register: Reset_Manager::rm_debug_noc                       */
/* Source filename: rm_esr.csr, line: 9                                    */
/* Title: rm_debug_noc                                                     */
typedef struct {
   union {
      struct {

         /* Source filename: rm_esr.csr, line: 12                          */
         /* Title: rstn                                                    */
         /* Description:                                                   */
         /**
          *    0: assert active-low reset to debug NoC; 1: deassert reset.
         */
         uint32_t rstn : 1; /* bit 0; R/W; 1 */
         uint32_t : 31; /* bits 31 to 1 */
      } B;
      uint32_t R;
   } ;
} Reset_Manager_rm_debug_noc_t;

/* Typedef for Register: Reset_Manager::rm_ios_pll0                        */
/* Source filename: rm_esr.csr, line: 78                                   */
/* Title: rm_ios_pll0                                                      */
typedef struct {
   union {
      struct {

         /* Source filename: rm_esr.csr, line: 81                          */
         /* Title: rstn                                                    */
         /* Description:                                                   */
         /**
          *    0: assert active-low reset to PLL0; 1: deassert reset.
         */
         uint32_t rstn : 1; /* bit 0; R/W; 1 */
         uint32_t : 31; /* bits 31 to 1 */
      } B;
      uint32_t R;
   } ;
} Reset_Manager_rm_ios_pll0_t;

/* Typedef for Register: Reset_Manager::rm_ios_pll1                        */
/* Source filename: rm_esr.csr, line: 90                                   */
/* Title: rm_ios_pll1                                                      */
typedef struct {
   union {
      struct {

         /* Source filename: rm_esr.csr, line: 93                          */
         /* Title: rstn                                                    */
         /* Description:                                                   */
         /**
          *    0: assert active-low reset to PLL1; 1: deassert reset.
         */
         uint32_t rstn : 1; /* bit 0; R/W; 1 */
         uint32_t : 31; /* bits 31 to 1 */
      } B;
      uint32_t R;
   } ;
} Reset_Manager_rm_ios_pll1_t;

/* Typedef for Register: Reset_Manager::rm_ios_pll2                        */
/* Source filename: rm_esr.csr, line: 102                                  */
/* Title: rm_ios_pll2                                                      */
typedef struct {
   union {
      struct {

         /* Source filename: rm_esr.csr, line: 105                         */
         /* Title: rstn                                                    */
         /* Description:                                                   */
         /**
          *    0: assert active-low reset to PLL2; 1: deassert reset.
         */
         uint32_t rstn : 1; /* bit 0; R/W; 1 */
         uint32_t : 31; /* bits 31 to 1 */
      } B;
      uint32_t R;
   } ;
} Reset_Manager_rm_ios_pll2_t;

/* Typedef for Register: Reset_Manager::rm_ios_pll3                        */
/* Source filename: rm_esr.csr, line: 114                                  */
/* Title: rm_ios_pll3                                                      */
typedef struct {
   union {
      struct {

         /* Source filename: rm_esr.csr, line: 117                         */
         /* Title: rstn                                                    */
         /* Description:                                                   */
         /**
          *    0: assert active-low reset to PLL3; 1: deassert reset.
         */
         uint32_t rstn : 1; /* bit 0; R/W; 1 */
         uint32_t : 31; /* bits 31 to 1 */
      } B;
      uint32_t R;
   } ;
} Reset_Manager_rm_ios_pll3_t;

/* Typedef for Register: Reset_Manager::rm_ios_pll4                        */
/* Source filename: rm_esr.csr, line: 126                                  */
/* Title: rm_ios_pll4                                                      */
typedef struct {
   union {
      struct {

         /* Source filename: rm_esr.csr, line: 129                         */
         /* Title: rstn                                                    */
         /* Description:                                                   */
         /**
          *    0: assert active-low reset to PLL4; 1: deassert reset.
         */
         uint32_t rstn : 1; /* bit 0; R/W; 1 */
         uint32_t : 31; /* bits 31 to 1 */
      } B;
      uint32_t R;
   } ;
} Reset_Manager_rm_ios_pll4_t;

/* Typedef for Register: Reset_Manager::rm_ios_periph                      */
/* Source filename: rm_esr.csr, line: 66                                   */
/* Title: rm_ios_periph                                                    */
typedef struct {
   union {
      struct {

         /* Source filename: rm_esr.csr, line: 69                          */
         /* Title: rstn                                                    */
         /* Description:                                                   */
         /**
          *    0: assert active-low reset to IOShire peripherals; 1: deassert
          *     reset.
         */
         uint32_t rstn : 1; /* bit 0; R/W; 1 */
         uint32_t : 31; /* bits 31 to 1 */
      } B;
      uint32_t R;
   } ;
} Reset_Manager_rm_ios_periph_t;

/* Typedef for Register: Reset_Manager::rm_max                             */
/* Source filename: rm_esr.csr, line: 181                                  */
/* Title: rm_max                                                           */
typedef struct {
   union {
      struct {

         /* Source filename: rm_esr.csr, line: 191                         */
         /* Title: pll_uncore_rstn                                         */
         /* Description:                                                   */
         /**
          *    0: assert active-low reset to maxion uncore PLL; 1: deassert 
          *    reset.
         */
         uint32_t pll_uncore_rstn : 1; /* bit 0; R/W; 0 */

         /* Source filename: rm_esr.csr, line: 184                         */
         /* Title: pll_core_rstn                                           */
         /* Description:                                                   */
         /**
          *    0: assert active-low reset to maxion core PLL; 1: deassert 
          *    reset.
         */
         uint32_t pll_core_rstn : 1; /* bit 1; R/W; 0 */
         uint32_t : 30; /* bits 31 to 2 */
      } B;
      uint32_t R;
   } ;
} Reset_Manager_rm_max_t;

/* Typedef for Register: Reset_Manager::rm_sys_reset_config                */
/* Source filename: rm_esr.csr, line: 723                                  */
/* Title: rm_sys_reset_config                                              */
typedef struct {
   union {
      struct {

         /* Source filename: rm_esr.csr, line: 733                         */
         /* Title: width                                                   */
         /* Description:                                                   */
         /**
          *    This configure the pulse width of the system reset 
          *    cru_sys_reset: 7'd0: assert 1-cycle active-high reset ; 
          *    7'd127(default): pulse width is 128 cycles
         */
         uint32_t width : 7; /* bits 6 to 0; R/W; 1 */
         uint32_t : 1; /* bit 7 */

         /* Source filename: rm_esr.csr, line: 726                         */
         /* Title: hw_perstn                                               */
         /* Description:                                                   */
         /**
          *    0: Software handles PERSTn in that the assertion and 
          *    deassertion of PERSTn will trigger an interrupt; 1: Hardware 
          *    handles PERSTn in that a PERSTn will trigger a system reboot 
          *    request on CRU_SYS_RESET.
         */
         uint32_t hw_perstn : 1; /* bit 8; R/W; 0 */
         uint32_t : 23; /* bits 31 to 9 */
      } B;
      uint32_t R;
   } ;
} Reset_Manager_rm_sys_reset_config_t;

/* Typedef for Register: Reset_Manager::rm_sys_reset_ctrl                  */
/* Source filename: rm_esr.csr, line: 742                                  */
/* Title: rm_sys_reset_ctrl                                                */
typedef struct {
   union {
      struct {

         /* Source filename: rm_esr.csr, line: 745                         */
         /* Title: enable                                                  */
         /* Description:                                                   */
         /**
          *    Write 1'b1 to generate a system reset cru_sys_reset.
         */
         uint32_t enable : 1; /* bit 0; R/W; 0 */
         uint32_t : 31; /* bits 31 to 1 */
      } B;
      uint32_t R;
   } ;
} Reset_Manager_rm_sys_reset_ctrl_t;

/* Typedef for Register: Reset_Manager::rm_usb2_0                          */
/* Source filename: rm_esr.csr, line: 754                                  */
/* Title: rm_usb2_0                                                        */
typedef struct {
   union {
      struct {

         /* Source filename: rm_esr.csr, line: 792                         */
         /* Title: phy_po_rstn                                             */
         /* Description:                                                   */
         /**
          *    0: assert reset to usb0 PHY power-on-reset; 1: deassert reset.
         */
         uint32_t phy_po_rstn : 1; /* bit 0; R/W; 0 */

         /* Source filename: rm_esr.csr, line: 799                         */
         /* Title: phy_port0_rstn                                          */
         /* Description:                                                   */
         /**
          *    0: assert reset to usb0 transmit and receive logic without 
          *    disabling the clocks within the PHY. 1: deassert reset.
         */
         uint32_t phy_port0_rstn : 1; /* bit 1; R/W; 0 */

         /* Source filename: rm_esr.csr, line: 771                         */
         /* Title: ctrl_phy_rstn                                           */
         /* Description:                                                   */
         /**
          *    0: assert reset to usb0 control logic. 1: deassert reset.
         */
         uint32_t ctrl_phy_rstn : 1; /* bit 2; R/W; 0 */

         /* Source filename: rm_esr.csr, line: 764                         */
         /* Title: ctrl_ahb_rstn                                           */
         /* Description:                                                   */
         /**
          *    0: assert reset to usb0 ahb interface. 1: deassert reset.
         */
         uint32_t ctrl_ahb_rstn : 1; /* bit 3; R/W; 0 */

         /* Source filename: rm_esr.csr, line: 785                         */
         /* Title: esr_rstn                                                */
         /* Description:                                                   */
         /**
          *    0: assert reset to usb0 ESR logic. 1: deassert reset.
         */
         uint32_t esr_rstn : 1; /* bit 4; R/W; 0 */

         /* Source filename: rm_esr.csr, line: 806                         */
         /* Title: reloc_rstn                                              */
         /* Description:                                                   */
         /**
          *    0: assert reset to usb0 reloc logic. 1: deassert reset.
         */
         uint32_t reloc_rstn : 1; /* bit 5; R/W; 0 */

         /* Source filename: rm_esr.csr, line: 757                         */
         /* Title: ahb2axi_rstn                                            */
         /* Description:                                                   */
         /**
          *    0: assert reset to usb0 axi2ahb logic. 1: deassert reset.
         */
         uint32_t ahb2axi_rstn : 1; /* bit 6; R/W; 0 */

         /* Source filename: rm_esr.csr, line: 778                         */
         /* Title: dbg_rstn                                                */
         /* Description:                                                   */
         /**
          *    0: assert reset to usb0 debug (ultrasoc) logic. 1: deassert 
          *    reset.
         */
         uint32_t dbg_rstn : 1; /* bit 7; R/W; 0 */
         uint32_t : 24; /* bits 31 to 8 */
      } B;
      uint32_t R;
   } ;
} Reset_Manager_rm_usb2_0_t;

/* Typedef for Register: Reset_Manager::rm_usb2_1                          */
/* Source filename: rm_esr.csr, line: 815                                  */
/* Title: rm_usb2_1                                                        */
typedef struct {
   union {
      struct {

         /* Source filename: rm_esr.csr, line: 846                         */
         /* Title: phy_po_rstn                                             */
         /* Description:                                                   */
         /**
          *    0: assert reset to usb1 PHY power-on-reset; 1: deassert reset.
         */
         uint32_t phy_po_rstn : 1; /* bit 0; R/W; 0 */

         /* Source filename: rm_esr.csr, line: 853                         */
         /* Title: phy_port0_rstn                                          */
         /* Description:                                                   */
         /**
          *    0: assert reset to usb1 transmit and receive logic without 
          *    disabling the clocks within the PHY. 1: deassert reset.
         */
         uint32_t phy_port0_rstn : 1; /* bit 1; R/W; 0 */

         /* Source filename: rm_esr.csr, line: 832                         */
         /* Title: ctrl_phy_rstn                                           */
         /* Description:                                                   */
         /**
          *    0: assert reset to usb1 control logic. 1: deassert reset.
         */
         uint32_t ctrl_phy_rstn : 1; /* bit 2; R/W; 0 */

         /* Source filename: rm_esr.csr, line: 825                         */
         /* Title: ctrl_ahb_rstn                                           */
         /* Description:                                                   */
         /**
          *    0: assert reset to usb1 ahb interface. 1: deassert reset.
         */
         uint32_t ctrl_ahb_rstn : 1; /* bit 3; R/W; 0 */

         /* Source filename: rm_esr.csr, line: 839                         */
         /* Title: esr_rstn                                                */
         /* Description:                                                   */
         /**
          *    0: assert reset to usb1 ESR logic. 1: deassert reset.
         */
         uint32_t esr_rstn : 1; /* bit 4; R/W; 0 */

         /* Source filename: rm_esr.csr, line: 860                         */
         /* Title: reloc_rstn                                              */
         /* Description:                                                   */
         /**
          *    0: assert reset to usb1 reloc logic. 1: deassert reset.
         */
         uint32_t reloc_rstn : 1; /* bit 5; R/W; 0 */

         /* Source filename: rm_esr.csr, line: 818                         */
         /* Title: ahb2axi_rstn                                            */
         /* Description:                                                   */
         /**
          *    0: assert reset to usb1 axi2ahb logic. 1: deassert reset.
         */
         uint32_t ahb2axi_rstn : 1; /* bit 6; R/W; 0 */
         uint32_t : 25; /* bits 31 to 7 */
      } B;
      uint32_t R;
   } ;
} Reset_Manager_rm_usb2_1_t;

/* Typedef for Register: Reset_Manager::rm_emmc                            */
/* Source filename: rm_esr.csr, line: 21                                   */
/* Title: rm_emmc                                                          */
typedef struct {
   union {
      struct {

         /* Source filename: rm_esr.csr, line: 31                          */
         /* Title: bclk_rstn                                               */
         /* Description:                                                   */
         /**
          *    0: assert reset to eMMC bclk domain; 1: deassert reset.
         */
         uint32_t bclk_rstn : 1; /* bit 0; R/W; 0 */

         /* Source filename: rm_esr.csr, line: 24                          */
         /* Title: aclk_rstn                                               */
         /* Description:                                                   */
         /**
          *    0: assert reset to eMMC aclk domain; 1: deassert reset.
         */
         uint32_t aclk_rstn : 1; /* bit 1; R/W; 0 */

         /* Source filename: rm_esr.csr, line: 45                          */
         /* Title: tclk_rstn                                               */
         /* Description:                                                   */
         /**
          *    0: assert reset to eMMC tmclk domain; 1: deassert reset.
         */
         uint32_t tclk_rstn : 1; /* bit 2; R/W; 0 */

         /* Source filename: rm_esr.csr, line: 38                          */
         /* Title: cclk_rstn                                               */
         /* Description:                                                   */
         /**
          *    0: assert reset to eMMC card clock domain cresetn_tx; 1: 
          *    deassert reset.
         */
         uint32_t cclk_rstn : 1; /* bit 3; R/W; 0 */
         uint32_t : 28; /* bits 31 to 4 */
      } B;
      uint32_t R;
   } ;
} Reset_Manager_rm_emmc_t;

/* Typedef for Register: Reset_Manager::rm_spio_i2c0                       */
/* Source filename: rm_esr.csr, line: 456                                  */
/* Title: rm_spio_i2c0                                                     */
typedef struct {
   union {
      struct {

         /* Source filename: rm_esr.csr, line: 459                         */
         /* Title: rstn                                                    */
         /* Description:                                                   */
         /**
          *    0: assert reset; 1: deassert reset.
         */
         uint32_t rstn : 1; /* bit 0; R/W; 1 */
         uint32_t : 31; /* bits 31 to 1 */
      } B;
      uint32_t R;
   } ;
} Reset_Manager_rm_spio_i2c0_t;

/* Typedef for Register: Reset_Manager::rm_spio_i2c1                       */
/* Source filename: rm_esr.csr, line: 468                                  */
/* Title: rm_spio_i2c1                                                     */
typedef struct {
   union {
      struct {

         /* Source filename: rm_esr.csr, line: 471                         */
         /* Title: rstn                                                    */
         /* Description:                                                   */
         /**
          *    0: assert reset; 1: deassert reset.
         */
         uint32_t rstn : 1; /* bit 0; R/W; 1 */
         uint32_t : 31; /* bits 31 to 1 */
      } B;
      uint32_t R;
   } ;
} Reset_Manager_rm_spio_i2c1_t;

/* Typedef for Register: Reset_Manager::rm_spio_dma                        */
/* Source filename: rm_esr.csr, line: 432                                  */
/* Title: rm_spio_dma                                                      */
typedef struct {
   union {
      struct {

         /* Source filename: rm_esr.csr, line: 435                         */
         /* Title: rstn                                                    */
         /* Description:                                                   */
         /**
          *    0: assert reset; 1: deassert reset.
         */
         uint32_t rstn : 1; /* bit 0; R/W; 1 */
         uint32_t : 31; /* bits 31 to 1 */
      } B;
      uint32_t R;
   } ;
} Reset_Manager_rm_spio_dma_t;

/* Typedef for Register: Reset_Manager::rm_spio_spi0                       */
/* Source filename: rm_esr.csr, line: 480                                  */
/* Title: rm_spio_spi0                                                     */
typedef struct {
   union {
      struct {

         /* Source filename: rm_esr.csr, line: 483                         */
         /* Title: rstn                                                    */
         /* Description:                                                   */
         /**
          *    0: assert reset; 1: deassert reset.
         */
         uint32_t rstn : 1; /* bit 0; R/W; 1 */
         uint32_t : 31; /* bits 31 to 1 */
      } B;
      uint32_t R;
   } ;
} Reset_Manager_rm_spio_spi0_t;

/* Typedef for Register: Reset_Manager::rm_spio_spi1                       */
/* Source filename: rm_esr.csr, line: 492                                  */
/* Title: rm_spio_spi1                                                     */
typedef struct {
   union {
      struct {

         /* Source filename: rm_esr.csr, line: 495                         */
         /* Title: rstn                                                    */
         /* Description:                                                   */
         /**
          *    0: assert reset; 1: deassert reset.
         */
         uint32_t rstn : 1; /* bit 0; R/W; 1 */
         uint32_t : 31; /* bits 31 to 1 */
      } B;
      uint32_t R;
   } ;
} Reset_Manager_rm_spio_spi1_t;

/* Typedef for Register: Reset_Manager::rm_spio_gpio                       */
/* Source filename: rm_esr.csr, line: 444                                  */
/* Title: rm_spio_gpio                                                     */
typedef struct {
   union {
      struct {

         /* Source filename: rm_esr.csr, line: 447                         */
         /* Title: rstn                                                    */
         /* Description:                                                   */
         /**
          *    0: assert reset; 1: deassert reset.
         */
         uint32_t rstn : 1; /* bit 0; R/W; 1 */
         uint32_t : 31; /* bits 31 to 1 */
      } B;
      uint32_t R;
   } ;
} Reset_Manager_rm_spio_gpio_t;

/* Typedef for Register: Reset_Manager::rm_spio_uart0                      */
/* Source filename: rm_esr.csr, line: 516                                  */
/* Title: rm_spio_uart0                                                    */
typedef struct {
   union {
      struct {

         /* Source filename: rm_esr.csr, line: 519                         */
         /* Title: rstn                                                    */
         /* Description:                                                   */
         /**
          *    0: assert reset; 1: deassert reset.
         */
         uint32_t rstn : 1; /* bit 0; R/W; 1 */
         uint32_t : 31; /* bits 31 to 1 */
      } B;
      uint32_t R;
   } ;
} Reset_Manager_rm_spio_uart0_t;

/* Typedef for Register: Reset_Manager::rm_spio_uart1                      */
/* Source filename: rm_esr.csr, line: 528                                  */
/* Title: rm_spio_uart1                                                    */
typedef struct {
   union {
      struct {

         /* Source filename: rm_esr.csr, line: 531                         */
         /* Title: rstn                                                    */
         /* Description:                                                   */
         /**
          *    0: assert reset; 1: deassert reset.
         */
         uint32_t rstn : 1; /* bit 0; R/W; 1 */
         uint32_t : 31; /* bits 31 to 1 */
      } B;
      uint32_t R;
   } ;
} Reset_Manager_rm_spio_uart1_t;

/* Typedef for Register: Reset_Manager::rm_spio_timers                     */
/* Source filename: rm_esr.csr, line: 504                                  */
/* Title: rm_spio_timers                                                   */
typedef struct {
   union {
      struct {

         /* Source filename: rm_esr.csr, line: 507                         */
         /* Title: rstn                                                    */
         /* Description:                                                   */
         /**
          *    Timer 0-7's soft reset control. 0: assert reset; 1: deassert 
          *    reset.
         */
         uint32_t rstn : 8; /* bits 7 to 0; R/W; 1 */
         uint32_t : 24; /* bits 31 to 8 */
      } B;
      uint32_t R;
   } ;
} Reset_Manager_rm_spio_timers_t;

/* Typedef for Register: Reset_Manager::rm_spio_wdt                        */
/* Source filename: rm_esr.csr, line: 540                                  */
/* Title: rm_spio_wdt                                                      */
typedef struct {
   union {
      struct {

         /* Source filename: rm_esr.csr, line: 543                         */
         /* Title: rstn                                                    */
         /* Description:                                                   */
         /**
          *    Soft reset control. 0: assert reset; 1: deassert reset.
         */
         uint32_t rstn : 1; /* bit 0; R/W; 1 */
         uint32_t : 31; /* bits 31 to 1 */
      } B;
      uint32_t R;
   } ;
} Reset_Manager_rm_spio_wdt_t;

/* Typedef for Register: Reset_Manager::rm_pu_gpio                         */
/* Source filename: rm_esr.csr, line: 336                                  */
/* Title: rm_pu_gpio                                                       */
typedef struct {
   union {
      struct {

         /* Source filename: rm_esr.csr, line: 339                         */
         /* Title: rstn                                                    */
         /* Description:                                                   */
         /**
          *    Soft reset control. 0: assert reset; 1: deassert reset.
         */
         uint32_t rstn : 1; /* bit 0; R/W; 1 */
         uint32_t : 31; /* bits 31 to 1 */
      } B;
      uint32_t R;
   } ;
} Reset_Manager_rm_pu_gpio_t;

/* Typedef for Register: Reset_Manager::rm_pu_wdt                          */
/* Source filename: rm_esr.csr, line: 420                                  */
/* Title: rm_pu_wdt                                                        */
typedef struct {
   union {
      struct {

         /* Source filename: rm_esr.csr, line: 423                         */
         /* Title: rstn                                                    */
         /* Description:                                                   */
         /**
          *    Soft reset control. 0: assert reset; 1: deassert reset.
         */
         uint32_t rstn : 1; /* bit 0; R/W; 1 */
         uint32_t : 31; /* bits 31 to 1 */
      } B;
      uint32_t R;
   } ;
} Reset_Manager_rm_pu_wdt_t;

/* Typedef for Register: Reset_Manager::rm_pu_timers                       */
/* Source filename: rm_esr.csr, line: 384                                  */
/* Title: rm_pu_timers                                                     */
typedef struct {
   union {
      struct {

         /* Source filename: rm_esr.csr, line: 387                         */
         /* Title: rstn                                                    */
         /* Description:                                                   */
         /**
          *    Timer 0-7's soft reset control. 0: assert reset; 1: deassert 
          *    reset.
         */
         uint32_t rstn : 8; /* bits 7 to 0; R/W; 1 */
         uint32_t : 24; /* bits 31 to 8 */
      } B;
      uint32_t R;
   } ;
} Reset_Manager_rm_pu_timers_t;

/* Typedef for Register: Reset_Manager::rm_pu_uart0                        */
/* Source filename: rm_esr.csr, line: 396                                  */
/* Title: rm_pu_uart0                                                      */
typedef struct {
   union {
      struct {

         /* Source filename: rm_esr.csr, line: 399                         */
         /* Title: rstn                                                    */
         /* Description:                                                   */
         /**
          *    Soft reset control. 0: assert reset; 1: deassert reset.
         */
         uint32_t rstn : 1; /* bit 0; R/W; 1 */
         uint32_t : 31; /* bits 31 to 1 */
      } B;
      uint32_t R;
   } ;
} Reset_Manager_rm_pu_uart0_t;

/* Typedef for Register: Reset_Manager::rm_pu_uart1                        */
/* Source filename: rm_esr.csr, line: 408                                  */
/* Title: rm_pu_uart1                                                      */
typedef struct {
   union {
      struct {

         /* Source filename: rm_esr.csr, line: 411                         */
         /* Title: rstn                                                    */
         /* Description:                                                   */
         /**
          *    Soft reset control. 0: assert reset; 1: deassert reset.
         */
         uint32_t rstn : 1; /* bit 0; R/W; 1 */
         uint32_t : 31; /* bits 31 to 1 */
      } B;
      uint32_t R;
   } ;
} Reset_Manager_rm_pu_uart1_t;

/* Typedef for Register: Reset_Manager::rm_pu_i2c                          */
/* Source filename: rm_esr.csr, line: 348                                  */
/* Title: rm_pu_i2c                                                        */
typedef struct {
   union {
      struct {

         /* Source filename: rm_esr.csr, line: 351                         */
         /* Title: rstn                                                    */
         /* Description:                                                   */
         /**
          *    Soft reset control. 0: assert reset; 1: deassert reset.
         */
         uint32_t rstn : 1; /* bit 0; R/W; 1 */
         uint32_t : 31; /* bits 31 to 1 */
      } B;
      uint32_t R;
   } ;
} Reset_Manager_rm_pu_i2c_t;

/* Typedef for Register: Reset_Manager::rm_pu_i3c                          */
/* Source filename: rm_esr.csr, line: 360                                  */
/* Title: rm_pu_i3c                                                        */
typedef struct {
   union {
      struct {

         /* Source filename: rm_esr.csr, line: 363                         */
         /* Title: rstn                                                    */
         /* Description:                                                   */
         /**
          *    Soft reset control. 0: assert reset; 1: deassert reset.
         */
         uint32_t rstn : 1; /* bit 0; R/W; 1 */
         uint32_t : 31; /* bits 31 to 1 */
      } B;
      uint32_t R;
   } ;
} Reset_Manager_rm_pu_i3c_t;

/* Typedef for Register: Reset_Manager::rm_pu_spi                          */
/* Source filename: rm_esr.csr, line: 372                                  */
/* Title: rm_pu_spi                                                        */
typedef struct {
   union {
      struct {

         /* Source filename: rm_esr.csr, line: 375                         */
         /* Title: rstn                                                    */
         /* Description:                                                   */
         /**
          *    Soft reset control. 0: assert reset; 1: deassert reset.
         */
         uint32_t rstn : 1; /* bit 0; R/W; 1 */
         uint32_t : 31; /* bits 31 to 1 */
      } B;
      uint32_t R;
   } ;
} Reset_Manager_rm_pu_spi_t;

/* Typedef for Addressmap: Reset_Manager                                   */
/* Source filename: rm_esr.csr, line: 869                                  */
typedef struct {
   uint8_t _pad0[0x200];
   Reset_Manager_rm_memshire_cold_t rm_memshire_cold; /**< Offset 0x200 (R/W) */
   Reset_Manager_rm_memshire_warm_t rm_memshire_warm; /**< Offset 0x204 (R/W) */
   Reset_Manager_rm_pshire_cold_t rm_pshire_cold; /**< Offset 0x208 (R/W) */
   Reset_Manager_rm_pshire_warm_t rm_pshire_warm; /**< Offset 0x20c (R/W) */
   Reset_Manager_rm_max_cold_t rm_max_cold; /**< Offset 0x210 (R/W) */
   Reset_Manager_rm_max_warm_t rm_max_warm; /**< Offset 0x214 (R/W) */
   uint8_t _pad1[0x28];
   Reset_Manager_rm_minion_t rm_minion; /**< Offset 0x240 (R/W) */
   Reset_Manager_rm_minion_warm_a_t rm_minion_warm_a; /**< Offset 0x244 (R/W) */
   Reset_Manager_rm_minion_warm_b_t rm_minion_warm_b; /**< Offset 0x248 (R/W) */
   Reset_Manager_rm_intr_t rm_intr; /**< Offset 0x24c (R/W) */
   Reset_Manager_rm_status_t rm_status; /**< Offset 0x250 (R/W) */
   Reset_Manager_rm_status2_t rm_status2; /**< Offset 0x254 (R/W) */
   uint8_t _pad2[0xa8];
   Reset_Manager_rm_ios_sp_t rm_ios_sp; /**< Offset 0x300 (R/W) */
   Reset_Manager_rm_ios_vault_t rm_ios_vault; /**< Offset 0x304 (R/W) */
   Reset_Manager_rm_main_noc_t rm_main_noc; /**< Offset 0x308 (R/W) */
   Reset_Manager_rm_debug_noc_t rm_debug_noc; /**< Offset 0x30c (R/W) */
   Reset_Manager_rm_ios_pll0_t rm_ios_pll0; /**< Offset 0x310 (R/W) */
   Reset_Manager_rm_ios_pll1_t rm_ios_pll1; /**< Offset 0x314 (R/W) */
   Reset_Manager_rm_ios_pll2_t rm_ios_pll2; /**< Offset 0x318 (R/W) */
   Reset_Manager_rm_ios_pll3_t rm_ios_pll3; /**< Offset 0x31c (R/W) */
   Reset_Manager_rm_ios_pll4_t rm_ios_pll4; /**< Offset 0x320 (R/W) */
   Reset_Manager_rm_ios_periph_t rm_ios_periph; /**< Offset 0x324 (R/W) */
   Reset_Manager_rm_max_t rm_max; /**< Offset 0x328 (R/W) */
   Reset_Manager_rm_sys_reset_config_t rm_sys_reset_config; /**< Offset 0x32c (R/W) */
   Reset_Manager_rm_sys_reset_ctrl_t rm_sys_reset_ctrl; /**< Offset 0x330 (R/W) */
   uint8_t _pad3[0xcc];
   Reset_Manager_rm_usb2_0_t rm_usb2_0; /**< Offset 0x400 (R/W) */
   Reset_Manager_rm_usb2_1_t rm_usb2_1; /**< Offset 0x404 (R/W) */
   Reset_Manager_rm_emmc_t rm_emmc; /**< Offset 0x408 (R/W) */
   Reset_Manager_rm_spio_i2c0_t rm_spio_i2c0; /**< Offset 0x40c (R/W) */
   Reset_Manager_rm_spio_i2c1_t rm_spio_i2c1; /**< Offset 0x410 (R/W) */
   Reset_Manager_rm_spio_dma_t rm_spio_dma; /**< Offset 0x414 (R/W) */
   Reset_Manager_rm_spio_spi0_t rm_spio_spi0; /**< Offset 0x418 (R/W) */
   Reset_Manager_rm_spio_spi1_t rm_spio_spi1; /**< Offset 0x41c (R/W) */
   Reset_Manager_rm_spio_gpio_t rm_spio_gpio; /**< Offset 0x420 (R/W) */
   Reset_Manager_rm_spio_uart0_t rm_spio_uart0; /**< Offset 0x424 (R/W) */
   Reset_Manager_rm_spio_uart1_t rm_spio_uart1; /**< Offset 0x428 (R/W) */
   Reset_Manager_rm_spio_timers_t rm_spio_timers; /**< Offset 0x42c (R/W) */
   Reset_Manager_rm_spio_wdt_t rm_spio_wdt; /**< Offset 0x430 (R/W) */
   uint8_t _pad4[0xcc];
   Reset_Manager_rm_pu_gpio_t rm_pu_gpio; /**< Offset 0x500 (R/W) */
   Reset_Manager_rm_pu_wdt_t rm_pu_wdt; /**< Offset 0x504 (R/W) */
   Reset_Manager_rm_pu_timers_t rm_pu_timers; /**< Offset 0x508 (R/W) */
   Reset_Manager_rm_pu_uart0_t rm_pu_uart0; /**< Offset 0x50c (R/W) */
   Reset_Manager_rm_pu_uart1_t rm_pu_uart1; /**< Offset 0x510 (R/W) */
   Reset_Manager_rm_pu_i2c_t rm_pu_i2c; /**< Offset 0x514 (R/W) */
   Reset_Manager_rm_pu_i3c_t rm_pu_i3c; /**< Offset 0x518 (R/W) */
   Reset_Manager_rm_pu_spi_t rm_pu_spi; /**< Offset 0x51c (R/W) */
   uint8_t _pad5[0xae0];
} Reset_Manager_t;

#endif
