/*                                                                         */
/* Generated by Semifore, Inc. csrCompile                                  */
/*    Version: 2019.03.01 Build: release Linux 64-bit                      */
/*    C Header output                                                      */
/*                                                                         */
/* Command Line:                                                           */
/*    /home/cad/tools/semifore/csrCompile/LATEST/bin/x64_re6/csrCompile -v */
/*    -c                                                                   */
/*    /data/ssmith/work/repos/soc_hal/dv/common/scripts/semifore_css/bitfield_enum_doc.css */
/*    -t h spio_gpio.csr -o gen_sw/spio_gpio                               */
/*                                                                         */
/* Input files:                                                            */
/*    spio_gpio.csr                                                        */
/*                                                                         */
/* Configuration files:                                                    */
/*    /data/ssmith/work/repos/soc_hal/dv/common/scripts/semifore_css/bitfield_enum_doc.css */
/*                                                                         */
/* Generated on: Tue May 21 15:35:19 2019                                  */
/*           by: ssmith                                                    */
/*                                                                         */

#ifndef _SPIO_GPIO_H_
#define _SPIO_GPIO_H_


/* ####################################################################### */
/*        ENUM DEFINITIONS                                                 */
/* ####################################################################### */

/* Enum : spio_gpio::GPIO_CONFIG_REG1::ADD_ENCODED_PARAMS::ADD_ENCODED_PARAMS */
/* Source filename: spio_gpio.csr, line: 724                               */
typedef enum _spio_gpio_GPIO_CONFIG_REG1_ADD_ENCODED_PARAMS_ADD_ENCODED_PARAMS {
   SPIO_GPIO_GPIO_CONFIG_REG1_ADD_ENCODED_PARAMS_ADD_ENCODED_PARAMS_DISABLED = 0x0,
   SPIO_GPIO_GPIO_CONFIG_REG1_ADD_ENCODED_PARAMS_ADD_ENCODED_PARAMS_ENABLED = 0x1
} Spio_gpio_GPIO_CONFIG_REG1_ADD_ENCODED_PARAMS_ADD_ENCODED_PARAMS;

/* Enum : spio_gpio::GPIO_CONFIG_REG1::APB_DATA_WIDTH::APB_DATA_WIDTH      */
/* Source filename: spio_gpio.csr, line: 475                               */
typedef enum _spio_gpio_GPIO_CONFIG_REG1_APB_DATA_WIDTH_APB_DATA_WIDTH {
   SPIO_GPIO_GPIO_CONFIG_REG1_APB_DATA_WIDTH_APB_DATA_WIDTH_APB_16BITS = 0x1,
   SPIO_GPIO_GPIO_CONFIG_REG1_APB_DATA_WIDTH_APB_DATA_WIDTH_APB_32BITS = 0x2,
   SPIO_GPIO_GPIO_CONFIG_REG1_APB_DATA_WIDTH_APB_DATA_WIDTH_APB_8BITS = 0x0
} Spio_gpio_GPIO_CONFIG_REG1_APB_DATA_WIDTH_APB_DATA_WIDTH;

/* Enum : spio_gpio::GPIO_CONFIG_REG1::DEBOUNCE::DEBOUNCE                  */
/* Source filename: spio_gpio.csr, line: 705                               */
typedef enum _spio_gpio_GPIO_CONFIG_REG1_DEBOUNCE_DEBOUNCE {
   SPIO_GPIO_GPIO_CONFIG_REG1_DEBOUNCE_DEBOUNCE_DISABLED = 0x0,
   SPIO_GPIO_GPIO_CONFIG_REG1_DEBOUNCE_DEBOUNCE_ENABLED = 0x1
} Spio_gpio_GPIO_CONFIG_REG1_DEBOUNCE_DEBOUNCE;

/* Enum : spio_gpio::GPIO_CONFIG_REG1::GPIO_ID::GPIO_ID                    */
/* Source filename: spio_gpio.csr, line: 743                               */
typedef enum _spio_gpio_GPIO_CONFIG_REG1_GPIO_ID_GPIO_ID {
   SPIO_GPIO_GPIO_CONFIG_REG1_GPIO_ID_GPIO_ID_DISABLED = 0x0,
   SPIO_GPIO_GPIO_CONFIG_REG1_GPIO_ID_GPIO_ID_ENABLED = 0x1
} Spio_gpio_GPIO_CONFIG_REG1_GPIO_ID_GPIO_ID;

/* Enum : spio_gpio::GPIO_CONFIG_REG1::HW_PORTA::HW_PORTA                  */
/* Source filename: spio_gpio.csr, line: 601                               */
typedef enum _spio_gpio_GPIO_CONFIG_REG1_HW_PORTA_HW_PORTA {
   SPIO_GPIO_GPIO_CONFIG_REG1_HW_PORTA_HW_PORTA_DISABLED = 0x0,
   SPIO_GPIO_GPIO_CONFIG_REG1_HW_PORTA_HW_PORTA_ENABLED = 0x1
} Spio_gpio_GPIO_CONFIG_REG1_HW_PORTA_HW_PORTA;

/* Enum : spio_gpio::GPIO_CONFIG_REG1::HW_PORTB::HW_PORTB                  */
/* Source filename: spio_gpio.csr, line: 622                               */
typedef enum _spio_gpio_GPIO_CONFIG_REG1_HW_PORTB_HW_PORTB {
   SPIO_GPIO_GPIO_CONFIG_REG1_HW_PORTB_HW_PORTB_DISABLED = 0x0,
   SPIO_GPIO_GPIO_CONFIG_REG1_HW_PORTB_HW_PORTB_ENABLED = 0x1
} Spio_gpio_GPIO_CONFIG_REG1_HW_PORTB_HW_PORTB;

/* Enum : spio_gpio::GPIO_CONFIG_REG1::HW_PORTC::HW_PORTC                  */
/* Source filename: spio_gpio.csr, line: 643                               */
typedef enum _spio_gpio_GPIO_CONFIG_REG1_HW_PORTC_HW_PORTC {
   SPIO_GPIO_GPIO_CONFIG_REG1_HW_PORTC_HW_PORTC_DISABLED = 0x0,
   SPIO_GPIO_GPIO_CONFIG_REG1_HW_PORTC_HW_PORTC_ENABLED = 0x1
} Spio_gpio_GPIO_CONFIG_REG1_HW_PORTC_HW_PORTC;

/* Enum : spio_gpio::GPIO_CONFIG_REG1::HW_PORTD::HW_PORTD                  */
/* Source filename: spio_gpio.csr, line: 664                               */
typedef enum _spio_gpio_GPIO_CONFIG_REG1_HW_PORTD_HW_PORTD {
   SPIO_GPIO_GPIO_CONFIG_REG1_HW_PORTD_HW_PORTD_DISABLED = 0x0,
   SPIO_GPIO_GPIO_CONFIG_REG1_HW_PORTD_HW_PORTD_ENABLED = 0x1
} Spio_gpio_GPIO_CONFIG_REG1_HW_PORTD_HW_PORTD;

/* Enum : spio_gpio::GPIO_CONFIG_REG1::INTERRUPT_BOTH_EDGE_TYPE::INTERRUPT_BOTH_EDGE_TYPE */
/* Source filename: spio_gpio.csr, line: 770                               */
typedef enum _spio_gpio_GPIO_CONFIG_REG1_INTERRUPT_BOTH_EDGE_TYPE_INTERRUPT_BOTH_EDGE_TYPE {
   SPIO_GPIO_GPIO_CONFIG_REG1_INTERRUPT_BOTH_EDGE_TYPE_INTERRUPT_BOTH_EDGE_TYPE_DISABLED = 0x0,
   SPIO_GPIO_GPIO_CONFIG_REG1_INTERRUPT_BOTH_EDGE_TYPE_INTERRUPT_BOTH_EDGE_TYPE_ENABLED = 0x1
} Spio_gpio_GPIO_CONFIG_REG1_INTERRUPT_BOTH_EDGE_TYPE_INTERRUPT_BOTH_EDGE_TYPE;

/* Enum : spio_gpio::GPIO_CONFIG_REG1::NUM_PORTS::NUM_PORTS                */
/* Source filename: spio_gpio.csr, line: 498                               */
typedef enum _spio_gpio_GPIO_CONFIG_REG1_NUM_PORTS_NUM_PORTS {
   SPIO_GPIO_GPIO_CONFIG_REG1_NUM_PORTS_NUM_PORTS_NUM_PORTS_1 = 0x0,
   SPIO_GPIO_GPIO_CONFIG_REG1_NUM_PORTS_NUM_PORTS_NUM_PORTS_2 = 0x1,
   SPIO_GPIO_GPIO_CONFIG_REG1_NUM_PORTS_NUM_PORTS_NUM_PORTS_3 = 0x2,
   SPIO_GPIO_GPIO_CONFIG_REG1_NUM_PORTS_NUM_PORTS_NUM_PORTS_4 = 0x3
} Spio_gpio_GPIO_CONFIG_REG1_NUM_PORTS_NUM_PORTS;

/* Enum : spio_gpio::GPIO_CONFIG_REG1::PORTA_INTR::PORTA_INTR              */
/* Source filename: spio_gpio.csr, line: 685                               */
typedef enum _spio_gpio_GPIO_CONFIG_REG1_PORTA_INTR_PORTA_INTR {
   SPIO_GPIO_GPIO_CONFIG_REG1_PORTA_INTR_PORTA_INTR_DISABLED = 0x0,
   SPIO_GPIO_GPIO_CONFIG_REG1_PORTA_INTR_PORTA_INTR_ENABLED = 0x1
} Spio_gpio_GPIO_CONFIG_REG1_PORTA_INTR_PORTA_INTR;

/* Enum : spio_gpio::GPIO_CONFIG_REG1::PORTA_SINGLE_CTL::PORTA_SINGLE_CTL  */
/* Source filename: spio_gpio.csr, line: 525                               */
typedef enum _spio_gpio_GPIO_CONFIG_REG1_PORTA_SINGLE_CTL_PORTA_SINGLE_CTL {
   SPIO_GPIO_GPIO_CONFIG_REG1_PORTA_SINGLE_CTL_PORTA_SINGLE_CTL_DISABLED = 0x0,
   SPIO_GPIO_GPIO_CONFIG_REG1_PORTA_SINGLE_CTL_PORTA_SINGLE_CTL_ENABLED = 0x1
} Spio_gpio_GPIO_CONFIG_REG1_PORTA_SINGLE_CTL_PORTA_SINGLE_CTL;

/* Enum : spio_gpio::GPIO_CONFIG_REG1::PORTB_SINGLE_CTL::PORTB_SINGLE_CTL  */
/* Source filename: spio_gpio.csr, line: 544                               */
typedef enum _spio_gpio_GPIO_CONFIG_REG1_PORTB_SINGLE_CTL_PORTB_SINGLE_CTL {
   SPIO_GPIO_GPIO_CONFIG_REG1_PORTB_SINGLE_CTL_PORTB_SINGLE_CTL_DISABLED = 0x0,
   SPIO_GPIO_GPIO_CONFIG_REG1_PORTB_SINGLE_CTL_PORTB_SINGLE_CTL_ENABLED = 0x1
} Spio_gpio_GPIO_CONFIG_REG1_PORTB_SINGLE_CTL_PORTB_SINGLE_CTL;

/* Enum : spio_gpio::GPIO_CONFIG_REG1::PORTC_SINGLE_CTL::PORTC_SINGLE_CTL  */
/* Source filename: spio_gpio.csr, line: 563                               */
typedef enum _spio_gpio_GPIO_CONFIG_REG1_PORTC_SINGLE_CTL_PORTC_SINGLE_CTL {
   SPIO_GPIO_GPIO_CONFIG_REG1_PORTC_SINGLE_CTL_PORTC_SINGLE_CTL_DISABLED = 0x0,
   SPIO_GPIO_GPIO_CONFIG_REG1_PORTC_SINGLE_CTL_PORTC_SINGLE_CTL_ENABLED = 0x1
} Spio_gpio_GPIO_CONFIG_REG1_PORTC_SINGLE_CTL_PORTC_SINGLE_CTL;

/* Enum : spio_gpio::GPIO_CONFIG_REG1::PORTD_SINGLE_CTL::PORTD_SINGLE_CTL  */
/* Source filename: spio_gpio.csr, line: 582                               */
typedef enum _spio_gpio_GPIO_CONFIG_REG1_PORTD_SINGLE_CTL_PORTD_SINGLE_CTL {
   SPIO_GPIO_GPIO_CONFIG_REG1_PORTD_SINGLE_CTL_PORTD_SINGLE_CTL_DISABLED = 0x0,
   SPIO_GPIO_GPIO_CONFIG_REG1_PORTD_SINGLE_CTL_PORTD_SINGLE_CTL_ENABLED = 0x1
} Spio_gpio_GPIO_CONFIG_REG1_PORTD_SINGLE_CTL_PORTD_SINGLE_CTL;

/* Enum : spio_gpio::GPIO_DEBOUNCE::GPIO_DEBOUNCE::GPIO_DEBOUNCE           */
/* Source filename: spio_gpio.csr, line: 283                               */
typedef enum _spio_gpio_GPIO_DEBOUNCE_GPIO_DEBOUNCE_GPIO_DEBOUNCE {
   SPIO_GPIO_GPIO_DEBOUNCE_GPIO_DEBOUNCE_GPIO_DEBOUNCE_DISABLED = 0x0,
   SPIO_GPIO_GPIO_DEBOUNCE_GPIO_DEBOUNCE_GPIO_DEBOUNCE_ENABLED = 0x1
} Spio_gpio_GPIO_DEBOUNCE_GPIO_DEBOUNCE_GPIO_DEBOUNCE;

/* Enum : spio_gpio::GPIO_INTEN::GPIO_INTEN::GPIO_INTEN                    */
/* Source filename: spio_gpio.csr, line: 95                                */
typedef enum _spio_gpio_GPIO_INTEN_GPIO_INTEN_GPIO_INTEN {
   SPIO_GPIO_GPIO_INTEN_GPIO_INTEN_GPIO_INTEN_DISABLED = 0x0,
   SPIO_GPIO_GPIO_INTEN_GPIO_INTEN_GPIO_INTEN_ENABLED = 0x1
} Spio_gpio_GPIO_INTEN_GPIO_INTEN_GPIO_INTEN;

/* Enum : spio_gpio::GPIO_INTMASK::GPIO_INTMASK::GPIO_INTMASK              */
/* Source filename: spio_gpio.csr, line: 130                               */
typedef enum _spio_gpio_GPIO_INTMASK_GPIO_INTMASK_GPIO_INTMASK {
   SPIO_GPIO_GPIO_INTMASK_GPIO_INTMASK_GPIO_INTMASK_DISABLED = 0x0,
   SPIO_GPIO_GPIO_INTMASK_GPIO_INTMASK_GPIO_INTMASK_ENABLED = 0x1
} Spio_gpio_GPIO_INTMASK_GPIO_INTMASK_GPIO_INTMASK;

/* Enum : spio_gpio::GPIO_INTSTATUS::GPIO_INTSTATUS::GPIO_INTSTATUS        */
/* Source filename: spio_gpio.csr, line: 223                               */
typedef enum _spio_gpio_GPIO_INTSTATUS_GPIO_INTSTATUS_GPIO_INTSTATUS {
   SPIO_GPIO_GPIO_INTSTATUS_GPIO_INTSTATUS_GPIO_INTSTATUS_ACTIVE = 0x1,
   SPIO_GPIO_GPIO_INTSTATUS_GPIO_INTSTATUS_GPIO_INTSTATUS_INACTIVE = 0x0
} Spio_gpio_GPIO_INTSTATUS_GPIO_INTSTATUS_GPIO_INTSTATUS;

/* Enum : spio_gpio::GPIO_INTTYPE_LEVEL::GPIO_INTTYPE_LEVEL::GPIO_INTTYPE_LEVEL */
/* Source filename: spio_gpio.csr, line: 161                               */
typedef enum _spio_gpio_GPIO_INTTYPE_LEVEL_GPIO_INTTYPE_LEVEL_GPIO_INTTYPE_LEVEL {
   SPIO_GPIO_GPIO_INTTYPE_LEVEL_GPIO_INTTYPE_LEVEL_GPIO_INTTYPE_LEVEL_EDGE_SENSITIVE = 0x1,
   SPIO_GPIO_GPIO_INTTYPE_LEVEL_GPIO_INTTYPE_LEVEL_GPIO_INTTYPE_LEVEL_LEVEL_SENSITIVE = 0x0
} Spio_gpio_GPIO_INTTYPE_LEVEL_GPIO_INTTYPE_LEVEL_GPIO_INTTYPE_LEVEL;

/* Enum : spio_gpio::GPIO_INT_POLARITY::GPIO_INT_POLARITY::GPIO_INT_POLARITY */
/* Source filename: spio_gpio.csr, line: 194                               */
typedef enum _spio_gpio_GPIO_INT_POLARITY_GPIO_INT_POLARITY_GPIO_INT_POLARITY {
   SPIO_GPIO_GPIO_INT_POLARITY_GPIO_INT_POLARITY_GPIO_INT_POLARITY_ACTIVE_HIGH = 0x1,
   SPIO_GPIO_GPIO_INT_POLARITY_GPIO_INT_POLARITY_GPIO_INT_POLARITY_ACTIVE_LOW = 0x0
} Spio_gpio_GPIO_INT_POLARITY_GPIO_INT_POLARITY_GPIO_INT_POLARITY;

/* Enum : spio_gpio::GPIO_LS_SYNC::GPIO_LS_SYNC::GPIO_LS_SYNC              */
/* Source filename: spio_gpio.csr, line: 357                               */
typedef enum _spio_gpio_GPIO_LS_SYNC_GPIO_LS_SYNC_GPIO_LS_SYNC {
   SPIO_GPIO_GPIO_LS_SYNC_GPIO_LS_SYNC_GPIO_LS_SYNC_DISABLED = 0x0,
   SPIO_GPIO_GPIO_LS_SYNC_GPIO_LS_SYNC_GPIO_LS_SYNC_ENABLED = 0x1
} Spio_gpio_GPIO_LS_SYNC_GPIO_LS_SYNC_GPIO_LS_SYNC;

/* Enum : spio_gpio::GPIO_PORTA_EOI::GPIO_PORTA_EOI::GPIO_PORTA_EOI        */
/* Source filename: spio_gpio.csr, line: 316                               */
typedef enum _spio_gpio_GPIO_PORTA_EOI_GPIO_PORTA_EOI_GPIO_PORTA_EOI {
   SPIO_GPIO_GPIO_PORTA_EOI_GPIO_PORTA_EOI_GPIO_PORTA_EOI_DISABLED = 0x0,
   SPIO_GPIO_GPIO_PORTA_EOI_GPIO_PORTA_EOI_GPIO_PORTA_EOI_ENABLED = 0x1
} Spio_gpio_GPIO_PORTA_EOI_GPIO_PORTA_EOI_GPIO_PORTA_EOI;

/* Enum : spio_gpio::GPIO_RAW_INTSTATUS::GPIO_RAW_INTSTATUS::GPIO_RAW_INTSTATUS */
/* Source filename: spio_gpio.csr, line: 251                               */
typedef enum _spio_gpio_GPIO_RAW_INTSTATUS_GPIO_RAW_INTSTATUS_GPIO_RAW_INTSTATUS {
   SPIO_GPIO_GPIO_RAW_INTSTATUS_GPIO_RAW_INTSTATUS_GPIO_RAW_INTSTATUS_ACTIVE = 0x1,
   SPIO_GPIO_GPIO_RAW_INTSTATUS_GPIO_RAW_INTSTATUS_GPIO_RAW_INTSTATUS_INACTIVE = 0x0
} Spio_gpio_GPIO_RAW_INTSTATUS_GPIO_RAW_INTSTATUS_GPIO_RAW_INTSTATUS;

/* Enum : spio_gpio::GPIO_SWPORTA_DDR::GPIO_SWPORTA_DDR::GPIO_SWPORTA_DDR  */
/* Source filename: spio_gpio.csr, line: 58                                */
typedef enum _spio_gpio_GPIO_SWPORTA_DDR_GPIO_SWPORTA_DDR_GPIO_SWPORTA_DDR {
   SPIO_GPIO_GPIO_SWPORTA_DDR_GPIO_SWPORTA_DDR_GPIO_SWPORTA_DDR_IN = 0x0,
   SPIO_GPIO_GPIO_SWPORTA_DDR_GPIO_SWPORTA_DDR_GPIO_SWPORTA_DDR_OUT = 0x1
} Spio_gpio_GPIO_SWPORTA_DDR_GPIO_SWPORTA_DDR_GPIO_SWPORTA_DDR;

/* ####################################################################### */
/*        TYPE DEFINITIONS                                                 */
/* ####################################################################### */

/* Typedef for Register: spio_gpio::GPIO_SWPORTA_DR                        */
/* Source filename: spio_gpio.csr, line: 23                                */
/* Title: Port A data register                                             */
/* Description:                                                            */
/**
 *    Port A data register
*/
typedef struct {
   union {
      struct {

         /* Source filename: spio_gpio.csr, line: 28                       */
         /* Description:                                                   */
         /**
          *    Values written to this register are output on the I/O signals
          *    for Port A if the corresponding data direction bits for Port A
          *    are set to Output mode and the corresponding control bit for
          *    Port A is set to Software mode. The value read back is equal
          *    to the last value written to this register.
         */
         uint32_t GPIO_SWPORTA_DR : 32; /* bits 31 to 0; R/W; 0x00000000 */
      } B;
      uint32_t R;
   } ;
} Spio_gpio_GPIO_SWPORTA_DR_t;

/* Typedef for Register: spio_gpio::GPIO_SWPORTA_DDR                       */
/* Source filename: spio_gpio.csr, line: 44                                */
/* Title: Port A Data Direction Register                                   */
/* Description:                                                            */
/**
 *    Port A Data Direction Register
*/
typedef struct {
   union {
      struct {

         /* Source filename: spio_gpio.csr, line: 49                       */
         /* Description:                                                   */
         /**
          *    Values written to this register independently control the
          *    direction of the corresponding data bit in Port A. The
          *    default direction can be configured as input or output after
          *    system reset through the GPIO_DFLT_DIR_A parameter.
         */
         uint32_t GPIO_SWPORTA_DDR : 32; /* bits 31 to 0; R/W; 0x00000000 */
      } B;
      uint32_t R;
   } ;
} Spio_gpio_GPIO_SWPORTA_DDR_t;

/* Typedef for Register: spio_gpio::GPIO_INTEN                             */
/* Source filename: spio_gpio.csr, line: 72                                */
/* Title: Interrupt enable register                                        */
/* Description:                                                            */
/**
 *    Interrupt enable register 
 *    Note:  This register is available only if Port A is configured to 
 *    generate interrupts (GPIO_PORTA_INTR = Include (1)).
*/
typedef struct {
   union {
      struct {

         /* Source filename: spio_gpio.csr, line: 80                       */
         /* Description:                                                   */
         /**
          *    Allows each bit of Port A to be configured for interrupts. By
          *    default the generation of interrupts is disabled. Whenever a 1
          *     is written to a bit of this register, it configures the
          *    corresponding bit on Port A to become an interrupt; otherwise,
          *     Port A operates as a normal GPIO signal.
          *    Interrupts are disabled on the corresponding bits of Port A if
          *     the corresponding data direction register is set to Output or
          *     if
          *    Port A mode is set to Hardware.
         */
         uint32_t GPIO_INTEN : 32; /* bits 31 to 0; R/W; 0x00000000 */
      } B;
      uint32_t R;
   } ;
} Spio_gpio_GPIO_INTEN_t;

/* Typedef for Register: spio_gpio::GPIO_INTMASK                           */
/* Source filename: spio_gpio.csr, line: 109                               */
/* Title: Interrupt mask register                                          */
/* Description:                                                            */
/**
 *    Interrupt mask register
 *    Note:  This register is available only if Port A is configured to 
 *    generate interrupts (GPIO_PORTA_INTR = Include (1)).
*/
typedef struct {
   union {
      struct {

         /* Source filename: spio_gpio.csr, line: 117                      */
         /* Description:                                                   */
         /**
          *    Controls whether an interrupt on Port A can create an
          *    interrupt for the interrupt controller by not masking it. By 
          *    default, all interrupts bits are unmasked. Whenever a 1 is
          *    written to a bit in this register, it masks the interrupt 
          *    generation capability for this signal; otherwise interrupts 
          *    are
          *    allowed through. The unmasked status can be read as well as 
          *    the resultant status after masking.
         */
         uint32_t GPIO_INTMASK : 32; /* bits 31 to 0; R/W; 0x00000000 */
      } B;
      uint32_t R;
   } ;
} Spio_gpio_GPIO_INTMASK_t;

/* Typedef for Register: spio_gpio::GPIO_INTTYPE_LEVEL                     */
/* Source filename: spio_gpio.csr, line: 144                               */
/* Title: Interrupt level                                                  */
/* Description:                                                            */
/**
 *    Interrupt level
 *    Note:  This register is available only if Port A is configured to 
 *    generate interrupts (GPIO_PORTA_INTR = Include (1)).
*/
typedef struct {
   union {
      struct {

         /* Source filename: spio_gpio.csr, line: 152                      */
         /* Description:                                                   */
         /**
          *    Controls the type of interrupt that can occur on Port A.
          *    Whenever a 0 is written to a bit of this register, it 
          *    configures the interrupt type to be level-sensitive; 
          *    otherwise, it is
          *    edge-sensitive.
         */
         uint32_t GPIO_INTTYPE_LEVEL : 32; /* bits 31 to 0; R/W; 0x00000000 */
      } B;
      uint32_t R;
   } ;
} Spio_gpio_GPIO_INTTYPE_LEVEL_t;

/* Typedef for Register: spio_gpio::GPIO_INT_POLARITY                      */
/* Source filename: spio_gpio.csr, line: 175                               */
/* Title: Interrupt polarity                                               */
/* Description:                                                            */
/**
 *    Interrupt polarity
 *    Note:  This register is available only if Port A is configured to 
 *    generate interrupts (GPIO_PORTA_INTR = Include (1)).
*/
typedef struct {
   union {
      struct {

         /* Source filename: spio_gpio.csr, line: 183                      */
         /* Description:                                                   */
         /**
          *    Controls the polarity of edge or level sensitivity that can
          *    occur on input of Port A. Whenever a 0 is written to a bit of 
          *    this register, it configures the interrupt type to 
          *    falling-edge or
          *    active-low sensitive; otherwise, it is rising-edge or 
          *    active-high sensitive.
         */
         uint32_t GPIO_INT_POLARITY : 32; /* bits 31 to 0; R/W; 0x00000000 */
      } B;
      uint32_t R;
   } ;
} Spio_gpio_GPIO_INT_POLARITY_t;

/* Typedef for Register: spio_gpio::GPIO_INTSTATUS                         */
/* Source filename: spio_gpio.csr, line: 208                               */
/* Title: Interrupt status                                                 */
/* Description:                                                            */
/**
 *    Interrupt status
 *    Note:  This register is available only if Port A is configured to 
 *    generate interrupts (GPIO_PORTA_INTR = Include (1)).
*/
typedef struct {
   union {
      struct {

         /* Source filename: spio_gpio.csr, line: 217                      */
         /* Description:                                                   */
         /**
          *    Interrupt status of Port A.
         */
         uint32_t GPIO_INTSTATUS : 32; /* bits 31 to 0; R; 0x00000000 */
      } B;
      uint32_t R;
   } ;
} Spio_gpio_GPIO_INTSTATUS_t;

/* Typedef for Register: spio_gpio::GPIO_RAW_INTSTATUS                     */
/* Source filename: spio_gpio.csr, line: 236                               */
/* Title: Raw interrupt status                                             */
/* Description:                                                            */
/**
 *    Raw interrupt status
 *    Note:  This register is available only if Port A is configured to 
 *    generate interrupts (GPIO_PORTA_INTR = Include (1)).
*/
typedef struct {
   union {
      struct {

         /* Source filename: spio_gpio.csr, line: 245                      */
         /* Description:                                                   */
         /**
          *    Raw interrupt of status of Port A (premasking bits)
         */
         uint32_t GPIO_RAW_INTSTATUS : 32; /* bits 31 to 0; R; 0x00000000 */
      } B;
      uint32_t R;
   } ;
} Spio_gpio_GPIO_RAW_INTSTATUS_t;

/* Typedef for Register: spio_gpio::GPIO_DEBOUNCE                          */
/* Source filename: spio_gpio.csr, line: 264                               */
/* Title: Debounce enable                                                  */
/* Description:                                                            */
/**
 *    Debounce enable
 *    Note: This register is available only if Port A is configured to 
 *    generate interrupts (GPIO_PORTA_INTR = Include (1)) and when the 
 *    debounce logic is included (GPIO_DEBOUNCE = Include (1)).
*/
typedef struct {
   union {
      struct {

         /* Source filename: spio_gpio.csr, line: 273                      */
         /* Description:                                                   */
         /**
          *    Controls whether an external signal that is the source
          *    of an interrupt needs to be debounced to remove any spurious 
          *    glitches. Writing a 1 to a bit in this register
          *    enables the debouncing circuitry. A signal must be valid for 
          *    two periods of an external clock before it is
          *    internally processed.
         */
         uint32_t GPIO_DEBOUNCE : 32; /* bits 31 to 0; R/W; 0x00000000 */
      } B;
      uint32_t R;
   } ;
} Spio_gpio_GPIO_DEBOUNCE_t;

/* Typedef for Register: spio_gpio::GPIO_PORTA_EOI                         */
/* Source filename: spio_gpio.csr, line: 297                               */
/* Title: Port A clear interrupt register                                  */
/* Description:                                                            */
/**
 *    Port A clear interrupt register
 *    Note: This register is available only if Port A is configured to 
 *    generate interrupts (GPIO_PORTA_INTR = Include (1)) and when the 
 *    debounce logic is included (GPIO_DEBOUNCE = Include (1)).
*/
typedef struct {
   union {
      struct {

         /* Source filename: spio_gpio.csr, line: 307                      */
         /* Description:                                                   */
         /**
          *    Controls the clearing of edge type interrupts from Port A.
          *    When a 1 is written into a corresponding bit of this register,
          *     the interrupt is cleared. All interrupts are cleared when
          *    Port A is not configured for interrupts.
         */
         uint32_t GPIO_PORTA_EOI : 32; /* bits 31 to 0; W; 0x00000000 */
      } B;
      uint32_t R;
   } ;
} Spio_gpio_GPIO_PORTA_EOI_t;

/* Typedef for Register: spio_gpio::GPIO_EXT_PORTA                         */
/* Source filename: spio_gpio.csr, line: 330                               */
/* Title: External port A register                                         */
/* Description:                                                            */
/**
 *    External port A register
*/
typedef struct {
   union {
      struct {

         /* Source filename: spio_gpio.csr, line: 336                      */
         /* Description:                                                   */
         /**
          *    This register always reflects the signals value on the 
          *    External Port A.
         */
         uint32_t GPIO_EXT_PORTA : 32; /* bits 31 to 0; R; 0x00000000 */
      } B;
      uint32_t R;
   } ;
} Spio_gpio_GPIO_EXT_PORTA_t;

/* Typedef for Register: spio_gpio::GPIO_LS_SYNC                           */
/* Source filename: spio_gpio.csr, line: 345                               */
/* Title: Synchronization level                                            */
/* Description:                                                            */
/**
 *    Synchronization level
*/
typedef struct {
   union {
      struct {

         /* Source filename: spio_gpio.csr, line: 350                      */
         /* Description:                                                   */
         /**
          *    Writing a 1 to this register results in all level-sensitive 
          *    interrupts being
          *    synchronized to pclk_intr.
         */
         uint32_t GPIO_LS_SYNC : 1; /* bit 0; R/W; 0x0 */

         /* Source filename: spio_gpio.csr, line: 370                      */
         /* Description:                                                   */
         /**
          *    RSVD_GPIO_LS_SYNC Reserved bits - read as zero
         */
         uint32_t RSVD_GPIO_LS_SYNC : 31; /* bits 31 to 1; R; 0x00000000 */
      } B;
      uint32_t R;
   } ;
} Spio_gpio_GPIO_LS_SYNC_t;

/* Typedef for Register: spio_gpio::GPIO_ID_CODE                           */
/* Source filename: spio_gpio.csr, line: 379                               */
/* Title: GPIO ID code                                                     */
/* Description:                                                            */
/**
 *    GPIO ID code
*/
typedef struct {
   union {
      struct {

         /* Source filename: spio_gpio.csr, line: 385                      */
         /* Description:                                                   */
         /**
          *    This is a user-specified code that a system can read. It can
          *    be used for chip identification, and so on.
         */
         uint32_t GPIO_ID_CODE : 32; /* bits 31 to 0; R; 0x00000000 */
      } B;
      uint32_t R;
   } ;
} Spio_gpio_GPIO_ID_CODE_t;

/* Typedef for Register: spio_gpio::GPIO_VER_ID_CODE                       */
/* Source filename: spio_gpio.csr, line: 395                               */
/* Title: GPIO Component Version                                           */
/* Description:                                                            */
/**
 *    GPIO Component Version
*/
typedef struct {
   union {
      struct {

         /* Source filename: spio_gpio.csr, line: 401                      */
         /* Description:                                                   */
         /**
          *    ASCII value for each number in the version, followed by *. For
          *     example
          *    32_31_32_2A represents the version 2.12*.
         */
         uint32_t GPIO_VER_ID_CODE : 32; /* bits 31 to 0; R; 0x3231332a */
      } B;
      uint32_t R;
   } ;
} Spio_gpio_GPIO_VER_ID_CODE_t;

/* Typedef for Register: spio_gpio::GPIO_CONFIG_REG2                       */
/* Source filename: spio_gpio.csr, line: 411                               */
/* Title: GPIO Configuration Register 2                                    */
/* Description:                                                            */
/**
 *    GPIO Configuration Register 2 
 *     This register is a read-only register that is present when the 
 *    configuration parameter GPIO_ADD_ENCODED_PARAMS is set to True. If this
 *     configuration is set to False, then this register reads back 0.
*/
typedef struct {
   union {
      struct {

         /* Source filename: spio_gpio.csr, line: 421                      */
         /* Description:                                                   */
         /**
          *    The value of this register is equal to GPIO_PWIDTH_A-1.
         */
         uint32_t ENCODED_ID_PWIDTH_A : 5; /* bits 4 to 0; R; 0x1f */

         /* Source filename: spio_gpio.csr, line: 428                      */
         /* Description:                                                   */
         /**
          *    The value of this register is equal to GPIO_PWIDTH_B-1.
         */
         uint32_t ENCODED_ID_PWIDTH_B : 5; /* bits 9 to 5; R; 0x07 */

         /* Source filename: spio_gpio.csr, line: 435                      */
         /* Description:                                                   */
         /**
          *    The value of this register is equal to GPIO_PWIDTH_C-1.
         */
         uint32_t ENCODED_ID_PWIDTH_C : 5; /* bits 14 to 10; R; 0x07 */

         /* Source filename: spio_gpio.csr, line: 442                      */
         /* Description:                                                   */
         /**
          *    The value of this register is equal to GPIO_PWIDTH_D-1.
         */
         uint32_t ENCODED_ID_PWIDTH_D : 5; /* bits 19 to 15; R; 0x07 */

         /* Source filename: spio_gpio.csr, line: 449                      */
         /* Description:                                                   */
         /**
          *    RSVD_GPIO_CONFIG_REG2 Reserved bits - read as zero
         */
         uint32_t RSVD_GPIO_CONFIG_REG2 : 12; /* bits 31 to 20; R; 0x000 */
      } B;
      uint32_t R;
   } ;
} Spio_gpio_GPIO_CONFIG_REG2_t;

/* Typedef for Register: spio_gpio::GPIO_CONFIG_REG1                       */
/* Source filename: spio_gpio.csr, line: 457                               */
/* Title: GPIO Configuration Register 1                                    */
/* Description:                                                            */
/**
 *    GPIO Configuration Register 1 
 *     This register is present when the configuration parameter 
 *    GPIO_ADD_ENCODED_PARAMS is set to True. If this parameter is set to 
 *    False, this register reads back zero (0).
*/
typedef struct {
   union {
      struct {

         /* Source filename: spio_gpio.csr, line: 466                      */
         /* Description:                                                   */
         /**
          *    The value of this register is derived from the
          *    GPIO_APB_DATA_WIDTH configuration parameter.
          *     Note: 
          *    0x3 = Reserved
         */
         uint32_t APB_DATA_WIDTH : 2; /* bits 1 to 0; R; 0x2 */

         /* Source filename: spio_gpio.csr, line: 491                      */
         /* Description:                                                   */
         /**
          *    The value of this register is derived from the
          *    GPIO_NUM_PORT configuration parameter.
         */
         uint32_t NUM_PORTS : 2; /* bits 3 to 2; R; 0x0 */

         /* Source filename: spio_gpio.csr, line: 518                      */
         /* Description:                                                   */
         /**
          *    The value of this register is derived from the
          *    GPIO_PORTA_SINGLE_CTL configuration parameter.
         */
         uint32_t PORTA_SINGLE_CTL : 1; /* bit 4; R; 0x1 */

         /* Source filename: spio_gpio.csr, line: 537                      */
         /* Description:                                                   */
         /**
          *    The value of this register is derived from the
          *    GPIO_PORTB_SINGLE_CTL configuration parameter.
         */
         uint32_t PORTB_SINGLE_CTL : 1; /* bit 5; R; 0x1 */

         /* Source filename: spio_gpio.csr, line: 556                      */
         /* Description:                                                   */
         /**
          *    The value of this register is derived from the
          *    GPIO_PORTC_SINGLE_CTL configuration parameter.
         */
         uint32_t PORTC_SINGLE_CTL : 1; /* bit 6; R; 0x1 */

         /* Source filename: spio_gpio.csr, line: 575                      */
         /* Description:                                                   */
         /**
          *    The value of this register is derived from the
          *    GPIO_PORTD_SINGLE_CTL configuration parameter.
         */
         uint32_t PORTD_SINGLE_CTL : 1; /* bit 7; R; 0x1 */

         /* Source filename: spio_gpio.csr, line: 594                      */
         /* Description:                                                   */
         /**
          *    The value of this register is derived from the
          *    GPIO_HW_PORTA configuration parameter.
         */
         uint32_t HW_PORTA : 1; /* bit 8; R; 0x0 */

         /* Source filename: spio_gpio.csr, line: 615                      */
         /* Description:                                                   */
         /**
          *    The value of this register is derived from the
          *    GPIO_HW_PORTB configuration parameter.
         */
         uint32_t HW_PORTB : 1; /* bit 9; R; 0x0 */

         /* Source filename: spio_gpio.csr, line: 636                      */
         /* Description:                                                   */
         /**
          *    The value of this register is derived from the
          *    GPIO_HW_PORTC configuration parameter.
         */
         uint32_t HW_PORTC : 1; /* bit 10; R; 0x0 */

         /* Source filename: spio_gpio.csr, line: 657                      */
         /* Description:                                                   */
         /**
          *    The value of this register is derived from the
          *    GPIO_HW_PORTD configuration parameter.
         */
         uint32_t HW_PORTD : 1; /* bit 11; R; 0x0 */

         /* Source filename: spio_gpio.csr, line: 678                      */
         /* Description:                                                   */
         /**
          *    The value of this register is derived from the
          *    GPIO_PORTA_INTR configuration parameter.
         */
         uint32_t PORTA_INTR : 1; /* bit 12; R; 0x1 */

         /* Source filename: spio_gpio.csr, line: 698                      */
         /* Description:                                                   */
         /**
          *    The value of this register is derived from the
          *    GPIO_DEBOUNCE configuration parameter.
         */
         uint32_t DEBOUNCE : 1; /* bit 13; R; 0x1 */

         /* Source filename: spio_gpio.csr, line: 717                      */
         /* Description:                                                   */
         /**
          *    The value of this register is derived from the
          *    GPIO_ADD_ENCODED_PARAMS configuration parameter.
         */
         uint32_t ADD_ENCODED_PARAMS : 1; /* bit 14; R; 0x1 */

         /* Source filename: spio_gpio.csr, line: 736                      */
         /* Description:                                                   */
         /**
          *    The value of this register is derived from the
          *    GPIO_ID configuration parameter.
         */
         uint32_t GPIO_ID : 1; /* bit 15; R; 0x1 */

         /* Source filename: spio_gpio.csr, line: 755                      */
         /* Description:                                                   */
         /**
          *    The value of this register is derived from the
          *    GPIO_ID_WIDTH configuration parameter.
         */
         uint32_t ENCODED_ID_WIDTH : 5; /* bits 20 to 16; R; 0x1f */

         /* Source filename: spio_gpio.csr, line: 763                      */
         /* Description:                                                   */
         /**
          *    The value of this register is derived from the 
          *    GPIO_INT_BOTH_EDGE configuration parameter
         */
         uint32_t INTERRUPT_BOTH_EDGE_TYPE : 1; /* bit 21; R; 0x0 */

         /* Source filename: spio_gpio.csr, line: 782                      */
         /* Description:                                                   */
         /**
          *    RSVD_GPIO_CONFIG_REG1 Reserved bits - read as zero
         */
         uint32_t RSVD_GPIO_CONFIG_REG1 : 10; /* bits 31 to 22; R; 0x000 */
      } B;
      uint32_t R;
   } ;
} Spio_gpio_GPIO_CONFIG_REG1_t;

/* Typedef for Addressmap: spio_gpio                                       */
/* Source filename: spio_gpio.csr, line: 790                               */
/* Description:                                                            */
/**
 *    DW_apb_gpio memory map
*/
typedef struct {
   Spio_gpio_GPIO_SWPORTA_DR_t GPIO_SWPORTA_DR; /**< Offset 0x0 (R/W) */
   Spio_gpio_GPIO_SWPORTA_DDR_t GPIO_SWPORTA_DDR; /**< Offset 0x4 (R/W) */
   uint8_t _pad0[0x28];
   Spio_gpio_GPIO_INTEN_t GPIO_INTEN; /**< Offset 0x30 (R/W) */
   Spio_gpio_GPIO_INTMASK_t GPIO_INTMASK; /**< Offset 0x34 (R/W) */
   Spio_gpio_GPIO_INTTYPE_LEVEL_t GPIO_INTTYPE_LEVEL; /**< Offset 0x38 (R/W) */
   Spio_gpio_GPIO_INT_POLARITY_t GPIO_INT_POLARITY; /**< Offset 0x3c (R/W) */
   Spio_gpio_GPIO_INTSTATUS_t GPIO_INTSTATUS; /**< Offset 0x40 (R) */
   Spio_gpio_GPIO_RAW_INTSTATUS_t GPIO_RAW_INTSTATUS; /**< Offset 0x44 (R) */
   Spio_gpio_GPIO_DEBOUNCE_t GPIO_DEBOUNCE; /**< Offset 0x48 (R/W) */
   Spio_gpio_GPIO_PORTA_EOI_t GPIO_PORTA_EOI; /**< Offset 0x4c (W) */
   Spio_gpio_GPIO_EXT_PORTA_t GPIO_EXT_PORTA; /**< Offset 0x50 (R) */
   uint8_t _pad1[0xc];
   Spio_gpio_GPIO_LS_SYNC_t GPIO_LS_SYNC; /**< Offset 0x60 (R/W) */
   Spio_gpio_GPIO_ID_CODE_t GPIO_ID_CODE; /**< Offset 0x64 (R) */
   uint8_t _pad2[0x4];
   Spio_gpio_GPIO_VER_ID_CODE_t GPIO_VER_ID_CODE; /**< Offset 0x6c (R) */
   Spio_gpio_GPIO_CONFIG_REG2_t GPIO_CONFIG_REG2; /**< Offset 0x70 (R) */
   Spio_gpio_GPIO_CONFIG_REG1_t GPIO_CONFIG_REG1; /**< Offset 0x74 (R) */
} Spio_gpio_t;

#endif
