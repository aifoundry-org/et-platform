/*                                                                         */
/* Generated by Semifore, Inc. csrCompile                                  */
/*    Version: 2019.03.01 Build: release Linux 64-bit                      */
/*    C Header output                                                      */
/*                                                                         */
/* Command Line:                                                           */
/*    /home/cad/tools/semifore/csrCompile/LATEST/bin/x64_re6/csrCompile -v */
/*    -c                                                                   */
/*    /eng/ssmith/work/repos/soc_hal/dv/common/scripts/semifore_css/bitfield_enum_doc.css */
/*    -t h pshire_esr.csr -o gen_sw/pshire_esr                             */
/*                                                                         */
/* Input files:                                                            */
/*    pshire_esr.csr                                                       */
/*                                                                         */
/* Configuration files:                                                    */
/*    /eng/ssmith/work/repos/soc_hal/dv/common/scripts/semifore_css/bitfield_enum_doc.css */
/*                                                                         */
/* Generated on: Sun Jun  9 06:33:26 2019                                  */
/*           by: ssmith                                                    */
/*                                                                         */

#ifndef _PSHIRE_ESR_H_
#define _PSHIRE_ESR_H_


/* ####################################################################### */
/*        TYPE DEFINITIONS                                                 */
/* ####################################################################### */

/* Typedef for Register: pshire::pshire_ctrl                               */
/* Source filename: pshire_esr.csr, line: 13                               */
/* Description:                                                            */
/**
 *    Control of Miscellaneous PShire functions
*/
typedef struct {
   union {
      struct {

         /* Source filename: pshire_esr.csr, line: 15                      */
         /* Title: pll0_byp                                                */
         /* Description:                                                   */
         /**
          *    1: PLL0 is bypassed.  Clkout = refclk
          *    0: PLL0  is NOT bypassed.  Clkout = 505 MHz
         */
         uint32_t pll0_byp : 1; /* bit 0; R/W; 1 */

         /* Source filename: pshire_esr.csr, line: 20                      */
         /* Description:                                                   */
         /**
          *    0: AXI Parity is odd
          *    1: AXI Parity is even
         */
         uint32_t axi_parity : 1; /* bit 1; R/W; 0 */

         /* Source filename: pshire_esr.csr, line: 24                      */
         /* Description:                                                   */
         /**
          *    0: AXI write data comes from {INT_AXI_HI_DATA, 
          *    INT_AXI_LO_DATA}
          *    1: AXI write data comes from INT_AXI_STAT (Not expected for 
          *    current Minion)
         */
         uint32_t axi_data_sel : 1; /* bit 2; R/W; 0 */
         uint32_t : 29; /* bits 31 to 3 */
      } B;
      uint32_t R;
   } ;
} Pshire_pshire_ctrl_t;

/* Typedef for Register: pshire::pshire_reset                              */
/* Source filename: pshire_esr.csr, line: 29                               */
/* Description:                                                            */
/**
 *    Resets with Pshire
*/
typedef struct {
   union {
      struct {

         /* Source filename: pshire_esr.csr, line: 31                      */
         /* Description:                                                   */
         /**
          *    Reset for PCIe SS + Controller + PHY
          *    0: Active, 1: Inactive
         */
         uint32_t pwr_up_rstn : 1; /* bit 0; R/W; 0 */
         uint32_t : 31; /* bits 31 to 1 */
      } B;
      uint32_t R;
   } ;
} Pshire_pshire_reset_t;

/* Typedef for Register: pshire::pshire_stat                               */
/* Source filename: pshire_esr.csr, line: 36                               */
/* Description:                                                            */
/**
 *    PShire Status Register
*/
typedef struct {
   union {
      struct {

         /* Source filename: pshire_esr.csr, line: 38                      */
         /* Description:                                                   */
         /**
          *    Status from PLL0 (nominal freq = 505 MHz)
         */
         uint32_t pll0_ok : 1; /* bit 0; R; 0 */

         /* Source filename: pshire_esr.csr, line: 43                      */
         /* Description:                                                   */
         /**
          *    PLL lock lost (sticky)
         */
         uint32_t pll_lock_lst : 1; /* bit 1; R; 0 */

         /* Source filename: pshire_esr.csr, line: 48                      */
         /* Description:                                                   */
         /**
          *    PCIe Subsystem mode:
          *    00: Controller 0 only, x8
          *    01: Controller 0 only, x4
          *    11: Controller 0 + 1 both in x4
         */
         uint32_t ss_mode : 2; /* bits 3 to 2; R; 0 */

         /* Source filename: pshire_esr.csr, line: 53                      */
         /* Description:                                                   */
         /**
          *    Controller 0 is in:
          *    0: EP mode
          *    1: RC mode
          *    Controller 1 is always in RC
         */
         uint32_t ep_rc0 : 1; /* bit 4; R; 0 */

         /* Source filename: pshire_esr.csr, line: 58                      */
         /* Description:                                                   */
         /**
          *    Status of PERST_N pin
         */
         uint32_t perst_n : 1; /* bit 5; R; 0 */

         /* Source filename: pshire_esr.csr, line: 63                      */
         /* Description:                                                   */
         /**
          *    Status of uncorrectable errors from PCIE1 and PCIE0
         */
         uint32_t pcie_unc_error : 2; /* bits 7 to 6; R; 0 */

         /* Source filename: pshire_esr.csr, line: 68                      */
         /* Description:                                                   */
         /**
          *    PCIE0's Wake
         */
         uint32_t pcie0_wake : 1; /* bit 8; R; 0 */
         uint32_t : 23; /* bits 31 to 9 */
      } B;
      uint32_t R;
   } ;
} Pshire_pshire_stat_t;

/* Typedef for Register: pshire::int_axi_low_addr                          */
/* Source filename: pshire_esr.csr, line: 74                               */
/* Description:                                                            */
/**
 *    Description: The address used when AXI write is generated to convey 
 *    interrupts enabled by |(INT_AXI_STAT & INT_AXI_EN).
*/
typedef struct {
   union {
      struct {

         /* Source filename: pshire_esr.csr, line: 76                      */
         /* Description:                                                   */
         /**
          *    Address[31:0] of AXI write to convey interrupts enabled by 
          *    |(INT_AXI_STAT & INT_AXI_EN)
         */
         uint32_t addr : 32; /* bits 31 to 0; R/W; 0 */
      } B;
      uint32_t R;
   } ;
} Pshire_int_axi_low_addr_t;

/* Typedef for Register: pshire::int_axi_hi_addr                           */
/* Source filename: pshire_esr.csr, line: 81                               */
/* Description:                                                            */
/**
 *    Description: The address used when AXI write is generated to convey 
 *    interrupts enabled by |(INT_AXI_STAT & INT_AXI_EN).
*/
typedef struct {
   union {
      struct {

         /* Source filename: pshire_esr.csr, line: 83                      */
         /* Description:                                                   */
         /**
          *    Address[39:32] of AXI write to convey interrupts enabled by 
          *    |(INT_AXI_STAT & INT_AXI_EN)
         */
         uint32_t addr : 8; /* bits 7 to 0; R/W; 0 */
         uint32_t : 24; /* bits 31 to 8 */
      } B;
      uint32_t R;
   } ;
} Pshire_int_axi_hi_addr_t;

/* Typedef for Register: pshire::int_axi_low_data                          */
/* Source filename: pshire_esr.csr, line: 88                               */
/* Description:                                                            */
/**
 *    The LSB data used when AXI write is generated to convey interrupts.
*/
typedef struct {
   union {
      struct {

         /* Source filename: pshire_esr.csr, line: 90                      */
         /* Description:                                                   */
         /**
          *    LSB data of AXI write to convey interrupts enabled by 
          *    |(INT_AXI_STAT & INT_AXI_EN)
         */
         uint32_t addr : 32; /* bits 31 to 0; R/W; 0 */
      } B;
      uint32_t R;
   } ;
} Pshire_int_axi_low_data_t;

/* Typedef for Register: pshire::int_axi_hi_data                           */
/* Source filename: pshire_esr.csr, line: 95                               */
/* Description:                                                            */
/**
 *    The MSB data used when AXI write is generated to convey interrupts.
*/
typedef struct {
   union {
      struct {

         /* Source filename: pshire_esr.csr, line: 97                      */
         /* Description:                                                   */
         /**
          *    MSB data of AXI write to convey interrupts enabled by 
          *    |(INT_AXI_STAT & INT_AXI_EN)
         */
         uint32_t addr : 32; /* bits 31 to 0; R/W; 0 */
      } B;
      uint32_t R;
   } ;
} Pshire_int_axi_hi_data_t;

/* Typedef for Register: pshire::int_axi_stat                              */
/* Source filename: pshire_esr.csr, line: 102                              */
/* Description:                                                            */
/**
 *    Description: Status of all potential interrupts that can generate an 
 *    AXI write.NOTE: only 1 AXI write will be generated even if multiple 
 *    bits in INT_AXI_STAT are set.Once AXI write has been generated, ALL 
 *    bits in INT_AXI_STAT must be cleared before another AXI writecan be 
 *    generated.  These are 1's catching, so any interrupts previously 
 *    asserted will be remembered until they are cleared.NOTE: clearing 
 *    INT_AXI_STAT won’t clear the underlying cause, so it’s important to
 *     clear them beforehand.
*/
typedef struct {
   union {
      struct {

         /* Source filename: pshire_esr.csr, line: 109                     */
         /* Description:                                                   */
         /**
          *    Status of edma_int
         */
         uint32_t edma_int : 8; /* bits 7 to 0; R/W1C; 0 */

         /* Source filename: pshire_esr.csr, line: 114                     */
         /* Description:                                                   */
         /**
          *    Status of DMA_RD_XFER_DONE count (0 -> 1) for each channel
         */
         uint32_t dma_rd_done : 4; /* bits 11 to 8; R/W1C; 0 */

         /* Source filename: pshire_esr.csr, line: 119                     */
         /* Description:                                                   */
         /**
          *    Status of DMA_WR_XFER_DONE count (0 -> 1) for each channel
         */
         uint32_t dma_wr_done : 4; /* bits 15 to 12; R/W1C; 0 */

         /* Source filename: pshire_esr.csr, line: 124                     */
         /* Description:                                                   */
         /**
          *    Status of msi_ctrl_int
         */
         uint32_t msi_ctrl_int : 1; /* bit 16; R/W1C; 0 */
         uint32_t : 15; /* bits 31 to 17 */
      } B;
      uint32_t R;
   } ;
} Pshire_int_axi_stat_t;

/* Typedef for Register: pshire::int_axi_en                                */
/* Source filename: pshire_esr.csr, line: 130                              */
/* Description:                                                            */
/**
 *    Description: Enable of interrupts bits in INT_AXI_STAT that can 
 *    generate an AXI write.  It doesn’t prevent the bits from being set in
 *     INT_AXI_STAT, just the generation of AXI write
*/
typedef struct {
   union {
      struct {

         /* Source filename: pshire_esr.csr, line: 133                     */
         /* Description:                                                   */
         /**
          *    1: Enable field to generate AXI write
          *    0: Disable field from generating AXI write
         */
         uint32_t edma_int : 8; /* bits 7 to 0; R/W; 0 */

         /* Source filename: pshire_esr.csr, line: 137                     */
         /* Description:                                                   */
         /**
          *    1: Enable field to generate AXI write
          *    0: Disable field from generating AXI write
         */
         uint32_t dma_rd_done : 4; /* bits 11 to 8; R/W; 0 */

         /* Source filename: pshire_esr.csr, line: 141                     */
         /* Description:                                                   */
         /**
          *    1: Enable field to generate AXI write
          *    0: Disable field from generating AXI write
         */
         uint32_t dma_wr_done : 4; /* bits 15 to 12; R/W; 0 */

         /* Source filename: pshire_esr.csr, line: 145                     */
         /* Description:                                                   */
         /**
          *    1: Enable field to generate AXI write
          *    0: Disable field from generating AXI write
         */
         uint32_t msi_ctrl_int : 1; /* bit 16; R/W; 0 */
         uint32_t : 15; /* bits 31 to 17 */
      } B;
      uint32_t R;
   } ;
} Pshire_int_axi_en_t;

/* Typedef for Register: pshire::int_axi_set                               */
/* Source filename: pshire_esr.csr, line: 150                              */
/* Description:                                                            */
/**
 *    Description: Sets INT_AXI_STAT for debug/test purpose.
*/
typedef struct {
   union {
      struct {

         /* Source filename: pshire_esr.csr, line: 153                     */
         /* Description:                                                   */
         /**
          *    1: Sets corresponding bit in INT_AXI_STAT
          *    0: No effect
         */
         uint32_t edma_int : 8; /* bits 7 to 0; W; 0 */

         /* Source filename: pshire_esr.csr, line: 158                     */
         /* Description:                                                   */
         /**
          *    1: Sets corresponding bit in INT_AXI_STAT
          *    0: No effect
         */
         uint32_t dma_rd_done : 4; /* bits 11 to 8; W; 0 */

         /* Source filename: pshire_esr.csr, line: 163                     */
         /* Description:                                                   */
         /**
          *    1: Sets corresponding bit in INT_AXI_STAT
          *    0: No effect
         */
         uint32_t dma_wr_done : 4; /* bits 15 to 12; W; 0 */

         /* Source filename: pshire_esr.csr, line: 168                     */
         /* Description:                                                   */
         /**
          *    1: Sets corresponding bit in INT_AXI_STAT
          *    0: No effect
         */
         uint32_t msi_ctrl_int : 1; /* bit 16; W; 0 */
         uint32_t : 15; /* bits 31 to 17 */
      } B;
      uint32_t R;
   } ;
} Pshire_int_axi_set_t;

/* Typedef for Register: pshire::msi_rx_vec                                */
/* Source filename: pshire_esr.csr, line: 174                              */
/* Description:                                                            */
/**
 *    MSI vector captured when MSI_RX_INT
*/
typedef struct {
   union {
      struct {

         /* Source filename: pshire_esr.csr, line: 176                     */
         /* Description:                                                   */
         /**
          *    Vector captured when msi_ctrl_int was asserted
         */
         uint32_t vector : 8; /* bits 7 to 0; R; 0 */
         uint32_t : 24; /* bits 31 to 8 */
      } B;
      uint32_t R;
   } ;
} Pshire_msi_rx_vec_t;

/* Typedef for Register: pshire::noc_int_stat                              */
/* Source filename: pshire_esr.csr, line: 183                              */
/* Description:                                                            */
/**
 *    Status of NOC Interrupts
*/
typedef struct {
   union {
      struct {

         /* Source filename: pshire_esr.csr, line: 185                     */
         /* Description:                                                   */
         /**
          *    int from meshtop main data NOC router[8:0]
         */
         uint32_t main_noc : 9; /* bits 8 to 0; R; 0 */

         /* Source filename: pshire_esr.csr, line: 191                     */
         /* Description:                                                   */
         /**
          *    int from meshtop main data NOC AXI Slave Bridge
         */
         uint32_t axi_slv : 1; /* bit 9; R; 0 */

         /* Source filename: pshire_esr.csr, line: 196                     */
         /* Description:                                                   */
         /**
          *    int from meshtop main data NOC AXI ToL3 Bridge
         */
         uint32_t axi_mstr_l3 : 1; /* bit 10; R; 0 */

         /* Source filename: pshire_esr.csr, line: 201                     */
         /* Description:                                                   */
         /**
          *    int from meshtop main data NOC AXI ToSys Bridge
         */
         uint32_t axi_mstr_sys : 1; /* bit 11; R; 0 */

         /* Source filename: pshire_esr.csr, line: 206                     */
         /* Description:                                                   */
         /**
          *    int from meshtop debug NOC router
         */
         uint32_t dbg_rtr : 1; /* bit 12; R; 0 */

         /* Source filename: pshire_esr.csr, line: 211                     */
         /* Description:                                                   */
         /**
          *    int from meshtop debug NOC bridge
         */
         uint32_t dbg_brdg : 1; /* bit 13; R; 0 */

         /* Source filename: pshire_esr.csr, line: 216                     */
         /* Description:                                                   */
         /**
          *    int from Pshire NOC Interrupt
         */
         uint32_t pshr_noc : 1; /* bit 14; R; 0 */
         uint32_t : 17; /* bits 31 to 15 */
      } B;
      uint32_t R;
   } ;
} Pshire_noc_int_stat_t;

/* Typedef for Addressmap: pshire                                          */
/* Source filename: pshire_esr.csr, line: 222                              */
typedef struct {
   Pshire_pshire_ctrl_t pshire_ctrl; /**< Offset 0x0 (R/W) */
   Pshire_pshire_reset_t pshire_reset; /**< Offset 0x4 (R/W) */
   Pshire_pshire_stat_t pshire_stat; /**< Offset 0x8 (R) */
   Pshire_int_axi_low_addr_t int_axi_low_addr; /**< Offset 0xc (R/W) */
   Pshire_int_axi_hi_addr_t int_axi_hi_addr; /**< Offset 0x10 (R/W) */
   Pshire_int_axi_low_data_t int_axi_low_data; /**< Offset 0x14 (R/W) */
   Pshire_int_axi_hi_data_t int_axi_hi_data; /**< Offset 0x18 (R/W) */
   Pshire_int_axi_stat_t int_axi_stat; /**< Offset 0x1c (R/W) */
   Pshire_int_axi_en_t int_axi_en; /**< Offset 0x20 (R/W) */
   Pshire_int_axi_set_t int_axi_set; /**< Offset 0x24 (W) */
   Pshire_msi_rx_vec_t msi_rx_vec; /**< Offset 0x28 (R) */
   Pshire_noc_int_stat_t noc_int_stat; /**< Offset 0x2c (R) */
   uint8_t _pad0[0x3d0];
} __attribute__ ((__packed__)) Pshire_t;

/* Typedef for Register: pshire_usr0::dma_rd_xfer                          */
/* Source filename: pshire_esr.csr, line: 228                              */
/* Description:                                                            */
/**
 *    Toggles each associated channel's app_rdxfer_go_togg, which will 
 *    initiate a read DMA transfer in LL mode with handshake.  A single write
 *     with value 1 in the corresponding field will cause the toggle.
*/
typedef struct {
   union {
      struct {

         /* Source filename: pshire_esr.csr, line: 230                     */
         /* Description:                                                   */
         /**
          *    Each bit correspond to associated channel's 
          *    app_rdxfer_go_togg.
          *    0: Inactive
          *    1: Generate toggle to app_rdxfer_go_togg
         */
         uint32_t chnl_go : 4; /* bits 3 to 0; W; 0 */
         uint32_t : 28; /* bits 31 to 4 */
      } B;
      uint32_t R;
   } ;
} Pshire_usr0_dma_rd_xfer_t;

/* Typedef for Register: pshire_usr0::dma_wr_xfer                          */
/* Source filename: pshire_esr.csr, line: 237                              */
/* Description:                                                            */
/**
 *    Toggles each associated channel's app_wdxfer_go_togg, which will 
 *    initiate a read DMA transfer in LL mode with handshake.  A single write
 *     with value 1 in the corresponding field will cause the toggle.
*/
typedef struct {
   union {
      struct {

         /* Source filename: pshire_esr.csr, line: 239                     */
         /* Description:                                                   */
         /**
          *    Each bit correspond to associated channel's 
          *    app_wdxfer_go_togg.
          *    0: Inactive
          *    1: Generate toggle to app_wdxfer_go_togg
         */
         uint32_t chnl_go : 4; /* bits 3 to 0; W; 0 */
         uint32_t : 28; /* bits 31 to 4 */
      } B;
      uint32_t R;
   } ;
} Pshire_usr0_dma_wr_xfer_t;

/* Typedef for Register: pshire_usr0::dma_rd_done                          */
/* Source filename: pshire_esr.csr, line: 245                              */
/* Description:                                                            */
/**
 *    Count that correspond to Channel 0's dma_rdxfer_done_togg
*/
typedef struct {
   union {
      struct {

         /* Source filename: pshire_esr.csr, line: 247                     */
         /* Description:                                                   */
         /**
          *    Count that corresponds to this channel's dma_rdxfer_done_togg
         */
         uint32_t chnl_rd_cnt : 5; /* bits 4 to 0; RC; 0 */
         uint32_t : 27; /* bits 31 to 5 */
      } B;
      uint32_t R;
   } ;
} Pshire_usr0_dma_rd_done_t;

/* Typedef for Register: pshire_usr0::dma_wr_done                          */
/* Source filename: pshire_esr.csr, line: 254                              */
/* Description:                                                            */
/**
 *    Count that correspond to Channel 0's dma_wdxfer_done_togg
*/
typedef struct {
   union {
      struct {

         /* Source filename: pshire_esr.csr, line: 256                     */
         /* Description:                                                   */
         /**
          *    Count that corresponds to this channel's dma_wdxfer_done_togg
         */
         uint32_t chnl_wr_cnt : 5; /* bits 4 to 0; RC; 0 */
         uint32_t : 27; /* bits 31 to 5 */
      } B;
      uint32_t R;
   } ;
} Pshire_usr0_dma_wr_done_t;

/* Typedef for Addressmap: pshire_usr0                                     */
/* Source filename: pshire_esr.csr, line: 264                              */
typedef struct {
   Pshire_usr0_dma_rd_xfer_t dma_rd_xfer; /**< Offset 0x0 (W) */
   Pshire_usr0_dma_wr_xfer_t dma_wr_xfer; /**< Offset 0x4 (W) */
   Pshire_usr0_dma_rd_done_t dma_rd_done[0x4]; /**< Offset 0x8 (R) */
   Pshire_usr0_dma_wr_done_t dma_wr_done[0x4]; /**< Offset 0x18 (R) */
   uint8_t _pad0[0x3d8];
} __attribute__ ((__packed__)) Pshire_usr0_t;

/* Typedef for Register: pshire_usr1::pslv_r_misc_info                     */
/* Source filename: pshire_esr.csr, line: 270                              */
/* Description:                                                            */
/**
 *    Sideband channel for PCIEe Channel N AXI Slave's Reads
*/
typedef struct {
   union {
      struct {

         /* Source filename: pshire_esr.csr, line: 272                     */
         /* Description:                                                   */
         /**
          *    Corresponds to slc_awmisc_info
         */
         uint32_t aw_misc_info : 22; /* bits 21 to 0; R/W; 0 */

         /* Source filename: pshire_esr.csr, line: 276                     */
         /* Description:                                                   */
         /**
          *    Corresponds to slc_awmisc_info_atu_bypass
         */
         uint32_t aw_atu_byp : 1; /* bit 22; R/W; 0 */

         /* Source filename: pshire_esr.csr, line: 280                     */
         /* Description:                                                   */
         /**
          *    Corresponds to slc_awmisc_info_tlpLn
         */
         uint32_t aw_tlp_ln : 1; /* bit 23; R/W; 0 */
         uint32_t : 8; /* bits 31 to 24 */
      } B;
      uint32_t R;
   } ;
} Pshire_usr1_pslv_r_misc_info_t;

/* Typedef for Register: pshire_usr1::pslv_w_misc_info                     */
/* Source filename: pshire_esr.csr, line: 285                              */
/* Description:                                                            */
/**
 *    Sideband channel for PCIEe Channel N AXI Slave's Writes
*/
typedef struct {
   union {
      struct {

         /* Source filename: pshire_esr.csr, line: 287                     */
         /* Description:                                                   */
         /**
          *    Corresponds to slc_awmisc_info
         */
         uint32_t aw_misc_info : 22; /* bits 21 to 0; R/W; 0 */

         /* Source filename: pshire_esr.csr, line: 291                     */
         /* Description:                                                   */
         /**
          *    Corresponds to slc_awmisc_info_atu_bypass
         */
         uint32_t aw_atu_byp : 1; /* bit 22; R/W; 0 */

         /* Source filename: pshire_esr.csr, line: 295                     */
         /* Description:                                                   */
         /**
          *    Corresponds to slc_awmisc_info_tlpLn
         */
         uint32_t aw_tlp_ln : 1; /* bit 23; R/W; 0 */
         uint32_t : 8; /* bits 31 to 24 */
      } B;
      uint32_t R;
   } ;
} Pshire_usr1_pslv_w_misc_info_t;

/* Typedef for Register: pshire_usr1::mstr_misc_info                       */
/* Source filename: pshire_esr.csr, line: 300                              */
/* Description:                                                            */
/**
 *    Sideband channel for PCIEe Channel N AXI Slave' Writes
*/
typedef struct {
   union {
      struct {

         /* Source filename: pshire_esr.csr, line: 302                     */
         /* Description:                                                   */
         /**
          *    Corresponds to mstr_bmisc_info_tlpln of PCIe 1/0
         */
         uint32_t b_tlp_ln : 2; /* bits 1 to 0; R/W; 0 */

         /* Source filename: pshire_esr.csr, line: 306                     */
         /* Description:                                                   */
         /**
          *    Corresponds to mstr_rmisc_info_tlpln of PCIe 1/0
         */
         uint32_t r_tlp_ln : 2; /* bits 3 to 2; R/W; 0 */
         uint32_t : 28; /* bits 31 to 4 */
      } B;
      uint32_t R;
   } ;
} Pshire_usr1_mstr_misc_info_t;

/* Typedef for Register: pshire_usr1::intx_en                              */
/* Source filename: pshire_esr.csr, line: 311                              */
/* Description:                                                            */
/**
 *    INTx emulation for PCIe 0
*/
typedef struct {
   union {
      struct {

         /* Source filename: pshire_esr.csr, line: 313                     */
         /* Description:                                                   */
         /**
          *    Corresponds to pcie0_sys_int of SS
         */
         uint32_t pcie_sys_int : 1; /* bit 0; R/W; 0 */
         uint32_t : 31; /* bits 31 to 1 */
      } B;
      uint32_t R;
   } ;
} Pshire_usr1_intx_en_t;

/* Typedef for Register: pshire_usr1::msi_tx_vec                           */
/* Source filename: pshire_esr.csr, line: 318                              */
/* Description:                                                            */
/**
 *    Tx MSI interrupts to PCIe SS
*/
typedef struct {
   union {
      struct {

         /* Source filename: pshire_esr.csr, line: 320                     */
         /* Description:                                                   */
         /**
          *    Corresponds to pcie0_msi_int of SS
         */
         uint32_t pcie_msi_int : 32; /* bits 31 to 0; R/W; 0 */
      } B;
      uint32_t R;
   } ;
} Pshire_usr1_msi_tx_vec_t;

/* Typedef for Addressmap: pshire_usr1                                     */
/* Source filename: pshire_esr.csr, line: 326                              */
typedef struct {
   Pshire_usr1_pslv_r_misc_info_t pslv_r_misc_info[0x2]; /**< Offset 0x0 (R/W) */
   Pshire_usr1_pslv_w_misc_info_t pslv_w_misc_info[0x2]; /**< Offset 0x8 (R/W) */
   Pshire_usr1_mstr_misc_info_t mstr_misc_info; /**< Offset 0x10 (R/W) */
   Pshire_usr1_intx_en_t intx_en; /**< Offset 0x14 (R/W) */
   Pshire_usr1_msi_tx_vec_t msi_tx_vec; /**< Offset 0x18 (R/W) */
   uint8_t _pad0[0x3e4];
} __attribute__ ((__packed__)) Pshire_usr1_t;

#endif
