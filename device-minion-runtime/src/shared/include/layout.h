#ifndef LAYOUT_H
#define LAYOUT_H

// aligns an address to the next 64-byte cache line
#define CACHE_LINE_ALIGN(x) (((x + 63U) / 64U) * 64U)

#define MASTER_SHIRE 32
#define NUM_SHIRES 33
#define HARTS_PER_SHIRE 64
#define NUM_HARTS (NUM_SHIRES * HARTS_PER_SHIRE)
#define MAX_SIMULTANEOUS_KERNELS 4

#define MESSAGE_FLAG_SIZE 8
#define MESSAGE_BUFFER_SIZE 64

// M-mode firmware and stacks placed in R_L3_Mcode region, 2MB 0x8000000000 - 0x8000200000
#define FW_MACHINE_MMODE_ENTRY  0x8000001000ULL // Default reset vector
#define FW_MMODE_STACK_BASE     0x8000200000ULL
#define FW_MMODE_STACK_SIZE     768 // Large enough for reentrant M-mode traps, but small enough so all 2112 stacks + code fit in 2MB region

// S-mode firmware and U-mode kernel placed in R_L3_DRAM region, 28GB 0x8100000000 - 0x8800000000
#define FW_WORKER_TO_MASTER_MESSAGE_FLAGS            0x8100000000ULL
#define FW_WORKER_TO_MASTER_MESSAGE_FLAGS_SIZE       (NUM_SHIRES * MESSAGE_FLAG_SIZE)

#define FW_WORKER_TO_MASTER_MESSAGE_BUFFERS          CACHE_LINE_ALIGN(FW_WORKER_TO_MASTER_MESSAGE_FLAGS + FW_WORKER_TO_MASTER_MESSAGE_FLAGS_SIZE)
#define FW_WORKER_TO_MASTER_MESSAGE_BUFFERS_SIZE     (NUM_HARTS * MESSAGE_BUFFER_SIZE)

#define FW_MASTER_TO_WORKER_MESSAGE_BUFFERS          CACHE_LINE_ALIGN(FW_WORKER_TO_MASTER_MESSAGE_BUFFERS + FW_WORKER_TO_MASTER_MESSAGE_BUFFERS_SIZE)
#define FW_MASTER_TO_WORKER_MESSAGE_BUFFERS_SIZE     (NUM_HARTS * MESSAGE_BUFFER_SIZE)

#define FW_MASTER_TO_WORKER_BROADCAST_MESSAGE_BUFFER CACHE_LINE_ALIGN(FW_MASTER_TO_WORKER_MESSAGE_BUFFERS + FW_MASTER_TO_WORKER_MESSAGE_BUFFERS_SIZE)
#define FW_MASTER_TO_WORKER_BROADCAST_MESSAGE_BUFFER_SIZE MESSAGE_BUFFER_SIZE

#define FW_MASTER_TO_WORKER_KERNEL_CONFIGS           CACHE_LINE_ALIGN(FW_MASTER_TO_WORKER_BROADCAST_MESSAGE_BUFFER + FW_MASTER_TO_WORKER_BROADCAST_MESSAGE_BUFFER_SIZE)

#define FW_MASTER_SMODE_ENTRY   0x8100200000ULL
#define FW_WORKER_SMODE_ENTRY   0x8100400000ULL

#define FW_SMODE_STACK_BASE     0x8102000000ULL
#define FW_SMODE_STACK_SIZE     4096 // 4K for VM stack pages

#define KERNEL_UMODE_STACK_BASE 0x8103000000ULL
#define KERNEL_UMODE_STACK_SIZE 4096 // 4K for VM stack pages

#define KERNEL_UMODE_ENTRY      0x8104000000ULL

//Storage for DMA configuration linked lists.
//Store at end of R_L3_DRAM region, 64MB at 0x87FC800000 - 0x87FFFFFFFF
//For each DMA channel, reserve 8MB for the list. Chosen arbitrarily to balance mem
//useage vs likely need. Each entry is 24 bytes, so 349525 entries max per list. If the
//host system is totally fragmented (each entry tracks 4kB - VERY unlkely), can DMA
//~1.4GB without modifying the list.
#define DMA_LL_SIZE 0x800000

#define DMA_CHAN_READ_0_LL_BASE 0x87FC000000
#define DMA_CHAN_READ_1_LL_BASE 0x87FC800000
#define DMA_CHAN_READ_2_LL_BASE 0x87FD000000
#define DMA_CHAN_READ_3_LL_BASE 0x87FD800000
#define DMA_CHAN_WRITE_0_LL_BASE 0x87FE000000
#define DMA_CHAN_WRITE_1_LL_BASE 0x87FE800000
#define DMA_CHAN_WRITE_2_LL_BASE 0x87FF000000
#define DMA_CHAN_WRITE_3_LL_BASE 0x87FF800000

#endif
