#ifndef __EC_DOMAIN_PARAMETERS_H__
#define __EC_DOMAIN_PARAMETERS_H__

#include <stdint.h>

/* Structures for the ECC curves. */
typedef struct ECC_DOMAIN_PARAMETERS {
    uint32_t CurveBits;
    const uint8_t * P_p;
    uint32_t PLen;
    const uint8_t * A_p;
    uint32_t ALen;
    const uint8_t * B_p;
    uint32_t BLen;
    const uint8_t * ECPointX_p;
    uint32_t ECPointXLen;
    const uint8_t * ECPointY_p;
    uint32_t ECPointYLen;
    const uint8_t * Order_p;
    uint32_t OrderLen;
    const uint8_t Cofactor;
} ECC_DOMAIN_PARAMETERS_t;

#ifdef SUPPORT_EC_P256
/* NIST P-256 curve (p = 2^224(2^32-1) + 2^192 + 2^96 - 1) */
static const uint8_t ECurve_NIST_P256_p[] =
{
    0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x01,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
};
static const uint8_t ECurve_NIST_P256_a[] =
{
    0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x01,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC
};
static const uint8_t ECurve_NIST_P256_b[] =
{
    0x5A, 0xC6, 0x35, 0xD8, 0xAA, 0x3A, 0x93, 0xE7,
    0xB3, 0xEB, 0xBD, 0x55, 0x76, 0x98, 0x86, 0xBC,
    0x65, 0x1D, 0x06, 0xB0, 0xCC, 0x53, 0xB0, 0xF6,
    0x3B, 0xCE, 0x3C, 0x3E, 0x27, 0xD2, 0x60, 0x4B
};
static const uint8_t ECurve_NIST_P256_Gx[] =
{
    0x6B, 0x17, 0xD1, 0xF2, 0xE1, 0x2C, 0x42, 0x47,
    0xF8, 0xBC, 0xE6, 0xE5, 0x63, 0xA4, 0x40, 0xF2,
    0x77, 0x03, 0x7D, 0x81, 0x2D, 0xEB, 0x33, 0xA0,
    0xF4, 0xA1, 0x39, 0x45, 0xD8, 0x98, 0xC2, 0x96
};
static const uint8_t ECurve_NIST_P256_Gy[] =
{
    0x4F, 0xE3, 0x42, 0xE2, 0xFE, 0x1A, 0x7F, 0x9B,
    0x8E, 0xE7, 0xEB, 0x4A, 0x7C, 0x0F, 0x9E, 0x16,
    0x2B, 0xCE, 0x33, 0x57, 0x6B, 0x31, 0x5E, 0xCE,
    0xCB, 0xB6, 0x40, 0x68, 0x37, 0xBF, 0x51, 0xF5
};
static const uint8_t ECurve_NIST_P256_n[] =
{
    0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xBC, 0xE6, 0xFA, 0xAD, 0xA7, 0x17, 0x9E, 0x84,
    0xF3, 0xB9, 0xCA, 0xC2, 0xFC, 0x63, 0x25, 0x51
};
static const ECC_DOMAIN_PARAMETERS_t ECurve_NIST_P256 =
{
    256,
    ECurve_NIST_P256_p,  sizeof(ECurve_NIST_P256_p),
    ECurve_NIST_P256_a,  sizeof(ECurve_NIST_P256_a),
    ECurve_NIST_P256_b,  sizeof(ECurve_NIST_P256_b),
    ECurve_NIST_P256_Gx, sizeof(ECurve_NIST_P256_Gx),
    ECurve_NIST_P256_Gy, sizeof(ECurve_NIST_P256_Gy),
    ECurve_NIST_P256_n,  sizeof(ECurve_NIST_P256_n),
    1
};
#endif

#ifdef SUPPORT_EC_P384
/* NIST P-384 curve (p = 2^384 - 2^128 - 2^96 + 2^32 - 1) */
static const uint8_t ECurve_NIST_P384_p[] =
{
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE,
    0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF
};
static const uint8_t ECurve_NIST_P384_a[] =
{
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE,
    0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFC
};
static const uint8_t ECurve_NIST_P384_b[] =
{
    0xB3, 0x31, 0x2F, 0xA7, 0xE2, 0x3E, 0xE7, 0xE4,
    0x98, 0x8E, 0x05, 0x6B, 0xE3, 0xF8, 0x2D, 0x19,
    0x18, 0x1D, 0x9C, 0x6E, 0xFE, 0x81, 0x41, 0x12,
    0x03, 0x14, 0x08, 0x8F, 0x50, 0x13, 0x87, 0x5A,
    0xC6, 0x56, 0x39, 0x8D, 0x8A, 0x2E, 0xD1, 0x9D,
    0x2A, 0x85, 0xC8, 0xED, 0xD3, 0xEC, 0x2A, 0xEF
};
static const uint8_t ECurve_NIST_P384_Gx[] =
{
    0xAA, 0x87, 0xCA, 0x22, 0xBE, 0x8B, 0x05, 0x37,
    0x8E, 0xB1, 0xC7, 0x1E, 0xF3, 0x20, 0xAD, 0x74,
    0x6E, 0x1D, 0x3B, 0x62, 0x8B, 0xA7, 0x9B, 0x98,
    0x59, 0xF7, 0x41, 0xE0, 0x82, 0x54, 0x2A, 0x38,
    0x55, 0x02, 0xF2, 0x5D, 0xBF, 0x55, 0x29, 0x6C,
    0x3A, 0x54, 0x5E, 0x38, 0x72, 0x76, 0x0A, 0xB7
};
static const uint8_t ECurve_NIST_P384_Gy[] =
{
    0x36, 0x17, 0xDE, 0x4A, 0x96, 0x26, 0x2C, 0x6F,
    0x5D, 0x9E, 0x98, 0xBF, 0x92, 0x92, 0xDC, 0x29,
    0xF8, 0xF4, 0x1D, 0xBD, 0x28, 0x9A, 0x14, 0x7C,
    0xE9, 0xDA, 0x31, 0x13, 0xB5, 0xF0, 0xB8, 0xC0,
    0x0A, 0x60, 0xB1, 0xCE, 0x1D, 0x7E, 0x81, 0x9D,
    0x7A, 0x43, 0x1D, 0x7C, 0x90, 0xEA, 0x0E, 0x5F
};
static const uint8_t ECurve_NIST_P384_n[] =
{
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xC7, 0x63, 0x4D, 0x81, 0xF4, 0x37, 0x2D, 0xDF,
    0x58, 0x1A, 0x0D, 0xB2, 0x48, 0xB0, 0xA7, 0x7A,
    0xEC, 0xEC, 0x19, 0x6A, 0xCC, 0xC5, 0x29, 0x73
};
static const ECC_DOMAIN_PARAMETERS_t ECurve_NIST_P384 =
{
    384,
    ECurve_NIST_P384_p,  sizeof(ECurve_NIST_P384_p),
    ECurve_NIST_P384_a,  sizeof(ECurve_NIST_P384_a),
    ECurve_NIST_P384_b,  sizeof(ECurve_NIST_P384_b),
    ECurve_NIST_P384_Gx, sizeof(ECurve_NIST_P384_Gx),
    ECurve_NIST_P384_Gy, sizeof(ECurve_NIST_P384_Gy),
    ECurve_NIST_P384_n,  sizeof(ECurve_NIST_P384_n),
    1
};
#endif

#ifdef SUPPORT_EC_P521
/* NIST P-521 curve (p = 2^521 - 1) */
static const uint8_t ECurve_NIST_P521_p[] =
{
    0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF
};
static const uint8_t ECurve_NIST_P521_a[] =
{
    0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFC
};
static const uint8_t ECurve_NIST_P521_b[] =
{
    0x00, 0x51, 0x95, 0x3E, 0xB9, 0x61, 0x8E, 0x1C,
    0x9A, 0x1F, 0x92, 0x9A, 0x21, 0xA0, 0xB6, 0x85,
    0x40, 0xEE, 0xA2, 0xDA, 0x72, 0x5B, 0x99, 0xB3,
    0x15, 0xF3, 0xB8, 0xB4, 0x89, 0x91, 0x8E, 0xF1,
    0x09, 0xE1, 0x56, 0x19, 0x39, 0x51, 0xEC, 0x7E,
    0x93, 0x7B, 0x16, 0x52, 0xC0, 0xBD, 0x3B, 0xB1,
    0xBF, 0x07, 0x35, 0x73, 0xDF, 0x88, 0x3D, 0x2C,
    0x34, 0xF1, 0xEF, 0x45, 0x1F, 0xD4, 0x6B, 0x50,
    0x3F, 0x00
};
static const uint8_t ECurve_NIST_P521_Gx[] =
{
    0x00, 0xC6, 0x85, 0x8E, 0x06, 0xB7, 0x04, 0x04,
    0xE9, 0xCD, 0x9E, 0x3E, 0xCB, 0x66, 0x23, 0x95,
    0xB4, 0x42, 0x9C, 0x64, 0x81, 0x39, 0x05, 0x3F,
    0xB5, 0x21, 0xF8, 0x28, 0xAF, 0x60, 0x6B, 0x4D,
    0x3D, 0xBA, 0xA1, 0x4B, 0x5E, 0x77, 0xEF, 0xE7,
    0x59, 0x28, 0xFE, 0x1D, 0xC1, 0x27, 0xA2, 0xFF,
    0xA8, 0xDE, 0x33, 0x48, 0xB3, 0xC1, 0x85, 0x6A,
    0x42, 0x9B, 0xF9, 0x7E, 0x7E, 0x31, 0xC2, 0xE5,
    0xBD, 0x66
};
static const uint8_t ECurve_NIST_P521_Gy[] =
{
    0x01, 0x18, 0x39, 0x29, 0x6A, 0x78, 0x9A, 0x3B,
    0xC0, 0x04, 0x5C, 0x8A, 0x5F, 0xB4, 0x2C, 0x7D,
    0x1B, 0xD9, 0x98, 0xF5, 0x44, 0x49, 0x57, 0x9B,
    0x44, 0x68, 0x17, 0xAF, 0xBD, 0x17, 0x27, 0x3E,
    0x66, 0x2C, 0x97, 0xEE, 0x72, 0x99, 0x5E, 0xF4,
    0x26, 0x40, 0xC5, 0x50, 0xB9, 0x01, 0x3F, 0xAD,
    0x07, 0x61, 0x35, 0x3C, 0x70, 0x86, 0xA2, 0x72,
    0xC2, 0x40, 0x88, 0xBE, 0x94, 0x76, 0x9F, 0xD1,
    0x66, 0x50
};
static const uint8_t ECurve_NIST_P521_n[] =
{
    0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFA, 0x51, 0x86, 0x87, 0x83, 0xBF, 0x2F,
    0x96, 0x6B, 0x7F, 0xCC, 0x01, 0x48, 0xF7, 0x09,
    0xA5, 0xD0, 0x3B, 0xB5, 0xC9, 0xB8, 0x89, 0x9C,
    0x47, 0xAE, 0xBB, 0x6F, 0xB7, 0x1E, 0x91, 0x38,
    0x64, 0x09
};
static const ECC_DOMAIN_PARAMETERS_t ECurve_NIST_P521 =
{
    521,
    ECurve_NIST_P521_p,  sizeof(ECurve_NIST_P521_p),
    ECurve_NIST_P521_a,  sizeof(ECurve_NIST_P521_a),
    ECurve_NIST_P521_b,  sizeof(ECurve_NIST_P521_b),
    ECurve_NIST_P521_Gx, sizeof(ECurve_NIST_P521_Gx),
    ECurve_NIST_P521_Gy, sizeof(ECurve_NIST_P521_Gy),
    ECurve_NIST_P521_n,  sizeof(ECurve_NIST_P521_n),
    1
};
#endif

#if defined(SUPPORT_EC_CURVE25519) || defined(SUPPORT_EC_EDWARDS25519)
/* Curve25519
 * Montgomery elliptic curves are defined by:
 *
 *     b*y^2 = x^3 + ax^2 + x (mod p), where b is 1 and p is prime.
 *
 * See http://cr.yp.to/ecdh.html for Bernstein's papers/talks on this curve.
 * Also see RFC7748 that specifies values for Gx and Gy (called U(P) and V(P)),
 * but note that there is an errata that corrects the Gy (V(P)) value.
 *
 * For Ed25519 in particular with:
 * p  = 2^255 - 19
 * a  = 486662
 * b  = 1
 * n  = 2^252 + 0x14def9dea2f79cd65812631a5cf5d3ed
 * Gx = 9
 * Gy = 0x5f51e65e475f794b1fe122d388b72eb36dc2b28192839e4dd6163a5d81312c14
 * h  = 8
 */
static const uint8_t ECurve_25519_p[] =
{
    0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xED
};
#endif
#ifdef SUPPORT_EC_CURVE25519
static const uint8_t ECurve_25519_a[] =
{
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x6D, 0x06
};
static const uint8_t ECurve_25519_b[] =
{
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01
};
static const uint8_t ECurve_25519_Gx[] =
{
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09
};
static const uint8_t ECurve_25519_Gy[] =
{
    0x5F, 0x51, 0xE6, 0x5E, 0x47, 0x5F, 0x79, 0x4B, 0x1F, 0xE1, 0x22, 0xD3, 0x88, 0xB7, 0x2E, 0xB3,
    0x6D, 0xC2, 0xB2, 0x81, 0x92, 0x83, 0x9E, 0x4D, 0xD6, 0x16, 0x3A, 0x5D, 0x81, 0x31, 0x2C, 0x14
};
#endif
#if defined(SUPPORT_EC_CURVE25519) || defined(SUPPORT_EC_EDWARDS25519)
static const uint8_t ECurve_25519_n[] =
{
    0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x14, 0xDE, 0xF9, 0xDE, 0xA2, 0xF7, 0x9C, 0xD6, 0x58, 0x12, 0x63, 0x1A, 0x5C, 0xF5, 0xD3, 0xED
};
#endif
#ifdef SUPPORT_EC_CURVE25519
static const ECC_DOMAIN_PARAMETERS_t ECurve_25519 =
{
    255,
    ECurve_25519_p,  sizeof(ECurve_25519_p),
    ECurve_25519_a,  sizeof(ECurve_25519_a),
    ECurve_25519_b,  sizeof(ECurve_25519_b),
    ECurve_25519_Gx, sizeof(ECurve_25519_Gx),
    ECurve_25519_Gy, sizeof(ECurve_25519_Gy),
    ECurve_25519_n,  sizeof(ECurve_25519_n),
    8
};
#endif

#ifdef SUPPORT_EC_EDWARDS25519
/* CurveEd25519
 * The twisted Edwards curves are defined by:
 *
 *     -x^2 + y^2 = 1 + d*x^2*y^2
 *
 * See ed25519.cr.yp.to/papers.html for Bernstein's papers on this curve/EdDSA
 * system. Also see https://datatracker.ietf.org/doc/draft-irtf-cfrg-eddsa/ for
 * background.
 *
 * Note that the curve parameters are tweaked a little to fit them in the
 * EIP-130x structure.
 *
 * For Ed25519 in particular with:
 * p         = 2^255 - 19
 * a = d     = -121665/121666
 * b = const = 0x0f26edf460a006bbd27b08dc03fc4f7ec5a1d3d14b7d1a82cc6e04aaff457e06
 * n = L     = 2^252 + 0x14def9dea2f79cd65812631a5cf5d3ed
 * Gx        = 0x216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a
 * Gy        = 0x6666666666666666666666666666666666666666666666666666666666666658
 * h         = 8
 */
static const uint8_t ECurve_Ed25519_a[] =
{
    0x52, 0x03, 0x6C, 0xEE, 0x2B, 0x6F, 0xFE, 0x73, 0x8C, 0xC7, 0x40, 0x79, 0x77, 0x79, 0xE8, 0x98,
    0x00, 0x70, 0x0A, 0x4D, 0x41, 0x41, 0xD8, 0xAB, 0x75, 0xEB, 0x4D, 0xCA, 0x13, 0x59, 0x78, 0xA3
};
static const uint8_t ECurve_Ed25519_b[] =
{
    0x0F, 0x26, 0xED, 0xF4, 0x60, 0xA0, 0x06, 0xBB, 0xD2, 0x7B, 0x08, 0xDC, 0x03, 0xFC, 0x4F, 0x7E,
    0xC5, 0xA1, 0xD3, 0xD1, 0x4B, 0x7D, 0x1A, 0x82, 0xCC, 0x6E, 0x04, 0xAA, 0xFF, 0x45, 0x7E, 0x06
};
static const uint8_t ECurve_Ed25519_Gx[] =
{
    0x21, 0x69, 0x36, 0xD3, 0xCD, 0x6E, 0x53, 0xFE, 0xC0, 0xA4, 0xE2, 0x31, 0xFD, 0xD6, 0xDC, 0x5C,
    0x69, 0x2C, 0xC7, 0x60, 0x95, 0x25, 0xA7, 0xB2, 0xC9, 0x56, 0x2D, 0x60, 0x8F, 0x25, 0xD5, 0x1A
};
static const uint8_t ECurve_Ed25519_Gy[] =
{
    0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
    0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x58
};
static const ECC_DOMAIN_PARAMETERS_t ECurve_Ed25519 =
{
    255,    // ModulusSizeBits
    ECurve_25519_p,    sizeof(ECurve_25519_p),      // Modulus.Data_p, Modulus.ByteDataSize
    ECurve_Ed25519_a,  sizeof(ECurve_Ed25519_a),    // a.Data_p, a.ByteDataSize
    ECurve_Ed25519_b,  sizeof(ECurve_Ed25519_b),    // b.Data_p, b.ByteDataSize
    ECurve_Ed25519_Gx, sizeof(ECurve_Ed25519_Gx),   // BasePoint.x.Data_p, BasePoint.x.ByteDataSize
    ECurve_Ed25519_Gy, sizeof(ECurve_Ed25519_Gy),   // BasePoint.y.Data_p, BasePoint.y.ByteDataSize
    ECurve_25519_n,    sizeof(ECurve_25519_n),      // Order.Data_p, Order.ByteDataSize
    8                                               // CoFactor
};
#endif

#endif

