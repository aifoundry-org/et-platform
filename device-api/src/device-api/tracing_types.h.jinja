/*------------------------------------------------------------------------------
 * Copyright (C) 2019, Esperanto Technologies Inc.
 * The copyright to the computer program(s) herein is the
 * property of Esperanto Technologies, Inc. All Rights Reserved.
 * The program(s) may be used and/or copied only with
 * the written permission of Esperanto Technologies and
 * in accordance with the terms and conditions stipulated in the
 * agreement/contract under which the program(s) have been supplied.
 ------------------------------------------------------------------------------ */

// WARNING: this file is auto-generated do not edit directly

#ifndef ET_DEVICE_API_TRACING_TYPES_H
#define ET_DEVICE_API_TRACING_TYPES_H

#include "device_api_types.h"

#include <stdint.h>
#include <stddef.h>

#ifdef __cplusplus
namespace device_api {
#endif

/// @brief Default trace buffer size
#define DEVICE_MRT_DEFAULT_BUFFER_SIZE  4096UL

/// @brief Alignemnt requirement for trace buffer region
#define TRACE_BUFFER_REGION_ALIGNEMNT  4096UL

/// @brief Number of trace buffers in trace memory
#define NUMBER_OF_TRACE_BUFFERS         2112UL

#define ALIGN(x, a) (((x) + ((a) - 1)) & ~((a) - 1))

// Trace Enumerations
typedef uint64_t trace_events_e;

/// @brief Supported trace events Enumberation
enum TRACE_EVENTS {
  TRACE_EVENT_ID_NONE = 0, ///< Event ID zero is reserved
<%- for group in cgh.trace_groups() %>
  <%- for trace in group.get("Events", []) %>
  TRACE_EVENT_ID_<< group["Name"] | upper >>_<< trace["Name"] | upper >>, ///< << trace["Description"] >>
  <%- endfor %>
<%- endfor %>
  TRACE_EVENT_ID_LAST ///< Last event marker
};

typedef uint64_t trace_groups_e;

/// @brief Supported trace groups Enumeration
enum TRACE_GROUPS {
  TRACE_GROUP_ID_NONE = 0, ///< Group ID zero is reserved
<%- for group in cgh.trace_groups() %>
  TRACE_GROUP_ID_<< group["Name"] | upper >>, ///< << group["Description"] >>
<%- endfor %>
  TRACE_GROUP_ID_LAST ///< Last group marker
};

typedef uint32_t trace_status_e;

/// @brief Trace status Enumeration
enum TRACE_STATUS {
  TRACE_STATUS_SUCCESS = 0, ///< Operation successful
  TRACE_STATUS_BUFFER_FULL = 1, ///< Trace buffer is full
  TRACE_STATUS_INVALID_VAL = 2, ///< Invalid argument/field
  TRACE_STATUS_DISABLED = 3, ///< Trace/event/group is disabled
  TRACE_STATUS_LAST ///< Last status marker
};

/// @brief This structure represents trace global settings
struct trace_state_t {
  uint64_t log_level:4; ///< These bits represent threshold log level for the event, values
                        ///< taken by this field are defined by enum LOG_LEVELS
  uint64_t uart_en:1; ///< This bit represents Uart logging On/Off state for the given event.
  uint64_t trace_en:1; ///< This bit represents global trace subsystem enable/disable state
};

/// @brief This structure represents trace control region, located at the start of the trace memory.
/// This contains all the trace control knobs used to control tracing for all the minions
struct trace_control_t {
  struct trace_state_t trace_state;
  uint64_t group_knobs[TRACE_GROUP_ID_LAST/(sizeof(uint64_t) * 8) + 1]; ///< Bitmap used for group control knobs
  uint64_t event_knobs[TRACE_EVENT_ID_LAST/(sizeof(uint64_t) * 8) + 1]; ///< Bitmap used for event control knobs
  uint32_t buffer_size; ///< Buffer size control knob
};

/// @brief This structure represents buffer header, present at the start of individual trace buffer
struct buffer_header_t {
  uint16_t hart_id; ///< hart-id of the logging thread
  size_t head; ///< Head index of the ring buffer
  size_t tail; ///< Tail index of the ring buffer
  char buffer[]; ///< Flexible array to access ring buffer memory located just after the buffer_header_t
};

/// @brief This structure represents common Event header, present at the start of each trace event
struct message_header_t {
  uint64_t event_id; ///< Event id of the event
  uint64_t mtime; ///< Timestamp on the device size when the event is logged.
};

// The real structures that go into memory
<%- for group in cgh.trace_groups() %>
  <%- for trace in group.get("Events", []) %>

/// @brief The structure represents TRACE_EVENT_ID_<< group["Name"] | upper >>_<< trace["Name"] | upper >> event
struct trace_<< trace["Name"] >>_t {
  struct message_header_t header;
  <%- set dummy = cgh.validate_trace(trace) -%>
  <%- for field in trace.get("Fields", []) %>
    <%- if field["Type"] == "bytes" %>
  size_t size;  ///< Size of the character string
  char << field["Name"] >>[]; ///< << field["Description"] >>
    <%- else %>
  << cgh.message_field_type(field) >>  << field["Name"] >>; ///< << field["Description"] >>
    <%- endif %>
  <%- endfor %>
};
  <%- endfor %>
<%- endfor %>

#ifdef __cplusplus
} // namespace device_api
#endif

#endif // ET_DEVICE_API_TRACING_TYPES_H
