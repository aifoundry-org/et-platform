/*------------------------------------------------------------------------------
 * Copyright (C) 2019, Esperanto Technologies Inc.
 * The copyright to the computer program(s) herein is the
 * property of Esperanto Technologies, Inc. All Rights Reserved.
 * The program(s) may be used and/or copied only with
 * the written permission of Esperanto Technologies and
 * in accordance with the terms and conditions stipulated in the
 * agreement/contract under which the program(s) have been supplied.
 ------------------------------------------------------------------------------ */

// WARNING: this file is auto-generated do not edit directly

#ifndef ET_DEVICE_<< cgh.c_api_name | upper >>_API_SPEC_H
#define ET_DEVICE_<< cgh.c_api_name | upper >>_API_SPEC_H

/// High level API specifications

/// 8 LSB bytes MD5 checksum of the device-<<cgh.c_api_name | lower>>-api spec
#define DEVICE_<<cgh.c_api_name | upper>>_API_HASH  0x<< cgh.spec_hash() >>ULL

/// API Major
#define DEVICE_<<cgh.c_api_name | upper>>_API_MAJOR <<cgh.spec_data['Version_Major']>>

/// API Minor
#define DEVICE_<<cgh.c_api_name | upper>>_API_MINOR <<cgh.spec_data['Version_Minor']>>

/// API Patch
#define DEVICE_<<cgh.c_api_name | upper>>_API_PATCH <<cgh.spec_data['Version_Patch']>>

//ToDo: Remove commented content
/// Device <<cgh.api_name >> API enum storage type
//typedef uint16_t device_<<cgh.c_api_name | lower>>_api_tag_id_t;
/// Device <<cgh.api_name >> API enum storage type
//typedef uint8_t device_<<cgh.c_api_name | lower>>_api_cmd_id_t;


// Device << cgh.api_name >> API Enumerations
<% for enum in cgh.enums() -%>

typedef << enum["Type"] >> << enum.c_type_name>>;

/// @brief << enum["Description"] >>
enum << enum.Name | upper >> {
  <% for val in enum.Values -%>
  << enum.Name | upper >>_<< val["Name"] >> = << val["Value"] >>,
  <% endfor %>
};

<% endfor %>


<%- if cgh.c_api_name == 'ops' %>
///  Currently MM Firmware needs both cmd/rsp IDs. So this enum is retained for OPS node 
/// @enum Enumeration of all the RPC messages that the Device <<cgh.api_name >> API
/// send/receive
enum device_<<cgh.c_api_name | lower>>_api_msg_e {
    DEV_<<cgh.c_api_name | upper >>_API_MID_NONE = << cgh.message_start_id >>,
<%- for message in cgh.messages() %>
    DEV_<<cgh.c_api_name | upper >>_API_MID_<< message["Name"] | upper >> = << cgh.message_start_id + loop.index >>, ///< << message["Description"] >>
<%- endfor %>
    DEV_<<cgh.c_api_name | upper >>_API_MID_LAST  = << cgh.message_max_id >>
};
<%- endif %>

#endif // ET_DEVICE_<< cgh.c_api_name | upper >>_API_SPEC_H
