import pytest
import os, sys, time
import socket
#sys.path.append(f'/eng/nihars/python_scripts/pyserial-3.5')
import serial

class Target:
    def __init__(self, target_type, *args):
        if (target_type == "fifo"):
            #Initialize fifo target specific instance
            #variables
            self.target = target_type
            self.tx_fifo = args[0]
            self.rx_fifo = args[1]
            print("Fifo Target Instance: " + self.tx_fifo+":"+self.rx_fifo)
        if(target_type == "serial"):
            #initialize serial target specific instance
            #variables
            self.target = target_type
            self.port_type = args[0]
            self.serial_host = args[1]
            self.serial_attr = args[2]
            print("Serial Target Instance: " + self.serial_host+":"+str(self.serial_attr))
        if(target_type == "jtag"):
            #initialize JTAG target specific instance
            #variables
            self.target = target_type
            print("Jtag target instance creation..")
    def open(self):
        if (self.target == "fifo"):
            #open both tx and rx fifos
            self.tx_fd = os.open(self.tx_fifo, os.O_RDWR|os.O_NONBLOCK)
            self.rx_fd = os.open(self.rx_fifo, os.O_RDWR|os.O_NONBLOCK)
            #print("Opening TX fifo:" + self.tx_fifo)
            #print("Opening RX fifo:" + self.rx_fifo)
        if (self.target == "serial"):
            #open serial port
            print("Opening Serial port:" + self.serial_host)
            if self.port_type in 'TCP':
                self.conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM);
                self.conn.connect((self.serial_host, self.serial_attr))
                print (f'"{self.port_type}" connection establised on {self.serial_host}:{self.serial_attr}')
            elif self.port_type in 'COM':
                self.conn = serial.Serial(port = self.serial_host, baudrate=self.serial_attr, bytesize=8, timeout=2, stopbits=serial.STOPBITS_ONE)
                print (f'"{self.port_type}" port connection establised on {host} with baud rate {attr}')
        if (self.target == "jtag"):
            #open jtag connection
            print("Opening JTAG:" + self.serial_port)
    def close(self):
        if (self.target == "fifo"):
            #close both tx and rx fifos
            os.close(self.tx_fd)
            os.close(self.rx_fd)
            #print("Closing TX fifo:" + self.tx_fifo)
            #print("Closing RX fifo:" + self.rx_fifo)
        if (self.target == "serial"):
            #close serial port
            print("Closing Serial port:" + self.serial_port)
        if (self.target == "jtag"):
            #close jtag connection
            print("Closing JTAG")
    def execute_test(self, command):
        if(self.target == "fifo"):
            os.write(self.rx_fd, command)
            time.sleep(1)
            #TODO:this can be improved.
            response = os.read(self.tx_fd, 4096)
            return response
    def uart_send(self, command):
        print(f'"{self.port_type}" Sending command {command}')
        if self.port_type in 'TCP':
            self.conn.sendall(command)
        elif self.port_type in 'COM':
            self.conn.write(b'{command}')
    def uart_receive(self):
        print (f'"{self.port_type}" Waiting for the response')
        if self.port_type in 'TCP':
            response = self.conn.recv(1024)
        elif self.port_type in 'COM':
            while (self.conn.in_waiting == 0):
                pass
            response = self.conn.readline()
            response = response.decode('Ascii')
        return response