import pytest
import os, sys, stat, time
import socket #for communications with test manager

sys.path.append(".")

from tf.tf_target import *


HOST = '127.0.0.1'  # tf_manager IP
PORT = 9999        # tf_manager port

tf_defs = {
    "base_path":"cd ../../../../build/host-software/deviceLayer/tests/",
    "create_tx_fifo_cmd":"mkdir -p run; mkfifo -m=0666 ",
    "create_rx_fifo_cmd":"mkdir -p run; mkfifo -m=0666 ",
    "path_to_tx_fifo":"run/sp_uart1_tx",
    "path_to_rx_fifo":"run/sp_uart1_rx",
    "launch_sysemu_cmd":"cd ../;./launchSim 9999 &",
    "launch_sysemu": "true"
}

class tf:
    def __init__(self):
        if tf_defs["launch_sysemu"] == "true":
            #Create names UNIX fifos
            os.system("echo $PATH")
            os.system(tf_defs["create_tx_fifo_cmd"]+tf_defs["path_to_tx_fifo"])
            os.system(tf_defs["create_rx_fifo_cmd"]+tf_defs["path_to_rx_fifo"])
            #Launch sysemu
            print("Launching TF Manager")
            os.system(tf_defs["launch_sysemu_cmd"])
            time.sleep(1) # some time for sysemu to launch
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                self.socket = s
                s.connect((HOST, PORT))
                s.send("1".encode())
                time.sleep(1) # some time for sysemu to launch


    def __del__(self):
        print("Terminate Simulator and tear down environment")
        #self.socket.send("2".encode())
        #self.socket.close()

@pytest.fixture()
def env_setup():
    env = tf()
    return env


