include:
  - project: esperantotech/software/gitlab-ci-common
    ref: 1be8a1ec31da665910e1b2b193fcfa1d05866299
    file:
      - pods/nano-pod.yaml
      - pods/large-pod.yaml
      - jobs/generic-k8s-job.yaml

  - project: esperantotech/software/gitlab-ci-common
    ref: master
    file:
      - jobs/conan-jobs.yaml

###### Variables, Matrix and Templates for Conan 2 ############################
###### Should be NO hardcorded values inside the Conan2 jobs ##################
###############################################################################
variables:
  OS: "linux-ubuntu22.04"
  OS_BUILD: "ubuntu-22.04" # for selecting docker image 
  ARCH: "x86_64"
  COMPILER: "gcc11"
  PROFILE_PREFIX: "linux-ubuntu22.04-x86_64-gcc11"  # Should be change accordingly to $OS-$ARCH-$COMPILER
  FULL_BUILD_NAME: "${OS}-${ARCH}-${COMPILER}-${BUILD_TYPE}-${LIB_TYPE}"
  CLICOLOR_FORCE: "1" # force colors on Conan output

.matrix: &matrix_conan2
  - OS: [ "linux-ubuntu22.04" ]
    OS_BUILD: [ "ubuntu-22.04" ] # for selecting docker image 
    ARCH: [ "x86_64" ]
    COMPILER: [ "gcc11" ]
    BUILD_TYPE: [ release, debug ]
    LIB_TYPE: [ static, shared ]

###############################################################################
stages:
  - smoke
  - generate_build
  - build
  - test
  - package
  - deploy

# Only run job in these cases:
# - if it's a tag pipeline
# - if there is a commit pushed or merged to the default branch (pre-release)
.release_job:
  rules:
    - &release_job_rule
      if: $CI_COMMIT_TAG || ($CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH)

# Only run job in these cases:
# - if it's a tag pipeline
# - if there is a commit pushed or merged to the default branch (pre-release)
# - if there is a MR open (pre-release, unstable)
.release_or_development_job:
  rules:
    - if: $CI_COMMIT_TAG || ($CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH)
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      variables:
        DRY_RUN_PARAM: "--dry-run"

# Only run job in these cases:
# - if there is a MR open
.development_job:
  rules:
    - &development_job_rule
      if: ($CI_PIPELINE_SOURCE == "merge_request_event") && ($CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_DEFAULT_BRANCH)

###############################################################################
###############################################################################
###############################################################################

smoke_tests:conan:sysemu:
  extends:
    - .pod_large
    - .template_job
    - .template-conan-linux-ubuntu22.04-gcc11
  stage: smoke
  rules:
    - *development_job_rule
  parallel:
    matrix:
      - BUILD_TYPE: [ Release, Debug ]
  variables:
    TIMEOUT: 30m
    CMD_BUILD: |
      BUILD_TYPE_LOWER=$(echo "${BUILD_TYPE}" | tr '[:upper:]' '[:lower:]')
      conan remote disable conan-tmp
      conan install . -pr:b=default -pr:h=linux-ubuntu22.04-x86_64-gcc11-$${BUILD_TYPE_LOWER} -o et-host-utils:with_tests=True -o et-host-utils:fvisibility=hidden --build missing
      cmake --preset $${BUILD_TYPE_LOWER} -G Ninja
      cmake --build --preset $${BUILD_TYPE_LOWER}
      ctest --preset $${BUILD_TYPE_LOWER} --no-compress-output --output-on-failure --parallel 4

###############################################################################
###############################################################################
###############################################################################

generate_build:conan:
  extends:
    - .pod_nano
    - .template_job
    - .template-conan-linux-ubuntu22.04-gcc11
  stage: generate_build
  needs:
    - job: smoke_tests:conan:sysemu
      optional: true
  rules:
    - !reference [.release_or_development_job, rules]
  variables:
    TIMEOUT: 15m
    CMD_BUILD: |
      cd conan
      python3 -m pip install "ecpt>=2.0.0,<3.0.0" --index-url https://sc-artifactory1.esperanto.ai/artifactory/api/pypi/pypi-virtual/simple
      python3 -m ci_build
  artifacts:
    expire_in: 1h
    paths:
      - conan/build_pipeline.yml
      - conan/lockfiles_info.json

###############################################################################
###############################################################################
###############################################################################

build:conan:
  stage: build
  needs:
    - generate_build:conan
  rules:
    - !reference [.release_or_development_job, rules]
  trigger:
    include:
      - artifact: conan/build_pipeline.yml
        job: generate_build:conan
    strategy: depend

###############################################################################
###############################################################################
###############################################################################

# other tests could go here

###############################################################################
###############################################################################
###############################################################################

on_success:promote:
  extends:
    - .pod_nano
    - .template_job
    - .template-conan-linux-ubuntu22.04-gcc11
  stage: deploy
  needs:
    - generate_build:conan
    - build:conan
  rules:
    - *release_job_rule
  variables:
    PYTHONIOENCODING: utf-8
    CMD_BUILD: |
      cd conan
      python3 -m pip install "ecpt>=2.0.0,<3.0.0" --index-url https://sc-artifactory1.esperanto.ai/artifactory/api/pypi/pypi-virtual/simple
      python3 -m ci_promote


###############################################################################
###############################################################################
###############################################################################

# This job captures the dependency graph of et-host-utils to ensure all following
# jobs are not affected by external changes in artifactory
capture_graph:conan2:
  extends:
    - .pod_large
    - .template_job
  stage: .pre
  needs: []
  image: docker-sw-team.sc-artifactory1.esperanto.ai/convoke/${OS_BUILD}-${COMPILER}-conan2:${CONAN2_DOCKER_IMAGE_VERSION}
  rules:
    - !reference [.release_or_development_job, rules]
  script:
    - conan remove "*" -c
    - conan remote disable "*"
    - conan remote enable conan2-develop
    - conan export conanfile.py  -r conan2-develop --lockfile-out=conan.lock
    - conan cache save "et-host-utils/*:*" --file=conan_cache_save.tgz
  artifacts:
    expire_in: 2d
    paths:
       - conan.lock
       - conan_cache_save.tgz

build:conan2:
  extends:
    - .pod_large
    - .template_job
  stage: build
  needs: 
    - capture_graph:conan2
  rules:
    - !reference [.release_or_development_job, rules]
  image: docker-sw-team.sc-artifactory1.esperanto.ai/convoke/${OS_BUILD}-${COMPILER}-conan2:${CONAN2_DOCKER_IMAGE_VERSION}
  parallel:
    matrix: *matrix_conan2
  script:
    - conan cache restore conan_cache_save.tgz
    - conan lock create conanfile.py -pr:b=default -pr:h=${FULL_BUILD_NAME} -o et-host-utils/*:with_tests=True -o et-host-utils/*:fvisibility=hidden --build=missing --lockfile=conan.lock --lockfile-out=conan.lock
    - conan install     conanfile.py -pr:b=default -pr:h=${FULL_BUILD_NAME} -o et-host-utils/*:with_tests=True -o et-host-utils/*:fvisibility=hidden --build=missing --lockfile=conan.lock   # Install dependencies from the lockfile
    - cmake --preset conan-${BUILD_TYPE} -G Ninja 
    - cmake --build --preset conan-${BUILD_TYPE}  # Build the project
    - ctest --preset conan-${BUILD_TYPE} --no-compress-output --output-on-failure --parallel 4

package2:
  extends:
    - .pod_nano
    - .template_job
  stage: package
  needs: 
    - capture_graph:conan2
    - build:conan2
  rules:
    - !reference  [.release_or_development_job, rules]
  parallel:
    matrix: *matrix_conan2
  image: docker-sw-team.sc-artifactory1.esperanto.ai/convoke/${OS_BUILD}-${COMPILER}-conan2:${CONAN2_DOCKER_IMAGE_VERSION}
  script:
    - conan remote disable "*"
    - conan remote enable conan2-develop
    - conan cache restore conan_cache_save.tgz
    - pkg_name=$(conan inspect conanfile.py | grep name | cut -d ':' -f 2 | xargs)
    - pkg_version=$(conan inspect conanfile.py | grep version | cut -d ':' -f 2 | xargs)
    - conan lock create conanfile.py                      -pr:b=default -pr:h=${FULL_BUILD_NAME} --build=missing --lockfile=conan.lock --lockfile-out=conan.lock
    - conan install --requires=${pkg_name}/${pkg_version} -pr:b=default -pr:h=${FULL_BUILD_NAME} --build=missing --lockfile=conan.lock --lockfile-out=conan.lock --format=json > graph-${FULL_BUILD_NAME}.json
    - conan test test_package ${pkg_name}/${pkg_version}  -pr:b=default -pr:h=${FULL_BUILD_NAME} --build=never   --lockfile=conan.lock
    - conan list --graph=graph-${FULL_BUILD_NAME}.json --graph-binaries=build --format=json > pkglist-${FULL_BUILD_NAME}.json
    - conan remote enable conan2-tmp
    - conan upload --list=pkglist-${FULL_BUILD_NAME}.json -r=conan2-tmp --confirm --format=json > uploaded-${FULL_BUILD_NAME}.json
  artifacts:
    expire_in: 2d
    paths:
      - graph-${FULL_BUILD_NAME}.json
      - pkglist-${FULL_BUILD_NAME}.json
      - uploaded-${FULL_BUILD_NAME}.json

promote2:
  extends:
    - .pod_nano
    - .template_job
  needs:
    - package2
  rules:
    - !reference  [.release_or_development_job, rules]
  stage: deploy
  image: docker-sw-team.sc-artifactory1.esperanto.ai/convoke/${OS_BUILD}-${COMPILER}-conan2:${CONAN2_DOCKER_IMAGE_VERSION}
  script:
    - conan pkglist merge $(find . -name "uploaded*.json" -exec echo --list={} \;) --format=json > pkglist-merged.json
    - conan download --list=pkglist-merged.json --format=json -r=conan2-tmp > pkglist-downloaded.json 
    - conan upload --list=pkglist-downloaded.json --format=json -r=conan2-develop --confirm ${DRY_RUN_PARAM} > pkglist-uploaded.json
  artifacts:
    expire_in: 2d
    paths:
      - pkglist-merged.json
      - pkglist-downloaded.json
      - pkglist-uploaded.json
