include:
  - project: esperantotech/software/gitlab-ci-common
    ref: 1be8a1ec31da665910e1b2b193fcfa1d05866299
    file:
      - rules/generic-workflow-conan.yaml
      - pods/nano-pod.yaml
      - pods/medium-pod.yaml
      - pods/large-pod.yaml
      - pods/xlarge-pod.yaml
      - jobs/generic-k8s-job.yaml
      - jobs/sonarqube-job.yaml
      - rules/exec_maybe_interactively.yaml
      - jobs/check-top-of-master-template.yaml
      - jobs/sw-platform-trigger-template.yaml

  - project: esperantotech/software/gitlab-ci-common
    ref: master
    file:
      - 'jobs/conan-jobs.yaml'

  - project: esperantotech/software/sw-platform
    ref: develop/system-sw
    file:
      - 'gitlab-ci/system-sw/misc/verify-merge-request.yaml'

stages:
  - generate_build
  - build
  - test
  - deploy

default:
  interruptible: true

variables:
  # These two variables are consumed by the jobs from /jobs/sw-platform-trigger.yaml
  SW_PLATFORM_BRANCH: develop/system-sw
  PIPELINE_CI_SUBPROJECT: sw-sysemu
  # Collection of envvars to force colors on Python / pytest / conan / console
  PY_COLOR: "1"
  FORCE_COLOR: "1"
  CLICOLOR: "1"
  CLICOLOR_FORCE: "1"
  CONAN_COLOR_DISPLAY: "1"

# Only run job in these cases:
# - if it's a tag pipeline
# - if there is a commit pushed or merged to the default branch (pre-release)
.release_job:
  rules:
    - &release_job_rule
      if: $CI_COMMIT_TAG || ($CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH)

# Only run job in these cases:
# - if it's a tag pipeline
# - if there is a commit pushed or merged to the default branch (pre-release)
# - if there is a MR open (pre-release, unstable)
.release_or_development_job:
  rules:
    - &release_or_development_job_rule
      if: $CI_COMMIT_TAG || ($CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH) || ($CI_PIPELINE_SOURCE == "merge_request_event")

# Only run job in these cases:
# - if there is a MR open
.development_job:
  rules:
    - &development_job_rule
      if: ($CI_PIPELINE_SOURCE == "merge_request_event") && ($CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_DEFAULT_BRANCH)

###############################################################################
###############################################################################
###############################################################################

verify_project_changes:
  extends:
    - .template_job
    - .pod_nano
    - .verify_merge_request
  image: docker-sw-team.sc-artifactory1.esperanto.ai/convoke/ubuntu-22.04-et-sw-platform:0.0.12
  stage: .pre
  rules:
    - *development_job_rule
  variables:
    PROJ_VER_FILE_NAME: CMakeLists.txt

check-on-top-of-master:
  extends: .check-on-top-of-master
  stage: .pre
  needs: []
  rules:
    - *development_job_rule

clang-format:
  extends:
    - .template_job
    - .pod_medium
    - .template-conan-linux-ubuntu22.04-gcc11
  stage: .pre
  rules:
    - *development_job_rule
  variables:
    CMD_SCRIPT: |
      git fetch --tags
      sudo apt update
      sudo apt install -y --no-install-recommends clang-format
      linter_errors=$(git clang-format --commit ${CI_DEFAULT_BRANCH} -q --diff | grep -v --color=never "no modified files to format" || true)
      echo "$${linter_errors}"
      if [ ! -z "$${linter_errors}" ]; then echo "Detected formatting issues; please fix"; exit 1; else echo "Formatting is correct"; exit 0; fi

capture-graph:
  extends:
    - .template_job
    - .pod_medium
    - .template-conan-linux-ubuntu22.04-gcc11
  stage: .pre
  rules:
    - *release_or_development_job_rule
  variables:
    CMD_SCRIPT: |
      conan remote disable conan-tmp
      conan lock create conanfile.py -pr:b=default -pr:h=baremetal-rv64-gcc8.2-release --build=missing --lockfile-out=deps_base.lock --base
  artifacts:
    when: always
    expire_in: 2d
    paths:
      - deps_base.lock

###############################################################################
###############################################################################
###############################################################################

create-sw-platform-branch:
  extends: .create-sw-platform-branch
  stage: generate_build
  needs:
    - check-on-top-of-master
  rules:
    - *development_job_rule

generate_build:conan:
  extends:
    - .pod_nano
    - .template_job
    - .template-conan-linux-ubuntu22.04-gcc11
  stage: generate_build
  needs:
    - job: verify_project_changes
      optional: true
    - job: check-on-top-of-master
      optional: true
  rules:
    - *release_or_development_job_rule

  variables:
    TIMEOUT: 15m

    CMD_BUILD: |
      cd conan
      python3 -m pip install "ecpt>=2.0.0,<3.0.0" --index-url https://sc-artifactory1.esperanto.ai/artifactory/api/pypi/pypi-virtual/simple
      python3 -m ci_build
  artifacts:
    expire_in: 1d 
    paths:
      - conan/build_pipeline.yml
      - conan/lockfiles_info.json

###############################################################################
###############################################################################
###############################################################################

create-sw-platform-trigger:
  extends: .create-sw-platform-trigger
  stage: build
  needs:
    - create-sw-platform-branch
  rules:
    - *development_job_rule

build:conan:
  extends:
    - .exec_maybe_interactively
  needs:
    - generate_build:conan
  stage: build
  rules:
    - *release_or_development_job_rule
  trigger:
    include:
    - artifact: conan/build_pipeline.yml
      job: generate_build:conan
    strategy: depend

# This job compiles sw-sysemu with clang-tidy.
quality:clang-tidy:
  extends:
    - .pod_xlarge
    - .template_job
    - .template-conan-linux-ubuntu22.04-gcc11
  stage: build
  rules:
    - *release_or_development_job_rule
  needs:
    - job: verify_project_changes
      optional: true
    - job: check-on-top-of-master
      optional: true
    - job: clang-format
      optional: true
  variables:
    TIMEOUT: 1h
    BUILD_TYPE: Release
    CCACHE_DIR: ${CI_PROJECT_DIR}/.ccache
    CMD_CONFIG_BUILD: |
      sudo apt update -y
      sudo apt install -y ccache ninja-build clang-tidy
      ls -l .ccache | true
      mkdir -p ${CCACHE_DIR}
      ccache --show-stats --verbose
      ccache --zero-stats
      ccache --show-stats --verbose
    CMD_BUILD: |
      BUILD_TYPE_LOWER=$(echo "${BUILD_TYPE}" | tr '[:upper:]' '[:lower:]')
      conan remote disable conan-tmp
      conan lock create conanfile.py -pr:b=default -pr:h=linux-ubuntu22.04-x86_64-gcc11-$${BUILD_TYPE_LOWER} -o sw-sysemu:lto=False --build missing --lockfile-out=${BUILD_TYPE}.lock
      conan lock build-order ${BUILD_TYPE}.lock --json=build-order.json
      cat build-order.json
      conan install . --lockfile=${BUILD_TYPE}.lock --build missing
      if [[ $(< build-order.json) != "[]" ]]; then
        conan remote enable conan-tmp
        conan upload "*" --all --check --confirm --retry 5 --retry-wait 120 --parallel -r conan-tmp
        conan upload "*" --all --check --confirm --retry 5 --retry-wait 120 --parallel -r conan-develop
      fi
      cmake -S . -B build/${BUILD_TYPE} -DCMAKE_TOOLCHAIN_FILE=generators/conan_toolchain.cmake -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_CLANG_TIDY="clang-tidy;--use-color;--extra-arg=-Wno-error=unknown-warning-option" -DENABLE_IPO=OFF -G Ninja
      source build/${BUILD_TYPE}/generators/conanbuild.sh
      cmake --build build/${BUILD_TYPE}
      ccache --show-stats --verbose
      cmake --build build/${BUILD_TYPE} --clean-first > compilation.log
      num_clang_tidy_all_warnings=$(cat compilation.log | grep "warning:" | wc -l) || true
      num_clang_tidy_bugprone_warnings=$(cat compilation.log | grep "warning:" | grep bugprone | wc -l) || true
      num_clang_tidy_concurrency_warnings=$(cat compilation.log | grep "warning:" | grep concurrency | wc -l) || true
      num_clang_tidy_cppcoreguidelines_warnings=$(cat compilation.log | grep "warning:" | grep cppcoreguidelines | wc -l) || true
      num_clang_tidy_misc_warnings=$(cat compilation.log | grep "warning:" | grep misc | wc -l) || true
      num_clang_tidy_modernize_warnings=$(cat compilation.log | grep "warning:" | grep modernize | wc -l) || true
      num_clang_tidy_performance_warnings=$(cat compilation.log | grep "warning:" | grep performance | wc -l) || true
      num_clang_tidy_readability_warnings=$(cat compilation.log | grep "warning:" | grep readability | wc -l) || true
      ccache --show-stats --verbose
      echo "num_clang_tidy_all_warnings $$num_clang_tidy_all_warnings" >> metrics.txt
      echo "num_clang_tidy_bugprone_warnings $$num_clang_tidy_bugprone_warnings" >> metrics.txt
      echo "num_clang_tidy_concurrency_warnings $$num_clang_tidy_concurrency_warnings" >> metrics.txt
      echo "num_clang_tidy_cppcoreguidelines_warnings $$num_clang_tidy_cppcoreguidelines_warnings" >> metrics.txt
      echo "num_clang_tidy_misc_warnings $$num_clang_tidy_misc_warnings" >> metrics.txt
      echo "num_clang_tidy_modernize_warnings $$num_clang_tidy_modernize_warnings" >> metrics.txt
      echo "num_clang_tidy_performance_warnings $$num_clang_tidy_performance_warnings" >> metrics.txt
      echo "num_clang_tidy_readability_warnings $$num_clang_tidy_readability_warnings" >> metrics.txt
  cache:
    key: ${CI_JOB_NAME_SLUG}
    paths:
      - .ccache
  artifacts:
    when: always
    expire_in: 1m
    paths:
      - metrics.txt
    reports:
      metrics: metrics.txt

###############################################################################
###############################################################################
###############################################################################

quality:sonarqube-check:
  stage: build
  extends:
    - .template_job
    - .pod_medium
    - .template-conan-linux-ubuntu22.04-gcc11
  needs:
    - capture-graph
  rules:
    - *release_or_development_job_rule
  tags:
    - k8s
  variables:
    GIT_STRATEGY: clone
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
    GIT_SUBMODULE_DEPTH: 1
    GIT_SUBMODULE_STRATEGY: recursive
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    SONAR_BUILD_WRAPPER_URL: "https://sc-sonarq01.esperanto.ai/static/cpp"
    SONAR_SCANNER_URL: "https://binaries.sonarsource.com/Distribution/sonar-scanner-cli"
    SONAR_SCANNER_ARCHIVE_NAME: "sonar-scanner-cli-4.8.0.2856-linux.zip"
    SONAR_SCANNER_UNZIPED_NAME: "sonar-scanner-4.8.0.2856-linux"
    SONAR_BUILD_WRAPPER: "build-wrapper-linux-x86"
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  before_script:
      - sudo apt-get update -qq
      - sudo apt-get install -qq -y --no-install-recommends zip unzip
      - wget ${SONAR_BUILD_WRAPPER_URL}/${SONAR_BUILD_WRAPPER}.zip
      - unzip ${SONAR_BUILD_WRAPPER}.zip
      - wget ${SONAR_SCANNER_URL}/${SONAR_SCANNER_ARCHIVE_NAME}
      - unzip ${SONAR_SCANNER_ARCHIVE_NAME}
      - export PATH=$PATH:$PWD/${SONAR_BUILD_WRAPPER}:$PWD/${SONAR_SCANNER_UNZIPED_NAME}/bin
      - export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$PWD/${SONAR_BUILD_WRAPPER}:$PWD/${SONAR_SCANNER_UNZIPED_NAME}/lib
  script:
      - conan lock create conanfile.py -pr:b=default -pr:h=baremetal-rv64-gcc8.2-release --build missing --lockfile=deps_base.lock --lockfile-out=Release.lock
      - conan install . --lockfile=Release.lock --build=missing -g VirtualRunEnv
      - cmake -S . -B build/Release -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=build/Release/generators/conan_toolchain.cmake -G "Unix Makefiles"
      - source build/Release/generators/conanrun.sh
      - build-wrapper-linux-x86-64 --out-dir build_wrapper_output_directory make -C build/Release all -j ${CPU_COUNT}
      - sonar-scanner

###############################################################################
###############################################################################
###############################################################################

test:micro-benchmarks:
  extends:
    - .pod_xlarge
    - .template_job
    - .template-conan-linux-ubuntu22.04-gcc11
  stage: build
  rules:
    - *development_job_rule
  needs:
    - build:conan
    - quality:clang-tidy
  variables:
    TIMEOUT: 1h
    BUILD_TYPE: Release
    CCACHE_DIR: ${CI_PROJECT_DIR}/.ccache
    CMD_CONFIG_BUILD: |
      sudo apt update -y
      sudo apt install -y ccache ninja-build clang-tidy
      ls -l .ccache | true
      mkdir -p ${CCACHE_DIR}
      ccache --show-stats --verbose
      ccache --zero-stats
      ccache --show-stats --verbose
      conan install conanfile_embedded_elfs.txt -pr:b default -pr:h baremetal-rv64-gcc8.2-release --build missing -g deploy -if=build/${BUILD_TYPE}
      conan install riscv-gnu-toolchain/20220720@ -pr:b=default -pr:h=linux-ubuntu22.04-x86_64-gcc11-release -if=build/toolchain -g VirtualRunEnv
      source build/toolchain/conanrun.sh
      ./make.sh
    CMD_BUILD: |
      BUILD_TYPE_LOWER=$(echo "${BUILD_TYPE}" | tr '[:upper:]' '[:lower:]')
      conan lock create conanfile.py -pr:b=default -pr:h=linux-ubuntu22.04-x86_64-gcc11-$${BUILD_TYPE_LOWER} -o sw-sysemu:lto=False -o sw-sysemu:preload_elfs=False -o sw-sysemu:with_benchmarks=True --build missing --lockfile-out=${BUILD_TYPE}.lock
      conan lock build-order ${BUILD_TYPE}.lock --json=build-order.json
      cat build-order.json
      conan install . --lockfile=${BUILD_TYPE}.lock --build missing
      if [[ $(< build-order.json) != "[]" ]]; then
        conan remote enable conan-tmp
        conan upload "*" --all --check --confirm --retry 5 --retry-wait 120 --parallel -r conan-tmp
        conan upload "*" --all --check --confirm --retry 5 --retry-wait 120 --parallel -r conan-develop
      fi
      cmake --preset $${BUILD_TYPE_LOWER} -G Ninja -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
      source build/${BUILD_TYPE}/generators/conanbuild.sh
      cmake --build --preset $${BUILD_TYPE_LOWER}
      ./build/${BUILD_TYPE}/bench/bench

# integration testing with sw-platform
#
# This is automatically done thanks to this included file:
#   /jobs/sw-platform-trigger.yaml
tests:integration-repo:
  extends: .meta-trigger
  stage: test
  needs:
    - create-sw-platform-trigger
    - build:conan
  rules:
    - *development_job_rule
  trigger:
    strategy: depend
    include:
      - artifact: generated-trigger-job.yaml
        job: create-sw-platform-trigger

###############################################################################
###############################################################################
###############################################################################

on_success:promote:
  extends:
    - .pod_nano
    - .template_job
    - .template-conan-linux-ubuntu22.04-gcc11
  stage: deploy
  needs:
    - generate_build:conan
    - build:conan
  rules:
    - *release_job_rule
  variables:
    PYTHONIOENCODING: utf-8
    CMD_BUILD: |
      cd conan
      python3 -m pip install "ecpt>=2.0.0,<3.0.0" --index-url https://sc-artifactory1.esperanto.ai/artifactory/api/pypi/pypi-virtual/simple
      python3 -m ci_promote


