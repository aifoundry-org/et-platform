#!/usr/bin/env python3

rom = {}

with open("../../../rtl/shire/minion/vpu/trans_unit/trans_log_rom_case_c0.v", "r") as fh:
    for line in fh:
        if "rom_data =" in line:
            parts = line.split()
            idx = int(parts[0][3:-1], 16)
            value = int(parts[3][4:-1], 16)
            # rtl:
            # c0 = value << 1
            c0 = value << 31
            rom[idx] = [ 0, 0, c0 ]

with open("../../../rtl/shire/minion/vpu/trans_unit/trans_log_rom_case_c1c2.v", "r") as fh:
    for line in fh:
        if "rom_data =" in line:
            parts = line.split()
            idx = int(parts[0][3:-1], 16)
            value = int(parts[3][4:-1], 16)
            # rtl:
            # c2 = ((value >> 16) & 0x03ff) << 7
            # c1 = (0x30000 | ((value >>  0) & 0xffff)) << 14
            # bemu: unshifted+unpatched + c1 negated
            c2 = (value >> 16) & 0x03ff
            c1 = ((-value >> 0) & 0xffff) << 18
            rom[idx][0] = c2
            rom[idx][1] = c1

tlog_header = """\
/* Automatically generated from the RTL flog ROM files */
#ifndef BEMU_TLOG_H
#define BEMU_TLOG_H

/*
 * This file is generated from `trans_log_rom_case_c0.v` and
 * `trans_log_rom_case_c1c2.v` using the script `create_bemu_flog_rom`.
 *
 * bemu(c2) := rtl(c2)
 * bemu(c1) := (-rtl(c1) & 0xffff) << 18
 * bemu(c0) := rtl(c0) << 31
 */

static const struct { unsigned long long c2, c1, c0; } tlog[64] = {\
"""

tlog_footer="""
};

#endif // BEMU_TLOG_H\
"""

tlog_table="{}    /* {:2d} */ {{ {:#5x}, {:#11x}, {:#17x} }}"

with open("tlog.h", "w") as fh:
    print(tlog_header, file=fh)
    first_time = True
    for (k,v) in sorted(rom.items()):
        print(tlog_table.format("" if first_time else ",\n", k, v[0], v[1], v[2]),
              end='', file=fh)
        first_time = False
    print(tlog_footer, file=fh)
