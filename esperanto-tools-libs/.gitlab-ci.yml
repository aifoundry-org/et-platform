include:
  - project: esperantotech/software/gitlab-ci-common
    ref: 9e27d5abc3e4538cf5ee705d0263ea3d415e6ef1
    file:
      - rules/generic-workflow-conan.yaml
      - pods/nano-pod.yaml
      - pods/medium-pod.yaml
      - pods/large-pod.yaml
      - pods/xlarge-pod.yaml
      - jobs/generic-k8s-job.yaml
      - jobs/conan-sonarqube-job.yaml
      - rules/exec_maybe_interactively.yaml
      - /jobs/check-top-of-master-template.yaml
      - /jobs/sw-platform-trigger-template.yaml

  - project: esperantotech/software/gitlab-ci-common
    ref: master
    file:
      - 'jobs/conan-jobs.yaml'

stages:
  - smoke
  - generate_build
  - build
  - test
  - deploy

default:
  interruptible: true

variables:
  # These two variables are consumed by the jobs from /jobs/sw-platform-trigger.yaml
  SW_PLATFORM_BRANCH: develop/ml-compiler
  PIPELINE_CI_SUBPROJECT: esperanto-tools-libs

# Only run job in these cases:
# - if it's a tag pipeline
# - if there is a commit pushed or merged to the default branch (pre-release)
.release_job:
  rules:
    - &release_job_rule
      if: $CI_COMMIT_TAG || ($CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH)

# Only run job in these cases:
# - if it's a tag pipeline
# - if there is a commit pushed or merged to the default branch (pre-release)
# - if there is a MR open (pre-release, unstable)
.release_or_development_job:
  rules:
    - &release_or_development_job_rule
      if: $CI_COMMIT_TAG || ($CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH) || ($CI_PIPELINE_SOURCE == "merge_request_event")

# Only run job in these cases:
# - if there is a MR open
.development_job:
  rules:
    - &development_job_rule
      if: ($CI_PIPELINE_SOURCE == "merge_request_event") && ($CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_DEFAULT_BRANCH)

###############################################################################
###############################################################################
###############################################################################

clang-format:
  extends:
    - .template_job
    - .pod_nano
  image: docker-sw-team.sc-artifactory1.esperanto.ai/convoke/centos-7.9.2009-et-sw-platform:0.7.10
  stage: .pre
  rules:
    - *development_job_rule
  variables:
    CMD_SCRIPT: |
      git fetch origin master
      git clang-format --diff origin/master -- * | grep -e "clang-format did not modify any files$" -e "^no modified files to format$"

check-on-top-of-master:
  extends: .check-on-top-of-master
  stage: .pre
  needs: []
  rules:
    - *development_job_rule

###############################################################################
###############################################################################
###############################################################################

capture-graph:
  extends:
    - .template_job
    - .pod_medium
    - .template-conan-linux-ubuntu22.04-gcc11
  stage: .pre
  rules:
    - *release_or_development_job_rule
  variables:
    CMD_SCRIPT: |
      conan remote disable conan-tmp
      conan lock create conanfile.py -pr:b=default -pr:h=linux-ubuntu22.04-x86_64-gcc11-release-static --build missing --lockfile-out=deps_base.lock --base
  artifacts:
    when: always
    expire_in: 2d
    paths:
      - deps_base.lock

###############################################################################
###############################################################################
###############################################################################

# Smoke job that executes unit-tests in Release/Debug to capture problems early
unit_tests:conan:sysemu:
  extends:
    - .pod_large
    - .template_job
    - .template-conan-linux-ubuntu22.04-gcc11
  stage: smoke
  needs:
    - job: clang-format
      optional: true
  rules:
    - *development_job_rule
  parallel:
    matrix:
      - BUILD_TYPE: [ Release, Debug ]
  variables:
    KUBERNETES_MEMORY_LIMIT: 32Gi
    TIMEOUT: 2h
    CMD_BUILD: |
      BUILD_TYPE_LOWER=$(echo "${BUILD_TYPE}" | tr '[:upper:]' '[:lower:]')
      sudo apt install ninja-build
      conan remote disable conan-tmp
      conan install . -pr:b=default -pr:h=linux-ubuntu22.04-x86_64-gcc11-$${BUILD_TYPE_LOWER} -o runtime:with_tests=True -o runtime:run_tests=True -o esperanto-flash-tool:header_only=True --build missing
      cmake --preset $${BUILD_TYPE_LOWER} -G Ninja
      cmake --build --preset $${BUILD_TYPE_LOWER}
      cd build/${BUILD_TYPE}
      ctest -L 'UT' -E 'runtime:ut_RuntimeBenchmark' -LE 'MP' --output-on-failure -j 4

###############################################################################
###############################################################################
###############################################################################

create-sw-platform-branch:
  extends: .create-sw-platform-branch
  stage: generate_build
  needs:
    - check-on-top-of-master
  rules:
    - *development_job_rule

# Generates conan child pipeline
generate_build:conan:
  extends:
    - .pod_nano
    - .template_job
    - .template-conan-linux-ubuntu22.04-gcc11
  stage: generate_build
  needs:
    - job: clang-format
      optional: true
    - job: check-on-top-of-master
      optional: true
  rules:
    - *release_or_development_job_rule
  variables:
    TIMEOUT: 15m
    CMD_BUILD: |
      cd conan
      python3 -m pip install "ecpt>=2.0.0,<3.0.0" --index-url https://sc-artifactory1.esperanto.ai/artifactory/api/pypi/pypi-virtual/simple
      python3 -m ci_build
  artifacts:
    expire_in: 1d 
    paths:
      - conan/build_pipeline.yml
      - conan/lockfiles_info.json

###############################################################################
###############################################################################
###############################################################################

create-sw-platform-trigger:
  extends: .create-sw-platform-trigger
  stage: build
  needs:
    - create-sw-platform-branch
  rules:
    - *development_job_rule

# conan child build pipeline
build:conan:
  stage: build
  extends:
    - .exec_maybe_interactively
  needs:
    - generate_build:conan
    - job: unit_tests:conan:sysemu
      optional: true
  rules:
    - *release_or_development_job_rule
  trigger:
    include:
    - artifact: conan/build_pipeline.yml
      job: generate_build:conan
    strategy: depend

###############################################################################
###############################################################################
###############################################################################

quality:sonarqube-check:
  stage: build
  extends:
    - .template_sonarqube_conan_job
    - .pod_medium
    - .template-conan-linux-ubuntu22.04-gcc11
  needs:
    - capture-graph
    - job: unit_tests:conan:sysemu
      optional: true
  rules:
    - *release_or_development_job_rule
  script:
      - conan lock create conanfile.py -pr:b=default -pr:h=linux-ubuntu22.04-x86_64-gcc11-debug-static --build missing --lockfile=deps_base.lock --lockfile-out=Debug.lock
      - conan install . --lockfile=Debug.lock --build=missing -g VirtualRunEnv
      - cmake -S . -B build/Debug -DCMAKE_BUILD_TYPE=Debug -DCMAKE_TOOLCHAIN_FILE=build/Debug/generators/conan_toolchain.cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -G Ninja 
      - source build/Debug/generators/conanrun.sh
      - cp ${CI_PROJECT_DIR}/build/Debug/compile_commands.json .
      - sonar-scanner -Dsonar.cfamily.threads=${KUBERNETES_CPU_REQUEST}

###############################################################################
###############################################################################
###############################################################################

# MR
tests:conan:sysemu:
  extends:
    - .pod_xlarge
    - .template_job
    - .template-conan-linux-ubuntu22.04-gcc11
  stage: test
  needs:
    - job: unit_tests:conan:sysemu
      optional: true
  rules:
    - *development_job_rule
  parallel:
    matrix:
      - BUILD_TYPE: [ Release ]
        SDK: [ "v1.6.2" ]
  variables:
    KUBERNETES_MEMORY_LIMIT: 32Gi
    TIMEOUT: 1h
    CMD_BUILD: |
      BUILD_TYPE_LOWER=$(echo "${BUILD_TYPE}" | tr '[:upper:]' '[:lower:]')
      sudo apt install ninja-build
      conan remote disable conan-tmp
      conan install . -pr:b=default -pr:h=linux-ubuntu22.04-x86_64-gcc11-$${BUILD_TYPE_LOWER} -o runtime:with_tests=True -o runtime:run_tests=True -o runtime:run_tests_sdk=${SDK} -o esperanto-flash-tool:header_only=True --build missing
      cmake --preset $${BUILD_TYPE_LOWER} -G Ninja
      cmake --build --preset $${BUILD_TYPE_LOWER}
      cd build/${BUILD_TYPE}
      ctest -L 'Generic' -LE 'MP' --output-on-failure -j 4
      # SW-18081: Enable ut_mp tests again
      sudo ctest -L 'Generic' -L 'MP' -E ut_mp --output-on-failure

# NIGHTLY 
# - tests are repeated 10 times to catch flacky tests
# - larger pod to execute more tests in parallel
nightly_torture_tests:conan:sysemu:
  extends:
    - .pod_xlarge
    - .template_job
    - .template-conan-linux-ubuntu22.04-gcc11
  stage: test
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  parallel:
    matrix:
      - BUILD_TYPE: [ Release ]
        SDK: [ "latest" ]
  variables:
    TIMEOUT: 3h
    CMD_BUILD: |
      BUILD_TYPE_LOWER=$(echo "${BUILD_TYPE}" | tr '[:upper:]' '[:lower:]')
      sudo apt install ninja-build
      conan remote disable conan-tmp
      conan install . -pr:b=default -pr:h=linux-ubuntu22.04-x86_64-gcc11-$${BUILD_TYPE_LOWER} -o runtime:with_tests=True -o runtime:run_tests=True -o runtime:run_tests_sdk=${SDK} -o esperanto-flash-tool:header_only=True --build=missing
      cmake --preset $${BUILD_TYPE_LOWER} -G Ninja
      cmake --build --preset $${BUILD_TYPE_LOWER}
      cd build/${BUILD_TYPE}
      sudo ctest -L 'Generic' --repeat until-fail:10 --output-on-failure

# integration testing with sw-platform
#
# This is automatically done thanks to this included file:
#   /jobs/sw-platform-trigger.yaml
tests:integration-repo:
  extends: .meta-trigger
  stage: test
  needs:
    - create-sw-platform-trigger
    - build:conan
  rules:
    - *development_job_rule
  trigger:
    strategy: depend
    include:
      - artifact: generated-trigger-job.yaml
        job: create-sw-platform-trigger

###############################################################################
###############################################################################
###############################################################################

on_success:promote:
  extends:
    - .pod_nano
    - .template_job
    - .template-conan-linux-ubuntu22.04-gcc11
  stage: deploy
  needs:
    - generate_build:conan
    - build:conan
  rules:
    - *release_job_rule
  variables:
    PYTHONIOENCODING: utf-8
    CMD_BUILD: |
      cd conan
      python3 -m pip install "ecpt>=2.0.0,<3.0.0" --index-url https://sc-artifactory1.esperanto.ai/artifactory/api/pypi/pypi-virtual/simple
      python3 -m ci_promote
