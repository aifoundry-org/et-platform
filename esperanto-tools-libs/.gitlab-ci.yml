include:
  - project: 'software/gitlab-ci-common'
    ref: 62dd746e59efef47d61463c22bc84254e1437ebe
    file:
      - rules/generic-workflow-conan.yaml
      - pods/nano-pod.yaml
      - pods/medium-pod.yaml
      - pods/large-pod.yaml
      - pods/xlarge-pod.yaml
      - jobs/generic-k8s-job.yaml
      - jobs/sonarqube-job.yaml
      - rules/exec_maybe_interactively.yaml
      - /jobs/check-top-of-master-template.yaml
      - /jobs/sw-platform-trigger-template.yaml

  - project: 'software/gitlab-ci-common'
    ref: master
    file:
      - 'jobs/conan-jobs.yaml'

stages:
  - smoke
  - generate_build
  - build
  - test
  - deploy

default:
  interruptible: true

variables:
  # These two variables are consumed by the jobs from /jobs/sw-platform-trigger.yaml
  SW_PLATFORM_BRANCH: jvera/bump-develop-runtime
  PIPELINE_CI_SUBPROJECT: esperanto-tools-libs

# Only run job in these cases:
# - if it's a tag pipeline
# - if there is a commit pushed or merged to the default branch (pre-release)
.release_job:
  rules:
    - &release_job_rule
      if: $CI_COMMIT_TAG || ($CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH)

# Only run job in these cases:
# - if it's a tag pipeline
# - if there is a commit pushed or merged to the default branch (pre-release)
# - if there is a MR open (pre-release, unstable)
.release_or_development_job:
  rules:
    - &release_or_development_job_rule
      if: $CI_COMMIT_TAG || ($CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH) || ($CI_PIPELINE_SOURCE == "merge_request_event")

# Only run job in these cases:
# - if there is a MR open
.development_job:
  rules:
    - &development_job_rule
      if: ($CI_PIPELINE_SOURCE == "merge_request_event") && ($CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_DEFAULT_BRANCH)

###############################################################################
###############################################################################
###############################################################################

clang-format:
  extends:
    - .template_job
    - .pod_nano
  image: docker-sw-team.sc-artifactory1.esperanto.ai/convoke/centos-7.9.2009-et-sw-platform:0.3.0
  stage: .pre
  rules:
    - *development_job_rule
  variables:
    CMD_SCRIPT: |
      git fetch origin master
      git clang-format --diff origin/master -- * | grep -e "clang-format did not modify any files$" -e "^no modified files to format$"

check-on-top-of-master:
  extends: .check-on-top-of-master
  stage: .pre
  needs: []
  rules:
    - *development_job_rule

###############################################################################
###############################################################################
###############################################################################

# Smoke job that executes unit-tests in Release/Debug to capture problems early
unit_tests:conan:sysemu:
  extends:
    - .pod_large
    - .template_job
    - .template-conan-linux-ubuntu18.04-gcc7
  stage: smoke
  needs: 
    - job: clang-format
      optional: true
  rules:
    - *development_job_rule
  parallel:
    matrix:
      - BUILD_TYPE: [ Release, Debug ]
  variables:
    KUBERNETES_MEMORY_LIMIT: 32Gi
    TIMEOUT: 2h
    CMD_BUILD: |
      BUILD_TYPE_LOWER=$(echo "${BUILD_TYPE}" | tr '[:upper:]' '[:lower:]')
      sudo apt install ninja-build
      conan remote disable conan-tmp
      conan install . -pr:b default -pr:h linux-ubuntu18.04-x86_64-gcc7-${BUILD_TYPE_LOWER} -o runtime:with_tests=True -o esperanto-flash-tool:header_only=True --build missing
      cmake --preset ${BUILD_TYPE_LOWER} -G Ninja
      cmake --build --preset ${BUILD_TYPE_LOWER}
      cd build/${BUILD_TYPE}
      ctest -L 'UT' -E 'runtime:ut_RuntimeBenchmark' -LE 'MP' --output-on-failure -j 4

###############################################################################
###############################################################################
###############################################################################

create-sw-platform-branch:
  extends: .create-sw-platform-branch
  stage: generate_build
  needs:
    - check-on-top-of-master
  rules:
    - *development_job_rule

# Generates conan child pipeline
generate_build:conan:
  extends:
    - .pod_nano
    - .template_job
    - .template-conan-linux-ubuntu18.04-gcc7
  stage: generate_build
  needs:
    - job: clang-format
      optional: true
    - job: check-on-top-of-master
      optional: true
  rules:
    - *release_or_development_job_rule
  variables:
    TIMEOUT: 15m
    CMD_BUILD: |
      cd conan
      python3 -m ci_build
  artifacts:
    expire_in: 1d 
    paths:
      - conan/build_pipeline.yml
      - conan/lockfiles_info.json

###############################################################################
###############################################################################
###############################################################################

create-sw-platform-trigger:
  extends: .create-sw-platform-trigger
  stage: build
  needs:
    - create-sw-platform-branch
  rules:
    - *development_job_rule

# conan child build pipeline
build:conan:
  stage: build
  extends:
    - .exec_maybe_interactively
  needs:
    - generate_build:conan
    - job: unit_tests:conan:sysemu
      optional: true
  rules:
    - *release_or_development_job_rule
  trigger:
    include:
    - artifact: conan/build_pipeline.yml
      job: generate_build:conan
    strategy: depend

###############################################################################
###############################################################################
###############################################################################

# MR
tests:conan:sysemu:
  extends:
    - .pod_xlarge
    - .template_job
    - .template-conan-linux-ubuntu18.04-gcc7
  stage: test
  needs:
    - job: unit_tests:conan:sysemu
      optional: true
  rules:
    - *development_job_rule
  parallel:
    matrix:
      - BUILD_TYPE: [ Release ]
        SYSEMU_ARTIFACTS: [ 'current' ]
  variables:
    KUBERNETES_MEMORY_LIMIT: 32Gi
    TIMEOUT: 1h
    CMD_BUILD: |
      BUILD_TYPE_LOWER=$(echo "${BUILD_TYPE}" | tr '[:upper:]' '[:lower:]')
      sudo apt install ninja-build
      conan remote disable conan-tmp
      conan install . -pr:b default -pr:h linux-ubuntu18.04-x86_64-gcc7-${BUILD_TYPE_LOWER} -o runtime:with_tests=True -o runtime:with_sysemu_artifacts=${SYSEMU_ARTIFACTS} -o esperanto-flash-tool:header_only=True --build missing
      cmake --preset ${BUILD_TYPE_LOWER} -G Ninja
      cmake --build --preset ${BUILD_TYPE_LOWER}
      cd build/${BUILD_TYPE}
      ctest -L 'Generic' -LE 'MP' --output-on-failure -j 4
      ctest -L 'Generic' -L 'MP' --output-on-failure

# FIXME Enable running the sonarqube job in this repo when the Conan image will have the correct 
# dependencies (java, sonar-scanner)
#
# sonarqube:
#   extends:
#     - .template_job
#     - .template_sonarqube_job
#     - .pod_large
#     - .template-conan-linux-ubuntu18.04-gcc7
#   stage: test
#   variables:
#     CMD_CONFIG_BUILD: |
#       mkdir build
#       cd build
#       conan install .. -pr:b default -pr:h linux-ubuntu18.04-x86_64-gcc7-release --build missing
#       cmake .. -DCMAKE_TOOLCHAIN_FILE=../cmake-build-release/conan/conan_toolchain.cmake
#     CMD_BUILD: |
#       ${BUILD_WRAPPER} --out-dir build_wrapper_output_directory cmake --build ./build -j ${CPU_COUNT}
    
# NIGHTLY 
# - tests are repeated 10 times to catch flacky tests
# - larger pod to execute more tests in parallel
nightly_torture_tests:conan:sysemu:
  extends:
    - .pod_xlarge
    - .template_job
    - .template-conan-linux-ubuntu18.04-gcc7
  stage: test
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  parallel:
    matrix:
      - BUILD_TYPE: [ Release ]
        SYSEMU_ARTIFACTS: [ 'current' ]
  variables:
    TIMEOUT: 2h
    CMD_BUILD: |
      BUILD_TYPE_LOWER=$(echo "${BUILD_TYPE}" | tr '[:upper:]' '[:lower:]')
      sudo apt install ninja-build
      conan remote disable conan-tmp
      conan install . -pr:b default -pr:h linux-ubuntu18.04-x86_64-gcc7-${BUILD_TYPE_LOWER} -o runtime:with_tests=True -o runtime:with_sysemu_artifacts=${SYSEMU_ARTIFACTS} -o esperanto-flash-tool:header_only=True --build missing
      cmake --preset ${BUILD_TYPE_LOWER} -G Ninja
      cmake --build --preset ${BUILD_TYPE_LOWER}
      cd build/${BUILD_TYPE}
      ctest -L 'Generic' --repeat until-fail:10 --output-on-failure

# integration testing with sw-platform
#
# This is automatically done thanks to this included file:
#   /jobs/sw-platform-trigger.yaml
tests:integration-repo:
  extends: .meta-trigger
  stage: test
  needs:
    - create-sw-platform-trigger
    - build:conan
  rules:
    - *development_job_rule
  trigger:
    strategy: depend
    include:
      - artifact: generated-trigger-job.yaml
        job: create-sw-platform-trigger

###############################################################################
###############################################################################
###############################################################################

on_success:promote:
  extends:
    - .pod_nano
    - .template_job
    - .template-conan-linux-ubuntu18.04-gcc7
  stage: deploy
  needs:
    - generate_build:conan
    - build:conan
  rules:
    - *release_job_rule
  variables:
    PYTHONIOENCODING: utf-8
    CMD_BUILD: |
      cd conan
      python3 -m ci_promote

