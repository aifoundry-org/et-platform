include:
  - project: 'software/gitlab-ci-common'
    ref: 65f50069493bf125f770dc052b0a90b8be2d305c
    file:
      - rules/generic-workflow-conan.yaml
      - pods/nano-pod.yaml
      - pods/medium-pod.yaml
      - pods/large-pod.yaml
      - pods/xlarge-pod.yaml
      - jobs/generic-k8s-job.yaml
      - jobs/sonarqube-job.yaml
      - rules/exec_maybe_interactively.yaml
      - jobs/check-top-of-master.yaml
      - jobs/sw-platform-trigger.yaml

  - project: 'software/gitlab-ci-common'
    ref: master
    file:
      - 'jobs/conan-jobs.yaml'

stages:
  - smoke
  - generate_build
  - build
  - test
  - deploy

default:
  interruptible: true

variables:
  # These two variables are consumed by the jobs from /jobs/sw-platform-trigger.yaml
  SW_PLATFORM_BRANCH: develop/runtime
  PIPELINE_CI_SUBPROJECT: esperanto-tools-libs


###############################################################################
###############################################################################
###############################################################################

clang-format:
  extends:
    - .template_job
    - .pod_nano
  image: docker-sw-team.sc-artifactory1.esperanto.ai/convoke/centos-7.9.2009-et-sw-platform:0.3.0
  stage: .pre
  variables:
    CMD_SCRIPT: |
      git fetch origin master
      git clang-format --diff origin/master -- * | grep -e "clang-format did not modify any files$" -e "^no modified files to format$"

###############################################################################
###############################################################################
###############################################################################

# Smoke job that executes unit-tests in Release/Debug to capture problems early
unit_tests:conan:sysemu:
  extends:
    - .pod_large
    - .template_job
    - .template-conan-linux-ubuntu18.04-gcc7
  
  stage: smoke

  parallel:
    matrix:
      - BUILD_TYPE: [ Release, Debug ]
  
  variables:
    TIMEOUT: 30m

    CMD_BUILD: |
      BUILD_TYPE_LOWER=$(echo "${BUILD_TYPE}" | tr '[:upper:]' '[:lower:]')
      sudo apt install ninja-build
      conan remote disable conan-tmp
      conan install . -pr:b default -pr:h linux-ubuntu18.04-x86_64-gcc7-${BUILD_TYPE_LOWER} -o runtime:with_tests=True -o esperanto-flash-tool:header_only=True --build missing
      cmake --preset ${BUILD_TYPE} -G Ninja
      cmake --build --preset ${BUILD_TYPE}
      cd cmake-build-${BUILD_TYPE_LOWER}
      ctest -T Test -L 'Generic' -R 'runtime:ut_' -E 'runtime:ut_RuntimeBenchmark' --no-compress-output --output-on-failure --parallel 4

###############################################################################
###############################################################################
###############################################################################

# Generates conan child pipeline
generate_build:conan:
  extends:
    - .pod_nano
    - .template_job
    - .template-conan-linux-ubuntu18.04-gcc7
  stage: generate_build

  variables:
    TIMEOUT: 15m

    CMD_BUILD: |
      cd conan
      python3 -m ci_build
  
  artifacts:
    expire_in: 1d 
    paths:
      - conan/build_pipeline.yml
      - conan/lockfiles_info.json

###############################################################################
###############################################################################
###############################################################################

# conan child build pipeline
build:conan:
  stage: build
  extends:
    - .exec_maybe_interactively
  needs:
  - generate_build:conan
  trigger:
    include:
    - artifact: conan/build_pipeline.yml
      job: generate_build:conan
    strategy: depend

###############################################################################
###############################################################################
###############################################################################

# MR
tests:conan:sysemu:
  extends:
    - .pod_large
    - .template_job
    - .template-conan-linux-ubuntu18.04-gcc7
  
  stage: test
  
  parallel:
    matrix:
      - BUILD_TYPE: [ Release ]
  
  variables:
    TIMEOUT: 30m

    CMD_BUILD: |
      BUILD_TYPE_LOWER=$(echo "${BUILD_TYPE}" | tr '[:upper:]' '[:lower:]')
      sudo apt install ninja-build
      conan remote disable conan-tmp
      conan install . -pr:b default -pr:h linux-ubuntu18.04-x86_64-gcc7-${BUILD_TYPE_LOWER} -o runtime:with_tests=True -o esperanto-flash-tool:header_only=True --build missing
      cmake --preset ${BUILD_TYPE} -G Ninja
      cmake --build --preset ${BUILD_TYPE}
      cd cmake-build-${BUILD_TYPE_LOWER}
      ctest -T Test -L 'Generic' -E 'runtime:ut_RuntimeBenchmark' -E 'Stress' --no-compress-output --output-on-failure --parallel 4

# FIXME Enable running the sonarqube job in this repo when the Conan image will have the correct 
# dependencies (java, sonar-scanner)
#
# sonarqube:
#   extends:
#     - .template_job
#     - .template_sonarqube_job
#     - .pod_large
#     - .template-conan-linux-ubuntu18.04-gcc7
#   stage: test
#   variables:
#     CMD_CONFIG_BUILD: |
#       mkdir build
#       cd build
#       conan install .. -pr:b default -pr:h linux-ubuntu18.04-x86_64-gcc7-release --build missing
#       cmake .. -DCMAKE_TOOLCHAIN_FILE=../cmake-build-release/conan/conan_toolchain.cmake
#     CMD_BUILD: |
#       ${BUILD_WRAPPER} --out-dir build_wrapper_output_directory cmake --build ./build -j ${CPU_COUNT}
    
# NIGHTLY 
# - tests are repeated 10 times to catch flacky tests
# - larger pod to execute more tests in parallel
nightly_torture_tests:conan:sysemu:
  extends:
    - .pod_xlarge
    - .template_job
    - .template-conan-linux-ubuntu18.04-gcc7
  
  stage: test

  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  
  parallel:
    matrix:
      - BUILD_TYPE: [ Release ]
  
  variables:
    TIMEOUT: 30m

    CMD_BUILD: |
      sudo apt install ninja-build

      conan remote disable conan-tmp
      conan install . -pr:b default -pr:h linux-ubuntu18.04-x86_64-gcc7-${BUILD_TYPE_LOWER} -o runtime:with_tests=True -o esperanto-flash-tool:header_only=True --build missing
      cmake --preset ${BUILD_TYPE} -G Ninja
      cmake --build --preset ${BUILD_TYPE}
      cd cmake-build-${BUILD_TYPE_LOWER}
      ctest -T Test -L 'Generic' --repeat until-fail:10 --no-compress-output --output-on-failure --parallel 8

# integration testing with sw-platform
#
# This is automatically done thanks to this included file:
#   /jobs/sw-platform-trigger.yaml

###############################################################################
###############################################################################
###############################################################################

on_success:promote:
  extends:
    - .pod_nano
    - .template_job
    - .template-conan-linux-ubuntu18.04-gcc7
  
  stage: deploy

  needs:
    - generate_build:conan
    - build:conan
    - tests:conan:sysemu
    - meta-trigger
  
  variables:
    PYTHONIOENCODING: utf-8
    CMD_BUILD: |
      cd conan
      python3 -m ci_promote

