//******************************************************************************
// Copyright (C) 2019, Esperanto Technologies Inc.
// The copyright to the computer program(s) herein is the2
// property of Esperanto Technologies, Inc. All Rights Reserved.
// The program(s) may be used and/or copied only with
// the written permission of Esperanto Technologies and
// in accordance with the terms and conditions stipulated in the
// agreement/contract under which the program(s) have been supplied.
//------------------------------------------------------------------------------

/**
 * Marco definitions of the different command line options/types that the runtime exposes.
 * The runtime internally is using abseil for defining its command line options.
 * Target programs that are going to link with the runtime could be using a different
 * library for parsing command line arguments.
 * This file includes marcos that can help us easily re-create the command line options
 * in the target program and copy the parsed values in our internal representation of the
 * options.
 */

//ETRT_OPT(opt_name, OptName, CXX_TYPE, ABSEIL_TYPE, HELP)

#ifndef ETRT_OPT
#error Define the DEF_OPT macro
#endif // ETRT_OPT

//       name_suf  name-suf  abseil-type  llvm-type  Help
ETRT_OPT(dev_target, dev-target, std::string, DeviceTargetOption, "Specify the target device or simulator we would like to talk to: PCIe, sysemu_grpc, device_grpc")
ETRT_OPT(bootrom_trampoline_to_bl2_elf, bootrom-trampoline-to-bl2-elf, std::string, std::string, "Path to the BootromTrampolineToBL2 ELF file")
ETRT_OPT(bl2_elf, bl2-elf, std::string, std::string, "Path to the BL2 ELF file")
ETRT_OPT(master_minion_elf, master-minion-elf, std::string, std::string, "Path to the MasterMinion ELF file")
ETRT_OPT(worker_minion_elf, worker-minion-elf, std::string, std::string, "Path to the WorkerMinion ELF file")
ETRT_OPT(machine_minion_elf, machine-minion-elf, std::string, std::string, "Path to the MachineMinion ELF file")
ETRT_OPT(sysemu_path, sysemu-path, std::string, std::string, "Path to SysEMU")
ETRT_OPT(sysemu_socket_dir, sysemu-socket-dir, std::string, std::string, "Existing folder where SysEMU sockets are going to be created, < 100 characters")
ETRT_OPT(sysemu_run_dir, sysemu-run-dir, std::string, std::string, "Path to SysEMU run folder")
ETRT_OPT(shires, shires, std::string, std::string, "Number of active shires")
ETRT_OPT(etrt_trace, etrt-trace, std::string, std::string, "Path to runtime Protobuf trace")

// Sysemu Options
ETRT_OPT(sysemu_max_cycles, sysemu-max-cycles, uint64_t, uint64_t, "Set SysEMU maximum cycles to run before finishing simulation")
ETRT_OPT(sysemu_shires_mask, sysemu-shires-mask, uint64_t, uint64_t, "Set SysEMU Shire mask (enabled Shires)")
ETRT_OPT(sysemu_pu_uart0_tx_file, sysemu-pu-uart-tx-file, std::string, std::string, "Set SysEMU PU UART0 TX log file")
ETRT_OPT(sysemu_pu_uart1_tx_file, sysemu-pu-uart1-tx-file, std::string, std::string, "Set SysEMU PU UART1 TX log file")
ETRT_OPT(sysemu_spio_uart0_tx_file, sysemu-spio-uart-tx-file, std::string, std::string, "Set SysEMU SPIO UART0 TX log file")
ETRT_OPT(sysemu_spio_uart1_tx_file, sysemu-spio-uart1-tx-file, std::string, std::string, "Set SysEMU SPIO UART1 TX log file")
ETRT_OPT(sysemu_params, sysemu-params, std::string, std::string, "Hyperparameters to pass to SysEMU, might override default values")

#undef ETRT_OPT
