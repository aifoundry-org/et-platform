/*------------------------------------------------------------------------------
 * Copyright (C) 2019, Esperanto Technologies Inc.
 * The copyright to the computer program(s) herein is the
 * property of Esperanto Technologies, Inc. All Rights Reserved.
 * The program(s) may be used and/or copied only with
 * the written permission of Esperanto Technologies and
 * in accordance with the terms and conditions stipulated in the
 * agreement/contract under which the program(s) have been supplied.
 ------------------------------------------------------------------------------ */

// WARNING: this file is auto-generated do not edit directly

#include "CommandsGen.h"
#include "esperanto/runtime/Core/Device.h"
#include "esperanto/runtime/Core/DeviceTarget.h"
#include "esperanto/runtime/Common/ErrorTypes.h"
#include "Tracing/Tracing.h"

using Ms = std::chrono::milliseconds;

namespace et_runtime {
namespace device_api {
namespace devfw_commands {

<% for msg in cgh.rpc_commands() %>

<% set class_name = cgh.name_to_camelcase(msg['Name']) -%>
<% set msg_name = msg['Name'] -%>


<< class_name >>::<< class_name >>(uint32_t stream_id,
 <%- for f in msg['Fields'] -%>
 <%- set namespace = "::device_api::" if cgh.custom_type(f) else "" -%>
 const << namespace >><< cgh.message_field_type(f) >>& << f['Name'] >> <% if not loop.last %>,<% endif %>
 <%- endfor -%>)
{
  cmd_info_.command_info.message_id = ::device_api::MBOX_DEVAPI_MESSAGE_ID_<< msg['Name'] | upper >>;
  cmd_info_.command_info.command_id = command_id_;
  auto time = std::chrono::high_resolution_clock::now();
  cmd_info_.command_info.host_timestamp = std::chrono::duration_cast<std::chrono::milliseconds>(
                     time.time_since_epoch()).count();
  cmd_info_.command_info.stream_id = stream_id;

  <%- for f in msg['Fields'] %>
  cmd_info_.<< f['Name'] >> = << f['Name'] >>;
  <%- endfor %>

  TRACE_DeviceAPI_RPC_Calls_<<msg_name>>( \
    <% for f in msg['Fields'] -%>
      <%- if f['Type'] == 'enum' %>
    static_cast< et_runtime::tracing::DeviceAPI_RPC_Calls_<<f['Enum']>> >(static_cast<int64_t>(<< f['Name'] >>))
      <%- else %>
    << f['Name'] >>
      <%- endif %>  <% if not loop.last %>,<% endif %> \
    <% endfor -%>
  );
}

etrtError << class_name >>::execute(et_runtime::Device* dev) {
  auto &target_device = dev->getTargetDevice();
  auto res = target_device.mb_write(&cmd_info_, sizeof(cmd_info_));
  if (!res) {
    return etrtMailBoxWriteError;
  }
  // FIXME remove the bellow once threading is introduced
  std::vector<uint8_t> message(target_device.mboxMsgMaxSize(), 0);
  auto size = target_device.mb_read(message.data(), message.size(),
                                    std::chrono::seconds(60));
  assert(size == sizeof(response_devapi_t));
  auto response_data =
      reinterpret_cast<response_devapi_t *>(message.data());

  <% set paired_msg = msg['PairedMessage'] -%>
  <% set rsp_cname = cgh.name_to_camelcase(paired_msg) -%>

  auto response = devfw_responses::<< rsp_cname >>(*response_data);

  setResponse(response);

  return etrtSuccess;
}

<% endfor %>

} // devfw_commands
} // device_api
} // et_runtime
