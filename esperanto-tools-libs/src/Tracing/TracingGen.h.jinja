/*------------------------------------------------------------------------------
 * Copyright (C) 2019, Esperanto Technologies Inc.
 * The copyright to the computer program(s) herein is the
 * property of Esperanto Technologies, Inc. All Rights Reserved.
 * The program(s) may be used and/or copied only with
 * the written permission of Esperanto Technologies and
 * in accordance with the terms and conditions stipulated in the
 * agreement/contract under which the program(s) have been supplied.
 ------------------------------------------------------------------------------ */

// WARNING: this file is auto-generated do not edit directly

///
/// \file
///
/// \rst
/// .. _tracing_gen_h
/// \endrst


#ifndef ET_RUNTIME_TRACING_GEN_H
#define ET_RUNTIME_TRACING_GEN_H

#include "Tracing/TracingCommonGen.h"
#include "Tracing/TracingHelpers.h"

#include "esperanto/runtime/Support/Logging.h"

#if ETRT_ENABLE_TRACING

<% for module in spec['Modules'] -%>
  <% set mname = module['Name'] %>
  <% set functions = module['Functions'] -%>
  <% for function in functions -%>
    <% set fname = function['Name'] %>

#define TRACE_<< mname >>_<< fname >>(<< cgh.function_get_argname_list(function) >>)  { \
  auto& options = et_runtime::tracing::getTracingOptions(); \
  if (options.<< mname >>_<< fname >>_enable_text_log) { \
     RTDEBUG  <% raw %> << <% endraw %> " << mname >>::<< fname >> " \
     <% for argument in function.get("Arguments", []) -%>
              <% raw %> << <% endraw %> " << argument['Name'] >>: " <% raw %> << <% endraw %> << argument['Name'] >>   \
     <% endfor -%>
     ; \
  } \
  if (options.<< mname >>_<< fname >>_enable_pb_log) { \
     <%- for arg in function.get("Arguments", []) -%>
       <%- if arg['Repeated'] %>
     auto val_<<arg['Name']>> = conv_vec< << arg['SrcType']>>, et_runtime::tracing::<<cgh.proto_to_cxx_type(module, arg)>> >(<<arg['Name']>>); \
       <%- elif arg['Enum'] %>
     et_runtime::tracing::<<module['Name']>>_<<arg['Enum']>> val_<<arg['Name']>> = <<arg['Name']>>; \

       <%- elif cgh.is_proto_type(arg['Type']) or arg.get('PreInitialized', False) %>
     auto val_<<arg['Name']>> = <<arg['Name']>>; \

       <%- elif arg['Type'] == 'struct' %>
     auto val_<<arg['Name']>> = new et_runtime::tracing::<<module['Name']>>_<<arg['Struct']>>(); \
       <% for f in cgh.get_struct(module['Name'] + "_" + arg['Struct'])['Fields'] -%>
     val_<<arg['Name']>>->set_<<f['Name']>>(<<arg['Name']>>.<<f['Name']>>); \
       <% endfor -%> \
       <%- else %>
     et_runtime::tracing::<<arg['Type']>> val_<<arg['Name']>> = (et_runtime::tracing::<<arg['Type']>>) <<arg['Name']>>; \
       <%- endif -%>
     <%- endfor %>
     et_runtime::tracing::PBRecord_<< mname >>_<< fname >>(
     <%- for arg in function.get("Arguments", []) -%>
       val_<<arg['Name']>>
       <%- if not loop.last %>,<% endif -%>
     <%- endfor -%>
     ); \
  } \
} while(0);


  <%- endfor %>
<%- endfor %>

#else

<% for module in spec['Modules'] -%>
  <% set mname = module['Name'] %>
  <% set functions = module['Functions'] -%>
  <% for function in functions -%>
    <% set fname = function['Name'] %>

#define TRACE_<< mname >>_<< fname >>(<< cgh.function_get_argname_list(function) >>)  { \
  <% for argument in function.get("Arguments", []) -%>
    (void)<< argument['Name'] >>;   \
  <% endfor -%>
} while(0);


  <%- endfor %>
<%- endfor %>


#endif // ETRT_ENABLE_TRACING

namespace et_runtime {
namespace tracing {

}
}
#endif // ET_RUNTIME_TRACING_GEN_H
