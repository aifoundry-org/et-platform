/*------------------------------------------------------------------------------
 * Copyright (C) 2019, Esperanto Technologies Inc.
 * The copyright to the computer program(s) herein is the
 * property of Esperanto Technologies, Inc. All Rights Reserved.
 * The program(s) may be used and/or copied only with
 * the written permission of Esperanto Technologies and
 * in accordance with the terms and conditions stipulated in the
 * agreement/contract under which the program(s) have been supplied.
 ------------------------------------------------------------------------------ */

// WARNING: this file is auto-generated do not edit directly

#include "Tracing/Tracing.h"
#include "Tracing/TracingHelpers.h"
#include "TracingCommonGen.h"
#include "etrt-trace.pb.h"

#include <sys/time.h>
#include <memory>
#include <thread>

namespace et_runtime {
namespace tracing {

const std::array<const char*, static_cast<uint16_t>(TracingOptions::TracingEnable::NUM_ELEM)>
TracingOptions::logging_knobs = {
  /* NONE */  "",
<% for module in spec['Modules'] -%>
  <% set mname = module['Name'] %>
  "<< mname | upper >>_PB_LOG",
  "<< mname | upper >>_TEXT_LOG",
  <% set functions = module['Functions'] -%>
  <% for function in functions -%>
    <% set fname = function['Name'] %>
  "<< mname | upper >>_<< fname |upper >>_PB_LOG",
  "<< mname | upper >>_<< fname |upper >>_TEXT_LOG",
  <%- endfor %>
<%- endfor %>
};

<% for module in spec['Modules'] -%>
  <% set mname = module['Name'] -%>
  <% set functions = module['Functions'] -%>
  <% for function in functions -%>
    <% set fname = function['Name'] %>
bool PBRecord_<< mname >>_<< fname >>(<< cgh.get_cxx_function_arg_list(module, function) >>)
{
   auto message = std::make_unique<RuntimeTraceEntry>();
   message->set_type(MessageType::<< mname | upper >>_<< fname | upper >>);
   auto body = new << mname >>_<< fname >>();

   // Set the timestamp
   struct timeval tv;
   gettimeofday(&tv, NULL);

   auto bp_timestamp = body->mutable_timestamp();
   bp_timestamp->set_seconds(tv.tv_sec);
   bp_timestamp->set_nanos(tv.tv_usec * 1000);

   std::hash<std::thread::id> hasher;
   body->set_tid(hasher(std::this_thread::get_id()));

   <% for argument in function['Arguments'] %>
     <%- if argument['Type'] == "bytes" %>
   body->set_<<argument['Name']>>(<<argument['Name']>>.data(), <<argument['Name']>>.size());
     <%- elif argument['Repeated'] %>
   auto vec = body->mutable_<<argument['Name']>>();
   for (auto& i : <<argument['Name']>>) {
     *(vec->Add())= i;
   }
     <%- elif cgh.is_proto_type(argument['Type']) or argument['Type'][-2:] == '_e' or argument['Type'] == 'enum'%>
   body->set_<<argument['Name']>>(<<argument['Name']>>);
     <%- else %>
   body->set_allocated_<<argument['Name']>>(<<argument['Name']>>);
     <%- endif %>
   <%- endfor %>
   message->set_allocated_<< mname | lower >>_<< fname | lower >>_e(body);
   return saveMessageInTrace(*message);
}
  <% endfor %>
<%- endfor %>


}
}
